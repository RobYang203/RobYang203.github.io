{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/NexT/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"source/css-note-about-flex/assets/flexModule.png","path":"css-note-about-flex/assets/flexModule.png","modified":0,"renderable":0},{"_id":"source/react-dev-note-create-environment/assets/runDevServer.png","path":"react-dev-note-create-environment/assets/runDevServer.png","modified":0,"renderable":0},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/NexT/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1613928163760},{"_id":"themes/NexT/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1613928163760},{"_id":"themes/NexT/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1613928163762},{"_id":"source/.DS_Store","hash":"13e01535a8c769ac3100a2a4833fc191f15bddf1","modified":1687513210854},{"_id":"themes/NexT/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1613928163760},{"_id":"themes/NexT/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1613928163763},{"_id":"themes/NexT/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1613928163762},{"_id":"themes/NexT/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1613928163763},{"_id":"themes/NexT/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1613928163763},{"_id":"themes/NexT/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1613928163763},{"_id":"themes/NexT/_config.yml","hash":"62404dd3112372f5674d6d5a7fc64d620686412a","modified":1613928163763},{"_id":"themes/NexT/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1613928163781},{"_id":"themes/NexT/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1613928163767},{"_id":"source/_posts/css-info.md","hash":"77e89ea361d0b0d8ba4c30a7d37da1abc58f3547","modified":1588274935471},{"_id":"source/_posts/git-info.md","hash":"988fb21b5370823b6521edcc57161927b1c458bc","modified":1634643760754},{"_id":"source/_posts/android-note.md","hash":"30d5065c9d447a5455110bfb848ed966dbed1b26","modified":1634643640926},{"_id":"source/_posts/hexo-intro.md","hash":"13d7949b4b982888994a6d963ccb0e029c1a712f","modified":1634643701797},{"_id":"source/_posts/kotlin-note.md","hash":"747f8bd7c85a11d1b3058a1be5472cc0d9e6e691","modified":1634643732243},{"_id":"source/_posts/js-learning-note.md","hash":"574cf9ad38added30bcdbfd99e7a750c4d1f6f0f","modified":1634642664417},{"_id":"source/_posts/js-promise-note.md","hash":"e72839806e8ebfc257cfa37faa6218a4d852ba15","modified":1592162853100},{"_id":"source/_posts/java-spring-webSite-for-eclipse.md","hash":"74cb0587cd4449c97700a6cff2ab560d0b53a7c0","modified":1634643720963},{"_id":"source/_posts/todo-list-by-cra.md","hash":"a470d19ceade71ab712dd7466a480c7ba5459538","modified":1618417603466},{"_id":"source/_posts/react-learning.md","hash":"d7bfd603ee916966e61be39155ce66ed7c65dc40","modified":1634643741362},{"_id":"source/android-fcm-note/index.md","hash":"edcafb110c69a44ac6d995785e5fb9ab8553a0e2","modified":1588275452047},{"_id":"source/_posts/webpack-learning.md","hash":"28075e6073ee092190de43968fc450884394490d","modified":1634643757575},{"_id":"source/android-layout/index.md","hash":"583c80b5415ff4bf62193091d480cffe53ab8cdb","modified":1588175704860},{"_id":"source/android-lifecycle/index.md","hash":"edcdca9cff4fa5556ea4f05533c8f89a05c6c01c","modified":1588177137247},{"_id":"source/android-qlist/index.md","hash":"94763680dfdb30a13935def7e0e73a320a8e4792","modified":1588274712032},{"_id":"source/categories/index.md","hash":"3268430b80538a118c25a6d052899b6cb26de68e","modified":1579882003268},{"_id":"source/css-note-about-flex/.DS_Store","hash":"17de3d27cf5195f3113ffce7f7031b65ddb78d47","modified":1619689996724},{"_id":"source/create-react-app-note/index.md","hash":"03a8c0465575fd9b2caeb519d094f2c73225f881","modified":1603042080779},{"_id":"source/css-note-about-flex/index.md","hash":"234a8b91ed79c8f6041000ffacdcca2edf9c3ebd","modified":1619073262374},{"_id":"source/css-qlist/index.md","hash":"25e42ab7a9a72c772fe907329c8b5df9e83beef1","modified":1587064442276},{"_id":"source/draft-react-dev-note-create-todolist-by-cra/index.md","hash":"fddb70c2abfdfc8ba6a9f6199c9d079766f8b2ed","modified":1616054333262},{"_id":"source/eclipse-spring-project-setting/index.md","hash":"838748499f05ba143a4876d8c07b71a6dc29d11e","modified":1581269072679},{"_id":"source/eclipse-setting/index.md","hash":"191c1016c17d7cb4be7775a5faa492ac6682daa3","modified":1580029951254},{"_id":"source/git-note/index.md","hash":"66dd7b9ac949132d404abc4a8aa48e53de8e5dca","modified":1588354593193},{"_id":"source/java-jpa-setting/index.md","hash":"82d77c83cff134dc8f52d7129c30a0b4afbd5979","modified":1582749175969},{"_id":"source/git-command-note/index.md","hash":"8966ce75b4656e90072133f2ef8ddb7c3487abc3","modified":1588436653324},{"_id":"source/hexo-tech/index.md","hash":"e129ee91c6968f6e1f0214e30eece59d994b914d","modified":1634643975534},{"_id":"source/java-servlet-tech/index.md","hash":"58b42c68f6ae6d722cede28267da929218a8b5ba","modified":1579895722014},{"_id":"source/java-spring-intro/index.md","hash":"c40cb74292c242e20678b4b6f1bc04438cb69540","modified":1579976565664},{"_id":"source/java-spring-website-using-xml/index.md","hash":"0db2731314893ea9a8c919b2b08926929cd8652c","modified":1581359348572},{"_id":"source/java-spring-q-list/index.md","hash":"ede00a56feb4db2a7fe3c0fb4d2e5fbf43e1b728","modified":1580932792770},{"_id":"source/java-spring-sample-project-intro/index.md","hash":"e5b79c324bd7b515f687c8b84a600b9584bf06db","modified":1580031785802},{"_id":"source/java-spring-website-for-javaconfig/index.md","hash":"7217dd49d6e8ba268b9577d23a6f953fb9697d3a","modified":1582652296062},{"_id":"source/jave-learning/index.md","hash":"1c0da34a18002c29e70d17e1fec573143644b915","modified":1580318278783},{"_id":"source/js-learning-note-2019-12-10/index.md","hash":"111dcd55cd1617722074e5e41d2f1af37bfdfebd","modified":1584633295996},{"_id":"source/js-learning-note-2019-12-17/index.md","hash":"affa70911a1a1d9e9185fca0204ff117436eab5f","modified":1584633311342},{"_id":"source/js-learning-note-2019-12-24/index.md","hash":"c1840175bb6da4f3f27f840915ed5a454e35305d","modified":1584633329512},{"_id":"source/kotlin-note/index.md","hash":"981b69110efa267bfc7ba3716220496d35c6cdea","modified":1588179671924},{"_id":"source/js-learning-note-2020-01-02/index.md","hash":"a6e7db33b77f59099ada7c5cf23e583db11b8cc8","modified":1585080230060},{"_id":"source/other-learning/index.md","hash":"d6d86baaaf9b8bb7772a8aa9646783ec1ad529e2","modified":1580308282293},{"_id":"source/react-dev-note-create-environment/.DS_Store","hash":"9114c12707682ca5aaad9271cd4c8536560c0358","modified":1615178841475},{"_id":"source/react-dev-note-create-environment/index.md","hash":"2bc20cf2a56eab0c9ed1af356dfe5eecbf2b4877","modified":1614228923317},{"_id":"source/react-dev-note-create-todolist-by-cra/index.md","hash":"5de020aec92b71dc580de5b8e9672b63df9fc353","modified":1616116884106},{"_id":"source/react-dev-note-create-todolist-by-cra-class-component-structrue/index.md","hash":"5e312cdf3710987e837fd168fe29ff3ae0c60813","modified":1618416537694},{"_id":"source/react-dev-note-create-todolist-by-cra-component-and-render/index.md","hash":"63b2cd802aee7ee0f40855952f7f21881cefeec7","modified":1618318032695},{"_id":"source/react-redux-note/index.md","hash":"c1d5fa2fa557162c21b9cdc60d4d99103d11499a","modified":1589658800299},{"_id":"source/react-native-note/index.md","hash":"1d1546fb323fb330406b29fd21e03441a1f5b924","modified":1634642578302},{"_id":"source/react-intro/index.md","hash":"2df30d520c0473300d4d3ba66e40d5e445a0b9ba","modified":1585846497861},{"_id":"source/react-todolist/index.md","hash":"dd7c52af9e090c170cee6121cab5a676b7788fc3","modified":1585845846299},{"_id":"source/seo-note/index.md","hash":"19928fd6494a5341af21e88888ccc58d64f2143a","modified":1611035861566},{"_id":"source/react-setting/index.md","hash":"ff722f46608e601b275a87f6896e80fe4d3a3734","modified":1586332544909},{"_id":"source/react-router-note/index.md","hash":"161d745fb15b8a3a700240d7b7c644e7d31b8d82","modified":1613651008413},{"_id":"source/rsjx-note/index.md","hash":"84b6b91607ac449246e9e72f2941818f405c64e6","modified":1601865872321},{"_id":"source/tags/index.md","hash":"f30b641c5c08fcccf98b75ce4f9586ab635aefb5","modified":1613928163759},{"_id":"source/unix-cmd-note/index.md","hash":"0161d4f5e3ba6c11fabfad3345329ac4f0452a4a","modified":1601896790863},{"_id":"source/webpack-note/index.md","hash":"bc455e0211ef7106a6ce4563faa1647f37ff504b","modified":1588275124743},{"_id":"source/websocket-note/index.md","hash":"87e3fb557f72a19a778910d1718bd3705ccfe9d7","modified":1596398726426},{"_id":"themes/NexT/.github/CONTRIBUTING.md","hash":"f4825dd07e8c524f4be3fe99d36069828c1b8535","modified":1613928163760},{"_id":"themes/NexT/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1613928163761},{"_id":"themes/NexT/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1613928163760},{"_id":"themes/NexT/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1613928163761},{"_id":"themes/NexT/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1613928163761},{"_id":"themes/NexT/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1613928163761},{"_id":"themes/NexT/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1613928163761},{"_id":"themes/NexT/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1613928163762},{"_id":"themes/NexT/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1613928163761},{"_id":"themes/NexT/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1613928163762},{"_id":"themes/NexT/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1613928163762},{"_id":"themes/NexT/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1613928163762},{"_id":"themes/NexT/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1613928163764},{"_id":"themes/NexT/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1613928163764},{"_id":"themes/NexT/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1613928163764},{"_id":"themes/NexT/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1613928163764},{"_id":"themes/NexT/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1613928163764},{"_id":"themes/NexT/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1613928163765},{"_id":"themes/NexT/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1613928163764},{"_id":"themes/NexT/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1613928163765},{"_id":"themes/NexT/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1613928163765},{"_id":"themes/NexT/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1613928163767},{"_id":"themes/NexT/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1613928163768},{"_id":"themes/NexT/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1613928163768},{"_id":"themes/NexT/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1613928163768},{"_id":"themes/NexT/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1613928163768},{"_id":"themes/NexT/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1613928163768},{"_id":"themes/NexT/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1613928163768},{"_id":"themes/NexT/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1613928163769},{"_id":"themes/NexT/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1613928163768},{"_id":"themes/NexT/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1613928163769},{"_id":"themes/NexT/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1613928163768},{"_id":"themes/NexT/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1613928163769},{"_id":"themes/NexT/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1613928163769},{"_id":"themes/NexT/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1613928163769},{"_id":"themes/NexT/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1613928163769},{"_id":"themes/NexT/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1613928163769},{"_id":"themes/NexT/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1613928163769},{"_id":"themes/NexT/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1613928163770},{"_id":"themes/NexT/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1613928163770},{"_id":"themes/NexT/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1613928163770},{"_id":"themes/NexT/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1613928163770},{"_id":"themes/NexT/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1613928163770},{"_id":"themes/NexT/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1613928163780},{"_id":"themes/NexT/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1613928163780},{"_id":"themes/NexT/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1613928163780},{"_id":"themes/NexT/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1613928163781},{"_id":"themes/NexT/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1613928163780},{"_id":"themes/NexT/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1613928163781},{"_id":"themes/NexT/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1613928163784},{"_id":"source/css-note-about-flex/assets/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1618993165287},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/bug-report.md","hash":"80c31b258f404a16ffc19706c5e5aa3ccb8c887e","modified":1613928163760},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1613928163761},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1613928163761},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/question.md","hash":"2f85f500781124b1848cc419f864797399fcdabc","modified":1613928163761},{"_id":"themes/NexT/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1613928163766},{"_id":"themes/NexT/docs/zh-CN/CONTRIBUTING.md","hash":"bc159df1260e0c912c509090d54dd20a08201100","modified":1613928163766},{"_id":"themes/NexT/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1613928163766},{"_id":"themes/NexT/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1613928163766},{"_id":"themes/NexT/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1613928163766},{"_id":"themes/NexT/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1613928163767},{"_id":"themes/NexT/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1613928163767},{"_id":"themes/NexT/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1613928163767},{"_id":"themes/NexT/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1613928163767},{"_id":"themes/NexT/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1613928163765},{"_id":"themes/NexT/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1613928163765},{"_id":"themes/NexT/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1613928163765},{"_id":"themes/NexT/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1613928163765},{"_id":"themes/NexT/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1613928163770},{"_id":"themes/NexT/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1613928163771},{"_id":"themes/NexT/layout/_macro/post.swig","hash":"d80862f005ccbb1d583e40b6e0e6226cced1b925","modified":1613928163770},{"_id":"themes/NexT/layout/_partials/footer.swig","hash":"434a4979c376c1ff27380c778d0261fea8d0a0a4","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1613928163773},{"_id":"themes/NexT/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1613928163775},{"_id":"themes/NexT/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1613928163777},{"_id":"themes/NexT/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1613928163778},{"_id":"themes/NexT/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1613928163778},{"_id":"themes/NexT/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1613928163781},{"_id":"themes/NexT/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1613928163784},{"_id":"themes/NexT/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1613928163784},{"_id":"themes/NexT/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1613928163784},{"_id":"themes/NexT/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/locals.js","hash":"ffa0e122c1cdf9c86ddca104ddb2dfbaccaa1bb5","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/post.js","hash":"ec740559866c0a6697e6cd6fc364b2231aa36575","modified":1613928163784},{"_id":"themes/NexT/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1613928163784},{"_id":"themes/NexT/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1613928163785},{"_id":"themes/NexT/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1613928163786},{"_id":"themes/NexT/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1613928163786},{"_id":"themes/NexT/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1613928163799},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1613928163799},{"_id":"themes/NexT/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1613928163800},{"_id":"themes/NexT/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1613928163799},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1613928163800},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1613928163800},{"_id":"themes/NexT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1613928163800},{"_id":"themes/NexT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1613928163800},{"_id":"themes/NexT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1613928163800},{"_id":"themes/NexT/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1613928163801},{"_id":"themes/NexT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1613928163801},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1613928163801},{"_id":"themes/NexT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1613928163801},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1613928163801},{"_id":"themes/NexT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1613928163801},{"_id":"themes/NexT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1613928163801},{"_id":"themes/NexT/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1613928163802},{"_id":"themes/NexT/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1613928163801},{"_id":"themes/NexT/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1613928163802},{"_id":"themes/NexT/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1613928163802},{"_id":"themes/NexT/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1613928163802},{"_id":"themes/NexT/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1613928163803},{"_id":"themes/NexT/source/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1613928163803},{"_id":"themes/NexT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613928163796},{"_id":"themes/NexT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613928163796},{"_id":"themes/NexT/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/head/head.swig","hash":"955f68e2c1d3753436141c04fafd57d8fbb265c6","modified":1613928163771},{"_id":"themes/NexT/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/post/post-copyright.swig","hash":"0572a4c685fe5c49021a465b717397217ee04df8","modified":1613928163772},{"_id":"themes/NexT/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1613928163773},{"_id":"themes/NexT/layout/_partials/sidebar/site-overview.swig","hash":"6cc891f0f5553fc3f9ebd3cab8d6a081c20efe56","modified":1613928163773},{"_id":"themes/NexT/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1613928163774},{"_id":"themes/NexT/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1613928163775},{"_id":"themes/NexT/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1613928163775},{"_id":"themes/NexT/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1613928163776},{"_id":"themes/NexT/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1613928163777},{"_id":"themes/NexT/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1613928163777},{"_id":"themes/NexT/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1613928163777},{"_id":"themes/NexT/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1613928163778},{"_id":"themes/NexT/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1613928163777},{"_id":"themes/NexT/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1613928163778},{"_id":"themes/NexT/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1613928163778},{"_id":"themes/NexT/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1613928163779},{"_id":"themes/NexT/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1613928163780},{"_id":"themes/NexT/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1613928163780},{"_id":"themes/NexT/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1613928163781},{"_id":"themes/NexT/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1613928163782},{"_id":"themes/NexT/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1613928163782},{"_id":"themes/NexT/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1613928163782},{"_id":"themes/NexT/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1613928163782},{"_id":"themes/NexT/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1613928163782},{"_id":"themes/NexT/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1613928163782},{"_id":"themes/NexT/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1613928163783},{"_id":"themes/NexT/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1613928163783},{"_id":"themes/NexT/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1613928163796},{"_id":"themes/NexT/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1613928163796},{"_id":"themes/NexT/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1613928163796},{"_id":"themes/NexT/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1613928163799},{"_id":"themes/NexT/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1613928163799},{"_id":"themes/NexT/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1613928163799},{"_id":"themes/NexT/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1613928163799},{"_id":"themes/NexT/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1613928163799},{"_id":"themes/NexT/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1613928163802},{"_id":"themes/NexT/source/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1613928163802},{"_id":"themes/NexT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1613928163803},{"_id":"themes/NexT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1613928163803},{"_id":"themes/NexT/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1613928163803},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1613928163803},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1613928163804},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1613928163807},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1613928163807},{"_id":"themes/NexT/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1613928163786},{"_id":"themes/NexT/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1613928163786},{"_id":"themes/NexT/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1613928163786},{"_id":"themes/NexT/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1613928163795},{"_id":"themes/NexT/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1613928163796},{"_id":"themes/NexT/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1613928163796},{"_id":"themes/NexT/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1613928163797},{"_id":"themes/NexT/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1613928163798},{"_id":"themes/NexT/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1613928163798},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1613928163804},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1613928163804},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1613928163804},{"_id":"source/css-note-about-flex/assets/flexModule.png","hash":"92d5c126a45b7f713093a00e50fb124dc6d6ed05","modified":1618993071159},{"_id":"source/react-dev-note-create-environment/assets/runDevServer.png","hash":"fe34696d31f59797b1744be61c010f708e70dc9e","modified":1614186937851},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1613928163806},{"_id":"themes/NexT/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1613928163787},{"_id":"themes/NexT/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1613928163787},{"_id":"themes/NexT/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1613928163787},{"_id":"themes/NexT/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1613928163787},{"_id":"themes/NexT/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1613928163787},{"_id":"themes/NexT/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-expand.styl","hash":"7a683e254646d32b3336774c0cdcf88c1966c0b1","modified":1613928163788},{"_id":"themes/NexT/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1613928163789},{"_id":"themes/NexT/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1613928163790},{"_id":"themes/NexT/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1613928163791},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1613928163792},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1613928163793},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1613928163794},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"42a12c718b5832cd535a4631759376910c549d94","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1613928163795},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1613928163795},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1613928163806},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1613928163806},{"_id":"public/android-lifecycle/index.html","hash":"8dd7e70ceac36873e2bc441b5adcaa0ea8ab7e28","modified":1687519376273},{"_id":"public/android-qlist/index.html","hash":"89f4793b8255dc45bf5fc9a5489b5c03382843cd","modified":1687519376273},{"_id":"public/categories/index.html","hash":"2af1cc3e497d52d5a6737b666462027be774229e","modified":1687519376273},{"_id":"public/create-react-app-note/index.html","hash":"3cb8bcce9d450628829c873c3cdefbf52a91f86f","modified":1687519376273},{"_id":"public/css-note-about-flex/index.html","hash":"0fe1327801a8f4c20e654cb5f4758752678d9346","modified":1687519376273},{"_id":"public/css-qlist/index.html","hash":"b69cbeefaa11ca7ce4d0d64020d7e05beaf06737","modified":1687519376273},{"_id":"public/eclipse-spring-project-setting/index.html","hash":"116773b4269223e39a6a7be1312da2878256a076","modified":1687519376273},{"_id":"public/eclipse-setting/index.html","hash":"7830060a0fc3293024df659c7bc1c50de9d4ac69","modified":1687519376273},{"_id":"public/java-spring-intro/index.html","hash":"9f73c99a06f71bb1a24be160301d2944f7b6f601","modified":1687519376273},{"_id":"public/java-servlet-tech/index.html","hash":"2301f3d5eeb6ab8b25da10631f8f19c49f620a53","modified":1687519376273},{"_id":"public/java-spring-website-using-xml/index.html","hash":"2aff1174ab0d74befa8be2d75b6067d04e4e3544","modified":1687519376273},{"_id":"public/java-spring-q-list/index.html","hash":"21b8d9ff6549e988feacc1a8810732a7f0aa985f","modified":1687519376273},{"_id":"public/java-spring-sample-project-intro/index.html","hash":"35a55e7c37ae9d0ce67d6064e58101d28131baa8","modified":1687519376273},{"_id":"public/jave-learning/index.html","hash":"73d3aa688d79f0f9b329249440592e121966052e","modified":1687519376273},{"_id":"public/other-learning/index.html","hash":"32407820e587242598812c79f38eb26c2fb62496","modified":1687519376273},{"_id":"public/react-dev-note-create-todolist-by-cra/index.html","hash":"642816c52c217b7fade3238a2775ad93c555b94c","modified":1687519376273},{"_id":"public/react-dev-note-create-todolist-by-cra-component-and-render/index.html","hash":"d9e9091aede029b07a47417f369a3905bc0d733f","modified":1687519376273},{"_id":"public/react-dev-note-create-todolist-by-cra-class-component-structrue/index.html","hash":"391090e9d6d8a38b1b7981b02cd751fc19a694e9","modified":1687519376273},{"_id":"public/react-redux-note/index.html","hash":"9e9cc4833248d3d07f4f824ac43122e3f68c82ff","modified":1687519376273},{"_id":"public/react-todolist/index.html","hash":"83ca06232c327ec87fd01abe65bdf88c7465bba6","modified":1687519376273},{"_id":"public/seo-note/index.html","hash":"de5e573e71e2124f3e166b32ca5dfe094a96a52d","modified":1687519376273},{"_id":"public/rsjx-note/index.html","hash":"8f1c2510a253cb9dee171e9ecaeb605625fd8ac5","modified":1687519376273},{"_id":"public/tags/index.html","hash":"be842a140db6bd4e05906885e24c021c62920205","modified":1687519376273},{"_id":"public/unix-cmd-note/index.html","hash":"ff8c54480a6be6e72af6de1eae1b7927dc725e86","modified":1687519376273},{"_id":"public/websocket-note/index.html","hash":"eabbfc5cdac7e8caca270862876da42f6d607c2a","modified":1687519376273},{"_id":"public/2020/06/05/js-promise-note/index.html","hash":"9c8766cbd33db5416b51cb31cc3d0e9534f3282e","modified":1687519376273},{"_id":"public/2021/02/22/todo-list-by-cra/index.html","hash":"a91e6f05fbea451b3c36ae8d04c2d15591f3c1a8","modified":1687519376273},{"_id":"public/2020/05/02/git-info/index.html","hash":"2a9eb183bab8b0551c2068f5b2ae9520393b970e","modified":1687519376273},{"_id":"public/2020/05/01/webpack-learning/index.html","hash":"09cec6370dd2b1230e4b10b2f0e4934a58455058","modified":1687519376273},{"_id":"public/2020/05/01/css-info/index.html","hash":"f092de8225d4d95013b61132b3efdf7c3ae4df40","modified":1687519376273},{"_id":"public/2020/04/27/kotlin-note/index.html","hash":"491c8a7db898806574e6bf5a7cbe5b01e8bcffc9","modified":1687519376273},{"_id":"public/2020/04/24/android-note/index.html","hash":"8385824c02943b9b1f95ba73e837a176ef3055a8","modified":1687519376273},{"_id":"public/2020/03/03/js-learning-note/index.html","hash":"7f0d050b2c91d2209890486008cfc1603594b982","modified":1687519376273},{"_id":"public/2020/02/28/react-learning/index.html","hash":"599fe4cfc683708113aa29ccdf0bd64dda62d281","modified":1687519376273},{"_id":"public/2020/01/24/java-spring-webSite-for-eclipse/index.html","hash":"ffba12c5713f61aabcc006865b950418f41a6e5a","modified":1687519376273},{"_id":"public/2020/01/24/hexo-intro/index.html","hash":"e175b2ec20b2ed8e03b446182c859091bd507d9d","modified":1687519376273},{"_id":"public/page/2/index.html","hash":"05e43dc9571d3f335016f4b024efc4c590a6aea4","modified":1687519376273},{"_id":"public/archives/index.html","hash":"88ee4617ce30ee2adec86729fe8081af018d680b","modified":1687519376273},{"_id":"public/archives/page/2/index.html","hash":"c4c175bba4ca342dd41d3507466e4b728b8d7ae7","modified":1687519376273},{"_id":"public/archives/2020/index.html","hash":"fb0a2f533c1e00c1eef18f8ba31f89d820e5359c","modified":1687519376273},{"_id":"public/archives/2020/01/index.html","hash":"b89e22549867d82076119e44634454536670cf0e","modified":1687519376273},{"_id":"public/archives/2020/02/index.html","hash":"123ac0d4db6a29222bfd7b5ce13ca05c2f711df5","modified":1687519376273},{"_id":"public/archives/2020/03/index.html","hash":"7aab74ea9fdcda18aa025567ae13943039fd7321","modified":1687519376273},{"_id":"public/archives/2020/04/index.html","hash":"7c7ab4b11401526e49b100d6f38238863eddcd84","modified":1687519376273},{"_id":"public/archives/2020/05/index.html","hash":"f4557315d275ba2020487182fc04e7a3605c1fe1","modified":1687519376273},{"_id":"public/archives/2020/06/index.html","hash":"64127fe1e06b1042d3c6a5968245f0171f9aec3e","modified":1687519376273},{"_id":"public/archives/2021/index.html","hash":"46ccd97dc11bdcda4af5978047c7adf463792f5c","modified":1687519376273},{"_id":"public/archives/2021/02/index.html","hash":"b8394f943df0c7b358806724f0042c2a47b08457","modified":1687519376273},{"_id":"public/tags/教學/index.html","hash":"a42f1890a6db61df82282fd6e5e5a9e18380cfe7","modified":1687519376273},{"_id":"public/tags/CSS/index.html","hash":"97469e331b598a090d78bca13a5e418590a3115c","modified":1687519376273},{"_id":"public/tags/前端/index.html","hash":"fa4434d40d7bd0ca88d244589c3d954b4dee30cd","modified":1687519376273},{"_id":"public/tags/git/index.html","hash":"8b4f21cc1b8eff11697c343bfd5761995cbcb52b","modified":1687519376273},{"_id":"public/tags/note/index.html","hash":"957d8c033a4c8bdf18e5987e1a66ef218510c465","modified":1687519376273},{"_id":"public/tags/Hexo/index.html","hash":"abc7c6c6eb20e78659abcc94f3cdb634ae1fd65b","modified":1687519376273},{"_id":"public/tags/android/index.html","hash":"83e6aa5fd2d48f70854143536ae731a2d56e06be","modified":1687519376273},{"_id":"public/tags/JavaScript/index.html","hash":"91382be329c8f457bbf5b3bbc84612ede8bbfa66","modified":1687519376273},{"_id":"public/tags/kotlin/index.html","hash":"c628c7ceb19e7e8632073e6a16baa5875783f355","modified":1687519376273},{"_id":"public/tags/es6/index.html","hash":"16b97e00485b47e803df628fbc2c40b401b67f01","modified":1687519376273},{"_id":"public/tags/JAVA/index.html","hash":"f041da891f90bf0886854be289f7366b0dd8b544","modified":1687519376273},{"_id":"public/tags/Spring/index.html","hash":"bd5df6704a859553fa422f96ef12c8a67b4203df","modified":1687519376273},{"_id":"public/tags/react-js/index.html","hash":"757e1e8bb6a950e6fb36a85fa308c328a9e3ea4a","modified":1687519376273},{"_id":"public/tags/ReactJs/index.html","hash":"be9f7ce84b03356417d08edccf8f3180fee2438e","modified":1687519376273},{"_id":"public/tags/介紹/index.html","hash":"4234f2107a81e819e570f8a5baa9d740cc90c157","modified":1687519376273},{"_id":"public/tags/webpack/index.html","hash":"8349065e92f74e4dfad7cfb4e28d758aa1177d2f","modified":1687519376273},{"_id":"public/categories/CSS/index.html","hash":"2fff0c18ffc780711469c98f48121fe0646223a5","modified":1687519376273},{"_id":"public/categories/git/index.html","hash":"9c96b000d769681c72694bfe35e8fb1d9579de38","modified":1687519376273},{"_id":"public/categories/Hexo/index.html","hash":"466a24d4b44e08aa758fa6f69212ba5625513025","modified":1687519376273},{"_id":"public/categories/android/index.html","hash":"504e5d84169b08a66b44aa2cb483b461f62f56c1","modified":1687519376273},{"_id":"public/categories/jsNote/index.html","hash":"711571340d924abfdb40c582b8c343239b484f51","modified":1687519376273},{"_id":"public/categories/kotlin/index.html","hash":"7a8edccde2fdb3cfacb67fd78d5e9a57348ce3b7","modified":1687519376273},{"_id":"public/categories/JAVA-Spring/index.html","hash":"71bfa6bb1b5f2200ce45dcd447939529cbdd3442","modified":1687519376273},{"_id":"public/categories/ReactJs/index.html","hash":"3982bbfabd3e1a5eb6a65c59767a42f465ff8738","modified":1687519376273},{"_id":"public/categories/webpack/index.html","hash":"707444e715ff279c100459a03c77355835030779","modified":1687519376273},{"_id":"public/android-fcm-note/index.html","hash":"d0808f3f32d51727307f55b2acf90e9f6376568a","modified":1687519376273},{"_id":"public/android-layout/index.html","hash":"f82b696f7147ffa96a6c5bbd8078a6859bf92c0d","modified":1687519376273},{"_id":"public/draft-react-dev-note-create-todolist-by-cra/index.html","hash":"ef6d850963bf08cb4e7b6f068419a6a9581c5d0b","modified":1687519376273},{"_id":"public/git-note/index.html","hash":"b51f0db30b1bb09e9b07fff1afafc9534fdac623","modified":1687519376273},{"_id":"public/java-jpa-setting/index.html","hash":"dc9f71438e9c86efe5cbed6e4c24bfa9e3cb2101","modified":1687519376273},{"_id":"public/git-command-note/index.html","hash":"07185fae783e53e201af62674ecd990c64150b5e","modified":1687519376273},{"_id":"public/hexo-tech/index.html","hash":"f61c39ebdf8315f7766afaba717529e1a652b459","modified":1687519376273},{"_id":"public/java-spring-website-for-javaconfig/index.html","hash":"32aab0467b32f19b53f94f5532048ab6f67f2008","modified":1687519376273},{"_id":"public/js-learning-note-2019-12-10/index.html","hash":"ed136c5780d7d045b7314838d36d0f52b4b48617","modified":1687519376273},{"_id":"public/js-learning-note-2019-12-17/index.html","hash":"e4bbdf4af17e2ddf9018d5c008709bee498e08fa","modified":1687519376273},{"_id":"public/js-learning-note-2020-01-02/index.html","hash":"89effd3f6443f347797f0494554ed56792c80592","modified":1687519376273},{"_id":"public/kotlin-note/index.html","hash":"53feaa2fd8578b0b263a109fa40faa0686474a86","modified":1687519376273},{"_id":"public/js-learning-note-2019-12-24/index.html","hash":"f37417506ebd1cf3dbce57a5be1a5c214fafb1a5","modified":1687519376273},{"_id":"public/react-intro/index.html","hash":"a39bdb733a75d6b8c94ebe01ab651c4a3157ab82","modified":1687519376273},{"_id":"public/react-native-note/index.html","hash":"bcb702526cb38241471182258aad4efabb082dab","modified":1687519376273},{"_id":"public/react-dev-note-create-environment/index.html","hash":"fc5d2ccfb1f923365cb61377ccf2c8480e2750b2","modified":1687519376273},{"_id":"public/react-router-note/index.html","hash":"14204dc0859199f41a5d764dcd44cf318ad56936","modified":1687519376273},{"_id":"public/react-setting/index.html","hash":"593f32bd72b5f1083365888b164cc2299f47cdc6","modified":1687519376273},{"_id":"public/webpack-note/index.html","hash":"a674d506ad7c40a815388f240dec93c35be5ee92","modified":1687519376273},{"_id":"public/index.html","hash":"6ffb894ecaed4940344133121f1881bc99486c0b","modified":1687519376273},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1634645231418},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1634645231418},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1634645231418},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1634645231418},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1634645231418},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1634645231418},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1634645231418},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1634645231418},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1634645231418},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1634645231418},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1634645231418},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1634645231418},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1634645231418},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1634645231418},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1634645231418},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1634645231418},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1634645231418},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1634645231418},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1634645231418},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1634645231418},{"_id":"public/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1634645231418},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1634645231418},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1634645231418},{"_id":"public/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1634645231418},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1634645231418},{"_id":"public/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1634645231418},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1634645231418},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1634645231418},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1634645231418},{"_id":"public/css/main.css","hash":"5065a0ba181a2c9cc197c7761f819c8d34e8ac31","modified":1634645231418},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1634645231418},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1634645231418},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1634645231418},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1634645231418},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1634645231418},{"_id":"public/css-note-about-flex/assets/flexModule.png","hash":"92d5c126a45b7f713093a00e50fb124dc6d6ed05","modified":1634645231418},{"_id":"public/react-dev-note-create-environment/assets/runDevServer.png","hash":"fe34696d31f59797b1744be61c010f708e70dc9e","modified":1634645231418},{"_id":"source/_posts/rect-fiber-note.md","hash":"74a7336d2f0c909763768a26b043c8f6a03e2b69","modified":1635181318578},{"_id":"source/rect-fiber-intro/index.md","hash":"8123bbe87be4b804a2ea085a946b4ce8b640919c","modified":1641129976301},{"_id":"source/_drafts/rect-fiber-note.md","hash":"74a7336d2f0c909763768a26b043c8f6a03e2b69","modified":1635181318578},{"_id":"public/rect-fiber-intro/index.html","hash":"b70023e576d0d365c81c960d2d28952e5f42203d","modified":1687519376273}],"Category":[{"name":"CSS","_id":"ckuy1kd8f00045ojtg2ur19sf"},{"name":"git","_id":"ckuy1kd8n000b5ojt730z9xb0"},{"name":"Hexo","_id":"ckuy1kd8t000j5ojt8dp17iin"},{"name":"android","_id":"ckuy1kd8x000q5ojt2aq68cbh"},{"name":"jsNote","_id":"ckuy1kd92000z5ojt671k4kv8"},{"name":"kotlin","_id":"ckuy1kd9400155ojt62hx03ij"},{"name":"JAVA-Spring","_id":"ckuy1kd9c001h5ojt7g29faep"},{"name":"ReactJs","_id":"ckuy1kd9e001p5ojt6kcu4wkw"},{"name":"webpack","_id":"ckuy1kd9g001v5ojt9vm94mat"}],"Data":[],"Page":[{"title":"android-fcm-note","date":"2020-04-29T17:09:40.000Z","_content":"# Firebase Messaging\n### FCM (console:https://console.firebase.google.com/ )\n### 註冊接收端\n1. 新增專案\n\t1. 專案名(無限制)\n2. 新增應用程式\n\t1. Android 套件名稱\n\t\t1. 選取APP 的 package name\n\t2. 註冊\n3. 下載設定檔 google.services.json\n\t1. 下載後貼到專案目錄的 /app 目錄下面\n4. 新增 Firebase SDK\n\t* 開啟 Android studio\n    * [最新版本請看這](https://firebase.google.com/docs/android/setup)\n\t* build.gradle(Project:PackageName)\n\t```Groovy \n\tbuildscript {\n\t\tdependencies {\n\t\t\t// Add this line\n\t\t\tclasspath 'com.google.gms:google-services:xxx\n\t\t}\n\t```\n\t\t\n\t* build.gradle(Module:app)\n\t```Groovy \n\tdependencies {\n\t\t// Add this line\n\t\timplementation 'com.google.firebase:firebase-messaging:xxx'\n\t}\n\t...\n\t// Add to the bottom of the file\n\tapply plugin: 'com.google.gms.google-services'\n\t\t\n\t```\n5. 建立 FCM Service\n\t1. 建立 extends FirebaseMessagingService 的 class\n\t\t2. @Override\n\t\t\t1. onNewToken\n\t\t\t\t1.取得 Token\n\t\t\t2. onMessageReceived\n\t\t\t\t* 收取訊息\n                * RemoteMessage是接收從FCM傳送過來的類別\n                    * rm.getNotification\n                        * 取得 Notification 格式資料\n                            * 有 title & body\n                    * rm.getData\n                        * 取得自定義資料 class =  Map<String,String>\n\n```kt\nclass FCMService: FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        Log.w(\"FCM Message onNewToken\" , token)\n    }\n\n    override fun onMessageReceived(rm: RemoteMessage) {\n        super.onMessageReceived(rm)\n        Log.w(\"FCM Message Received\" , \"title: ${d?.get(\"title\")}, body: ${d?.get(\"body\")}\")\n\n    }\n\n\n}\n```\n6. MainActivity\n\t1. FirebaseApp.initializeApp(MainActivity.this);\n\t\t1. 啟動 FCM\n\t2. FirebaseInstanceId.getInstance() \n\t\t1. 取得 在這個APP FCM 物件\n\t3. getInstanceId()\n\t\t1. 取得 registerID\n\t\t2. 必須設定\n\t\t\t1. addOnSuccessListener\n\t\t\t\t1. OnSuccessListener<InstanceIdResult>()\n\t\t\t\t\t1. Override\n\t\t\t\t\t\t1. onSuccess\n\t\t\t2. addOnFailureListener \n\t\t\t\t1. 取得 registerID 失敗偵測\n\t\t\t\t2. OnFailureListener\n\t\t\t\t\t1. Override\n\t\t\t\t\t\t1. onFailure\n\n```kt\nFirebaseApp.initializeApp(this)\n\nvar fcm = FirebaseInstanceId.getInstance()\n//註冊fcm\nfcm.instanceId\n    .addOnCompleteListener(object:OnCompleteListener<InstanceIdResult>{\n        override fun onComplete(task: Task<InstanceIdResult>) {\n            if (!task.isSuccessful) {\n                Log.w(\"FCM Error\", \"getInstanceId failed\", task.exception)\n\n            }\n\n            // Get new Instance ID token\n            token = task.result?.token\n            Log.d(\"FCM Complete\", token)\n            //  Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()\n        }\n    })\n    .addOnFailureListener(object : OnFailureListener{\n        override fun onFailure(task: Exception) {\n            Toast.makeText(baseContext, task.toString() , Toast.LENGTH_SHORT).show()\n            Log.w(\"FCM Failure\", task.toString())\n        }\n    })\n```\n\n7. AndroidManifest.xml\n\t1. 設定 service\n\t\n```xml\n<service android:name=\".FCMTest\">\n\t<intent-filter>\n\t\t<action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n\t</intent-filter>\n</service>\n```\n\t\t\n8. NOTE!!!!\n\t* 因 android SDK 變化， Firebase SDK 版本也需要配合改變，否則會無法 Sync\n\t* 建議直接讓系統自己把 SDK版本裝好\n\t\t* Tools -> Firebase\n\t\t* clound messaging\n\t\t* Set up Firebase Cloud Messaging\n\t\t\t1. Connnect your app to Firebase (step 1-3 設定)\n\t\t\t2. Add FCM to your app\n\t\t\t\t1. 按鈕按下去設定好 SDK\n\t\t\t3. Handle messages (step 4-6 設定)\n\t\t\t\t\t\n### 發送 REST API\n> [官方文件](https://firebase.google.com/docs/cloud-messaging/migrate-v1)\n* 有舊版 legacy HTTP ＆ 新版 HTTP v1\n    * legacy HTTP [介紹](https://firebase.google.com/docs/cloud-messaging/http-server-ref)\n        * url   \n        > POST https://fcm.googleapis.com/fcm/send\n        * token - 放在 header\n        > Authorization: key= 在 **FCM console** 專案設定 > Cloud Messaging 的伺服器金鑰\n        * 傳送格式 - 放在 body payload data Content-Type＝application/json\n            ```json\n            {\n                \"to\": \"/topics/news\",\n                \"notification\": {\n                    \"title\": \"Breaking News\",\n                    \"body\": \"New news story available.\"\n                },\n                \"data\": {\n                    \"story_id\": \"story_12345\"\n                }\n            }\n            ```\n            * to - 要傳遞訊息到哪\n                * 個人- 每個裝置註冊時會有`裝置的token`，可用來傳遞訊息\n                * topic - 主題式群體傳送\n            * notification - 通知\n                * 用這個傳送，裝置會自動顯示 notification，不會用自定 notification 的格式\n                * 格式固定 title & body\n            * data - 自定資料格式\n    * 新版 HTTP v1\n        * url   \n        > POST https://fcm.googleapis.com/v1/projects/[project-name]/messages:send\n        * token - 放在 header\n        > Authorization: Bearer <valid Oauth 2.0 token>\n        >> token 要額外申請\n\n## Question\n* 關於 NotRegistered\n\t* 原因:\n\t\t1. 註冊好的 registerID 到期\n\t* 解析發生次類狀況的原因:\n\t\t1. APP 刪除\n\t\t2. 清過 APP 資料\n\t\t3. token 到期(網路說是4個月)\n\t\t4. App 自己刪除 Instance ID\n> P.S. 會有用 Http protocol reference 去執行推送\n\n> P.S. 也可以用 FCM console  https://console.firebase.google.com/ 去做設定\n\n","source":"android-fcm-note/index.md","raw":"---\ntitle: android-fcm-note\ndate: 2020-04-30 01:09:40\n---\n# Firebase Messaging\n### FCM (console:https://console.firebase.google.com/ )\n### 註冊接收端\n1. 新增專案\n\t1. 專案名(無限制)\n2. 新增應用程式\n\t1. Android 套件名稱\n\t\t1. 選取APP 的 package name\n\t2. 註冊\n3. 下載設定檔 google.services.json\n\t1. 下載後貼到專案目錄的 /app 目錄下面\n4. 新增 Firebase SDK\n\t* 開啟 Android studio\n    * [最新版本請看這](https://firebase.google.com/docs/android/setup)\n\t* build.gradle(Project:PackageName)\n\t```Groovy \n\tbuildscript {\n\t\tdependencies {\n\t\t\t// Add this line\n\t\t\tclasspath 'com.google.gms:google-services:xxx\n\t\t}\n\t```\n\t\t\n\t* build.gradle(Module:app)\n\t```Groovy \n\tdependencies {\n\t\t// Add this line\n\t\timplementation 'com.google.firebase:firebase-messaging:xxx'\n\t}\n\t...\n\t// Add to the bottom of the file\n\tapply plugin: 'com.google.gms.google-services'\n\t\t\n\t```\n5. 建立 FCM Service\n\t1. 建立 extends FirebaseMessagingService 的 class\n\t\t2. @Override\n\t\t\t1. onNewToken\n\t\t\t\t1.取得 Token\n\t\t\t2. onMessageReceived\n\t\t\t\t* 收取訊息\n                * RemoteMessage是接收從FCM傳送過來的類別\n                    * rm.getNotification\n                        * 取得 Notification 格式資料\n                            * 有 title & body\n                    * rm.getData\n                        * 取得自定義資料 class =  Map<String,String>\n\n```kt\nclass FCMService: FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        Log.w(\"FCM Message onNewToken\" , token)\n    }\n\n    override fun onMessageReceived(rm: RemoteMessage) {\n        super.onMessageReceived(rm)\n        Log.w(\"FCM Message Received\" , \"title: ${d?.get(\"title\")}, body: ${d?.get(\"body\")}\")\n\n    }\n\n\n}\n```\n6. MainActivity\n\t1. FirebaseApp.initializeApp(MainActivity.this);\n\t\t1. 啟動 FCM\n\t2. FirebaseInstanceId.getInstance() \n\t\t1. 取得 在這個APP FCM 物件\n\t3. getInstanceId()\n\t\t1. 取得 registerID\n\t\t2. 必須設定\n\t\t\t1. addOnSuccessListener\n\t\t\t\t1. OnSuccessListener<InstanceIdResult>()\n\t\t\t\t\t1. Override\n\t\t\t\t\t\t1. onSuccess\n\t\t\t2. addOnFailureListener \n\t\t\t\t1. 取得 registerID 失敗偵測\n\t\t\t\t2. OnFailureListener\n\t\t\t\t\t1. Override\n\t\t\t\t\t\t1. onFailure\n\n```kt\nFirebaseApp.initializeApp(this)\n\nvar fcm = FirebaseInstanceId.getInstance()\n//註冊fcm\nfcm.instanceId\n    .addOnCompleteListener(object:OnCompleteListener<InstanceIdResult>{\n        override fun onComplete(task: Task<InstanceIdResult>) {\n            if (!task.isSuccessful) {\n                Log.w(\"FCM Error\", \"getInstanceId failed\", task.exception)\n\n            }\n\n            // Get new Instance ID token\n            token = task.result?.token\n            Log.d(\"FCM Complete\", token)\n            //  Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()\n        }\n    })\n    .addOnFailureListener(object : OnFailureListener{\n        override fun onFailure(task: Exception) {\n            Toast.makeText(baseContext, task.toString() , Toast.LENGTH_SHORT).show()\n            Log.w(\"FCM Failure\", task.toString())\n        }\n    })\n```\n\n7. AndroidManifest.xml\n\t1. 設定 service\n\t\n```xml\n<service android:name=\".FCMTest\">\n\t<intent-filter>\n\t\t<action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n\t</intent-filter>\n</service>\n```\n\t\t\n8. NOTE!!!!\n\t* 因 android SDK 變化， Firebase SDK 版本也需要配合改變，否則會無法 Sync\n\t* 建議直接讓系統自己把 SDK版本裝好\n\t\t* Tools -> Firebase\n\t\t* clound messaging\n\t\t* Set up Firebase Cloud Messaging\n\t\t\t1. Connnect your app to Firebase (step 1-3 設定)\n\t\t\t2. Add FCM to your app\n\t\t\t\t1. 按鈕按下去設定好 SDK\n\t\t\t3. Handle messages (step 4-6 設定)\n\t\t\t\t\t\n### 發送 REST API\n> [官方文件](https://firebase.google.com/docs/cloud-messaging/migrate-v1)\n* 有舊版 legacy HTTP ＆ 新版 HTTP v1\n    * legacy HTTP [介紹](https://firebase.google.com/docs/cloud-messaging/http-server-ref)\n        * url   \n        > POST https://fcm.googleapis.com/fcm/send\n        * token - 放在 header\n        > Authorization: key= 在 **FCM console** 專案設定 > Cloud Messaging 的伺服器金鑰\n        * 傳送格式 - 放在 body payload data Content-Type＝application/json\n            ```json\n            {\n                \"to\": \"/topics/news\",\n                \"notification\": {\n                    \"title\": \"Breaking News\",\n                    \"body\": \"New news story available.\"\n                },\n                \"data\": {\n                    \"story_id\": \"story_12345\"\n                }\n            }\n            ```\n            * to - 要傳遞訊息到哪\n                * 個人- 每個裝置註冊時會有`裝置的token`，可用來傳遞訊息\n                * topic - 主題式群體傳送\n            * notification - 通知\n                * 用這個傳送，裝置會自動顯示 notification，不會用自定 notification 的格式\n                * 格式固定 title & body\n            * data - 自定資料格式\n    * 新版 HTTP v1\n        * url   \n        > POST https://fcm.googleapis.com/v1/projects/[project-name]/messages:send\n        * token - 放在 header\n        > Authorization: Bearer <valid Oauth 2.0 token>\n        >> token 要額外申請\n\n## Question\n* 關於 NotRegistered\n\t* 原因:\n\t\t1. 註冊好的 registerID 到期\n\t* 解析發生次類狀況的原因:\n\t\t1. APP 刪除\n\t\t2. 清過 APP 資料\n\t\t3. token 到期(網路說是4個月)\n\t\t4. App 自己刪除 Instance ID\n> P.S. 會有用 Http protocol reference 去執行推送\n\n> P.S. 也可以用 FCM console  https://console.firebase.google.com/ 去做設定\n\n","updated":"2020-04-30T19:37:32.047Z","path":"android-fcm-note/index.html","comments":1,"layout":"page","_id":"ckuy1kd8b00015ojt3hag70jq","content":"<h1 id=\"Firebase-Messaging\"><a href=\"#Firebase-Messaging\" class=\"headerlink\" title=\"Firebase Messaging\"></a>Firebase Messaging</h1><h3 id=\"FCM-console-https-console-firebase-google-com\"><a href=\"#FCM-console-https-console-firebase-google-com\" class=\"headerlink\" title=\"FCM (console:https://console.firebase.google.com/ )\"></a>FCM (console:<a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener\">https://console.firebase.google.com/</a> )</h3><h3 id=\"註冊接收端\"><a href=\"#註冊接收端\" class=\"headerlink\" title=\"註冊接收端\"></a>註冊接收端</h3><ol>\n<li><p>新增專案</p>\n<ol>\n<li>專案名(無限制)</li>\n</ol>\n</li>\n<li><p>新增應用程式</p>\n<ol>\n<li>Android 套件名稱<ol>\n<li>選取APP 的 package name</li>\n</ol>\n</li>\n<li>註冊</li>\n</ol>\n</li>\n<li><p>下載設定檔 google.services.json</p>\n<ol>\n<li>下載後貼到專案目錄的 /app 目錄下面</li>\n</ol>\n</li>\n<li><p>新增 Firebase SDK</p>\n<ul>\n<li><p>開啟 Android studio</p>\n</li>\n<li><p><a href=\"https://firebase.google.com/docs/android/setup\" target=\"_blank\" rel=\"noopener\">最新版本請看這</a></p>\n</li>\n<li><p>build.gradle(Project:PackageName)</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Add this line</span></span><br><span class=\"line\">\t\tclasspath <span class=\"string\">'com.google.gms:google-services:xxx</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>build.gradle(Module:app)</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Add this line</span></span><br><span class=\"line\">\timplementation <span class=\"string\">'com.google.firebase:firebase-messaging:xxx'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// Add to the bottom of the file</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.google.gms.google-services'</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>建立 FCM Service</p>\n<ol>\n<li>建立 extends FirebaseMessagingService 的 class<ol start=\"2\">\n<li>@Override<ol>\n<li>onNewToken<br> 1.取得 Token</li>\n<li>onMessageReceived<ul>\n<li>收取訊息</li>\n<li>RemoteMessage是接收從FCM傳送過來的類別<ul>\n<li>rm.getNotification<ul>\n<li>取得 Notification 格式資料<ul>\n<li>有 title &amp; body</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>rm.getData<ul>\n<li>取得自定義資料 class =  Map&lt;String,String&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FCMService</span>: <span class=\"type\">FirebaseMessagingService</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onNewToken</span><span class=\"params\">(token: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onNewToken(token)</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"FCM Message onNewToken\"</span> , token)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMessageReceived</span><span class=\"params\">(rm: <span class=\"type\">RemoteMessage</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMessageReceived(rm)</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"FCM Message Received\"</span> , <span class=\"string\">\"title: <span class=\"subst\">$&#123;d?.get(<span class=\"string\">\"title\"</span>)&#125;</span>, body: <span class=\"subst\">$&#123;d?.get(<span class=\"string\">\"body\"</span>)&#125;</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>MainActivity<ol>\n<li>FirebaseApp.initializeApp(MainActivity.this);<ol>\n<li>啟動 FCM</li>\n</ol>\n</li>\n<li>FirebaseInstanceId.getInstance() <ol>\n<li>取得 在這個APP FCM 物件</li>\n</ol>\n</li>\n<li>getInstanceId()<ol>\n<li>取得 registerID</li>\n<li>必須設定<ol>\n<li>addOnSuccessListener<ol>\n<li>OnSuccessListener<InstanceIdResult>()<ol>\n<li>Override<ol>\n<li>onSuccess</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>addOnFailureListener <ol>\n<li>取得 registerID 失敗偵測</li>\n<li>OnFailureListener<ol>\n<li>Override<ol>\n<li>onFailure</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FirebaseApp.initializeApp(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fcm = FirebaseInstanceId.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//註冊fcm</span></span><br><span class=\"line\">fcm.instanceId</span><br><span class=\"line\">    .addOnCompleteListener(<span class=\"keyword\">object</span>:OnCompleteListener&lt;InstanceIdResult&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onComplete</span><span class=\"params\">(task: <span class=\"type\">Task</span>&lt;<span class=\"type\">InstanceIdResult</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!task.isSuccessful) &#123;</span><br><span class=\"line\">                Log.w(<span class=\"string\">\"FCM Error\"</span>, <span class=\"string\">\"getInstanceId failed\"</span>, task.exception)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Get new Instance ID token</span></span><br><span class=\"line\">            token = task.result?.token</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"FCM Complete\"</span>, token)</span><br><span class=\"line\">            <span class=\"comment\">//  Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .addOnFailureListener(<span class=\"keyword\">object</span> : OnFailureListener&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(task: <span class=\"type\">Exception</span>)</span></span> &#123;</span><br><span class=\"line\">            Toast.makeText(baseContext, task.toString() , Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">            Log.w(<span class=\"string\">\"FCM Failure\"</span>, task.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>AndroidManifest.xml<ol>\n<li>設定 service</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".FCMTest\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.firebase.MESSAGING_EVENT\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>NOTE!!!!<ul>\n<li>因 android SDK 變化， Firebase SDK 版本也需要配合改變，否則會無法 Sync</li>\n<li>建議直接讓系統自己把 SDK版本裝好<ul>\n<li>Tools -&gt; Firebase</li>\n<li>clound messaging</li>\n<li>Set up Firebase Cloud Messaging<ol>\n<li>Connnect your app to Firebase (step 1-3 設定)</li>\n<li>Add FCM to your app<ol>\n<li>按鈕按下去設定好 SDK</li>\n</ol>\n</li>\n<li>Handle messages (step 4-6 設定)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"發送-REST-API\"><a href=\"#發送-REST-API\" class=\"headerlink\" title=\"發送 REST API\"></a>發送 REST API</h3><blockquote>\n<p><a href=\"https://firebase.google.com/docs/cloud-messaging/migrate-v1\" target=\"_blank\" rel=\"noopener\">官方文件</a></p>\n</blockquote>\n<ul>\n<li>有舊版 legacy HTTP ＆ 新版 HTTP v1<ul>\n<li>legacy HTTP <a href=\"https://firebase.google.com/docs/cloud-messaging/http-server-ref\" target=\"_blank\" rel=\"noopener\">介紹</a><ul>\n<li>url   <blockquote>\n<p>POST <a href=\"https://fcm.googleapis.com/fcm/send\" target=\"_blank\" rel=\"noopener\">https://fcm.googleapis.com/fcm/send</a></p>\n</blockquote>\n</li>\n<li>token - 放在 header<blockquote>\n<p>Authorization: key= 在 <strong>FCM console</strong> 專案設定 &gt; Cloud Messaging 的伺服器金鑰</p>\n</blockquote>\n</li>\n<li>傳送格式 - 放在 body payload data Content-Type＝application/json  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"to\"</span>: <span class=\"string\">\"/topics/news\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"notification\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Breaking News\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"body\"</span>: <span class=\"string\">\"New news story available.\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"story_id\"</span>: <span class=\"string\">\"story_12345\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>to - 要傳遞訊息到哪<ul>\n<li>個人- 每個裝置註冊時會有<code>裝置的token</code>，可用來傳遞訊息</li>\n<li>topic - 主題式群體傳送</li>\n</ul>\n</li>\n<li>notification - 通知<ul>\n<li>用這個傳送，裝置會自動顯示 notification，不會用自定 notification 的格式</li>\n<li>格式固定 title &amp; body</li>\n</ul>\n</li>\n<li>data - 自定資料格式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新版 HTTP v1<ul>\n<li>url   <blockquote>\n<p>POST <a href=\"https://fcm.googleapis.com/v1/projects/[project-name]/messages:send\" target=\"_blank\" rel=\"noopener\">https://fcm.googleapis.com/v1/projects/[project-name]/messages:send</a></p>\n</blockquote>\n</li>\n<li>token - 放在 header<blockquote>\n<p>Authorization: Bearer &lt;valid Oauth 2.0 token&gt;</p>\n<blockquote>\n<p>token 要額外申請</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><ul>\n<li>關於 NotRegistered<ul>\n<li>原因:<ol>\n<li>註冊好的 registerID 到期</li>\n</ol>\n</li>\n<li>解析發生次類狀況的原因:<ol>\n<li>APP 刪除</li>\n<li>清過 APP 資料</li>\n<li>token 到期(網路說是4個月)</li>\n<li>App 自己刪除 Instance ID<blockquote>\n<p>P.S. 會有用 Http protocol reference 去執行推送</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>P.S. 也可以用 FCM console  <a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener\">https://console.firebase.google.com/</a> 去做設定</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Firebase-Messaging\"><a href=\"#Firebase-Messaging\" class=\"headerlink\" title=\"Firebase Messaging\"></a>Firebase Messaging</h1><h3 id=\"FCM-console-https-console-firebase-google-com\"><a href=\"#FCM-console-https-console-firebase-google-com\" class=\"headerlink\" title=\"FCM (console:https://console.firebase.google.com/ )\"></a>FCM (console:<a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener\">https://console.firebase.google.com/</a> )</h3><h3 id=\"註冊接收端\"><a href=\"#註冊接收端\" class=\"headerlink\" title=\"註冊接收端\"></a>註冊接收端</h3><ol>\n<li><p>新增專案</p>\n<ol>\n<li>專案名(無限制)</li>\n</ol>\n</li>\n<li><p>新增應用程式</p>\n<ol>\n<li>Android 套件名稱<ol>\n<li>選取APP 的 package name</li>\n</ol>\n</li>\n<li>註冊</li>\n</ol>\n</li>\n<li><p>下載設定檔 google.services.json</p>\n<ol>\n<li>下載後貼到專案目錄的 /app 目錄下面</li>\n</ol>\n</li>\n<li><p>新增 Firebase SDK</p>\n<ul>\n<li><p>開啟 Android studio</p>\n</li>\n<li><p><a href=\"https://firebase.google.com/docs/android/setup\" target=\"_blank\" rel=\"noopener\">最新版本請看這</a></p>\n</li>\n<li><p>build.gradle(Project:PackageName)</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Add this line</span></span><br><span class=\"line\">\t\tclasspath <span class=\"string\">'com.google.gms:google-services:xxx</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>build.gradle(Module:app)</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Add this line</span></span><br><span class=\"line\">\timplementation <span class=\"string\">'com.google.firebase:firebase-messaging:xxx'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// Add to the bottom of the file</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.google.gms.google-services'</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>建立 FCM Service</p>\n<ol>\n<li>建立 extends FirebaseMessagingService 的 class<ol start=\"2\">\n<li>@Override<ol>\n<li>onNewToken<br> 1.取得 Token</li>\n<li>onMessageReceived<ul>\n<li>收取訊息</li>\n<li>RemoteMessage是接收從FCM傳送過來的類別<ul>\n<li>rm.getNotification<ul>\n<li>取得 Notification 格式資料<ul>\n<li>有 title &amp; body</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>rm.getData<ul>\n<li>取得自定義資料 class =  Map&lt;String,String&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FCMService</span>: <span class=\"type\">FirebaseMessagingService</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onNewToken</span><span class=\"params\">(token: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onNewToken(token)</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"FCM Message onNewToken\"</span> , token)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMessageReceived</span><span class=\"params\">(rm: <span class=\"type\">RemoteMessage</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMessageReceived(rm)</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"FCM Message Received\"</span> , <span class=\"string\">\"title: <span class=\"subst\">$&#123;d?.get(<span class=\"string\">\"title\"</span>)&#125;</span>, body: <span class=\"subst\">$&#123;d?.get(<span class=\"string\">\"body\"</span>)&#125;</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>MainActivity<ol>\n<li>FirebaseApp.initializeApp(MainActivity.this);<ol>\n<li>啟動 FCM</li>\n</ol>\n</li>\n<li>FirebaseInstanceId.getInstance() <ol>\n<li>取得 在這個APP FCM 物件</li>\n</ol>\n</li>\n<li>getInstanceId()<ol>\n<li>取得 registerID</li>\n<li>必須設定<ol>\n<li>addOnSuccessListener<ol>\n<li>OnSuccessListener<InstanceIdResult>()<ol>\n<li>Override<ol>\n<li>onSuccess</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>addOnFailureListener <ol>\n<li>取得 registerID 失敗偵測</li>\n<li>OnFailureListener<ol>\n<li>Override<ol>\n<li>onFailure</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FirebaseApp.initializeApp(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fcm = FirebaseInstanceId.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//註冊fcm</span></span><br><span class=\"line\">fcm.instanceId</span><br><span class=\"line\">    .addOnCompleteListener(<span class=\"keyword\">object</span>:OnCompleteListener&lt;InstanceIdResult&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onComplete</span><span class=\"params\">(task: <span class=\"type\">Task</span>&lt;<span class=\"type\">InstanceIdResult</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!task.isSuccessful) &#123;</span><br><span class=\"line\">                Log.w(<span class=\"string\">\"FCM Error\"</span>, <span class=\"string\">\"getInstanceId failed\"</span>, task.exception)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Get new Instance ID token</span></span><br><span class=\"line\">            token = task.result?.token</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"FCM Complete\"</span>, token)</span><br><span class=\"line\">            <span class=\"comment\">//  Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .addOnFailureListener(<span class=\"keyword\">object</span> : OnFailureListener&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(task: <span class=\"type\">Exception</span>)</span></span> &#123;</span><br><span class=\"line\">            Toast.makeText(baseContext, task.toString() , Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">            Log.w(<span class=\"string\">\"FCM Failure\"</span>, task.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>AndroidManifest.xml<ol>\n<li>設定 service</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".FCMTest\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.firebase.MESSAGING_EVENT\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>NOTE!!!!<ul>\n<li>因 android SDK 變化， Firebase SDK 版本也需要配合改變，否則會無法 Sync</li>\n<li>建議直接讓系統自己把 SDK版本裝好<ul>\n<li>Tools -&gt; Firebase</li>\n<li>clound messaging</li>\n<li>Set up Firebase Cloud Messaging<ol>\n<li>Connnect your app to Firebase (step 1-3 設定)</li>\n<li>Add FCM to your app<ol>\n<li>按鈕按下去設定好 SDK</li>\n</ol>\n</li>\n<li>Handle messages (step 4-6 設定)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"發送-REST-API\"><a href=\"#發送-REST-API\" class=\"headerlink\" title=\"發送 REST API\"></a>發送 REST API</h3><blockquote>\n<p><a href=\"https://firebase.google.com/docs/cloud-messaging/migrate-v1\" target=\"_blank\" rel=\"noopener\">官方文件</a></p>\n</blockquote>\n<ul>\n<li>有舊版 legacy HTTP ＆ 新版 HTTP v1<ul>\n<li>legacy HTTP <a href=\"https://firebase.google.com/docs/cloud-messaging/http-server-ref\" target=\"_blank\" rel=\"noopener\">介紹</a><ul>\n<li>url   <blockquote>\n<p>POST <a href=\"https://fcm.googleapis.com/fcm/send\" target=\"_blank\" rel=\"noopener\">https://fcm.googleapis.com/fcm/send</a></p>\n</blockquote>\n</li>\n<li>token - 放在 header<blockquote>\n<p>Authorization: key= 在 <strong>FCM console</strong> 專案設定 &gt; Cloud Messaging 的伺服器金鑰</p>\n</blockquote>\n</li>\n<li>傳送格式 - 放在 body payload data Content-Type＝application/json  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"to\"</span>: <span class=\"string\">\"/topics/news\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"notification\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Breaking News\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"body\"</span>: <span class=\"string\">\"New news story available.\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"story_id\"</span>: <span class=\"string\">\"story_12345\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>to - 要傳遞訊息到哪<ul>\n<li>個人- 每個裝置註冊時會有<code>裝置的token</code>，可用來傳遞訊息</li>\n<li>topic - 主題式群體傳送</li>\n</ul>\n</li>\n<li>notification - 通知<ul>\n<li>用這個傳送，裝置會自動顯示 notification，不會用自定 notification 的格式</li>\n<li>格式固定 title &amp; body</li>\n</ul>\n</li>\n<li>data - 自定資料格式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新版 HTTP v1<ul>\n<li>url   <blockquote>\n<p>POST <a href=\"https://fcm.googleapis.com/v1/projects/[project-name]/messages:send\" target=\"_blank\" rel=\"noopener\">https://fcm.googleapis.com/v1/projects/[project-name]/messages:send</a></p>\n</blockquote>\n</li>\n<li>token - 放在 header<blockquote>\n<p>Authorization: Bearer &lt;valid Oauth 2.0 token&gt;</p>\n<blockquote>\n<p>token 要額外申請</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><ul>\n<li>關於 NotRegistered<ul>\n<li>原因:<ol>\n<li>註冊好的 registerID 到期</li>\n</ol>\n</li>\n<li>解析發生次類狀況的原因:<ol>\n<li>APP 刪除</li>\n<li>清過 APP 資料</li>\n<li>token 到期(網路說是4個月)</li>\n<li>App 自己刪除 Instance ID<blockquote>\n<p>P.S. 會有用 Http protocol reference 去執行推送</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>P.S. 也可以用 FCM console  <a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener\">https://console.firebase.google.com/</a> 去做設定</p>\n</blockquote>\n"},{"title":"android-lifecycle","date":"2020-04-29T16:03:06.000Z","_content":"## Android 的 APP 生命週期(life cycle)\n* App 整體是由一個或多個的 Activity ，所組成的\n\t* 最根本是一個 ***Task**\n\t* 裡面排序這個需要用到的  **Activity**\n    * 假如 Activity 沒有設定 singleTask，同個 Activity 有可能會有多個\n* Activity 代表的是一個畫面的活動，會有開始、結束，整個循環就是生命週期\n    * 假如想要增加些指令在某個生命週期階段，必須要 @Override Activity 的生命週期方法\n        1. 資源分配\n            * onCreate() -建立資訊\n            > 開始建立程式， 通常程式都會在此撰寫\n            * onDestroy() - 釋放資源\n            > 結束 Activity\n        2. 可見 與 不可見\n            * onStart() - 可見\n            > 建立後、還未顯示\n            * onStop() - 不可見\n            > 畫面準備消失，接續 onPause()\t\t\t\n            * onRestart() - 可見\n            >  還未 onDestroy() ，且從別的 Activity 切回此 Activity\n        3. 螢幕控制權\n            * onResume() - 可控\n            >  當從 onPause 切回來時，所啟動的\n            * onPause() - 不可控\n            >  有其他的 Activity 開啟 或要結束應用程式 \n\n    * Activity 狀態\n        1. Active\n            1. 當 App 啟動時，顯示在畫面時，所處的狀態\n            2. Adnroid 本身只會有一個 Activity在當前執行，如有其他的 Activity則會在背景待命\n            \n        2. Paused\n            1. 畫面按下時、退到背景前，所處的狀態\n            2. 只要畫面不是當下的 Activity 都會歸類到這個狀態\n                EX: \n                    Alert、Toast\n                這些不屬於畫面的東西，當下的 Activity 就會退到 Paused\n        3. Stopped\n            已不在畫面上的時候\n        4. Dead\n            1. 尚未被啟用 or 被手動停止 or 被系統回收\n* 一個 app 就是一個 process ，一個 process 會存有 多個 Activity\n* Android 記憶體不足時，系統回收順序\n    1. 非系統的 Receiver \n    2. 非激活狀態的(Stopped)， \n        * Activity\n        * Service\n        * Intent \n        * Receiver\n    3. service 服務\n    4. 關閉背景執行的 Activity\n    5. 當下激活的 Activity","source":"android-lifecycle/index.md","raw":"---\ntitle: android-lifecycle\ndate: 2020-04-30 00:03:06\n---\n## Android 的 APP 生命週期(life cycle)\n* App 整體是由一個或多個的 Activity ，所組成的\n\t* 最根本是一個 ***Task**\n\t* 裡面排序這個需要用到的  **Activity**\n    * 假如 Activity 沒有設定 singleTask，同個 Activity 有可能會有多個\n* Activity 代表的是一個畫面的活動，會有開始、結束，整個循環就是生命週期\n    * 假如想要增加些指令在某個生命週期階段，必須要 @Override Activity 的生命週期方法\n        1. 資源分配\n            * onCreate() -建立資訊\n            > 開始建立程式， 通常程式都會在此撰寫\n            * onDestroy() - 釋放資源\n            > 結束 Activity\n        2. 可見 與 不可見\n            * onStart() - 可見\n            > 建立後、還未顯示\n            * onStop() - 不可見\n            > 畫面準備消失，接續 onPause()\t\t\t\n            * onRestart() - 可見\n            >  還未 onDestroy() ，且從別的 Activity 切回此 Activity\n        3. 螢幕控制權\n            * onResume() - 可控\n            >  當從 onPause 切回來時，所啟動的\n            * onPause() - 不可控\n            >  有其他的 Activity 開啟 或要結束應用程式 \n\n    * Activity 狀態\n        1. Active\n            1. 當 App 啟動時，顯示在畫面時，所處的狀態\n            2. Adnroid 本身只會有一個 Activity在當前執行，如有其他的 Activity則會在背景待命\n            \n        2. Paused\n            1. 畫面按下時、退到背景前，所處的狀態\n            2. 只要畫面不是當下的 Activity 都會歸類到這個狀態\n                EX: \n                    Alert、Toast\n                這些不屬於畫面的東西，當下的 Activity 就會退到 Paused\n        3. Stopped\n            已不在畫面上的時候\n        4. Dead\n            1. 尚未被啟用 or 被手動停止 or 被系統回收\n* 一個 app 就是一個 process ，一個 process 會存有 多個 Activity\n* Android 記憶體不足時，系統回收順序\n    1. 非系統的 Receiver \n    2. 非激活狀態的(Stopped)， \n        * Activity\n        * Service\n        * Intent \n        * Receiver\n    3. service 服務\n    4. 關閉背景執行的 Activity\n    5. 當下激活的 Activity","updated":"2020-04-29T16:18:57.247Z","path":"android-lifecycle/index.html","comments":1,"layout":"page","_id":"ckuy1kd8e00035ojt3h4x6150","content":"<h2 id=\"Android-的-APP-生命週期-life-cycle\"><a href=\"#Android-的-APP-生命週期-life-cycle\" class=\"headerlink\" title=\"Android 的 APP 生命週期(life cycle)\"></a>Android 的 APP 生命週期(life cycle)</h2><ul>\n<li><p>App 整體是由一個或多個的 Activity ，所組成的</p>\n<ul>\n<li>最根本是一個 <strong>*Task</strong></li>\n<li>裡面排序這個需要用到的  <strong>Activity</strong></li>\n<li>假如 Activity 沒有設定 singleTask，同個 Activity 有可能會有多個</li>\n</ul>\n</li>\n<li><p>Activity 代表的是一個畫面的活動，會有開始、結束，整個循環就是生命週期</p>\n<ul>\n<li><p>假如想要增加些指令在某個生命週期階段，必須要 @Override Activity 的生命週期方法</p>\n<ol>\n<li>資源分配<ul>\n<li>onCreate() -建立資訊<blockquote>\n<p>開始建立程式， 通常程式都會在此撰寫</p>\n</blockquote>\n</li>\n<li>onDestroy() - 釋放資源<blockquote>\n<p>結束 Activity</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>可見 與 不可見<ul>\n<li>onStart() - 可見<blockquote>\n<p>建立後、還未顯示</p>\n</blockquote>\n</li>\n<li>onStop() - 不可見<blockquote>\n<p>畫面準備消失，接續 onPause()            </p>\n</blockquote>\n</li>\n<li>onRestart() - 可見<blockquote>\n<p> 還未 onDestroy() ，且從別的 Activity 切回此 Activity</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>螢幕控制權<ul>\n<li>onResume() - 可控<blockquote>\n<p> 當從 onPause 切回來時，所啟動的</p>\n</blockquote>\n</li>\n<li>onPause() - 不可控<blockquote>\n<p> 有其他的 Activity 開啟 或要結束應用程式 </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Activity 狀態</p>\n<ol>\n<li><p>Active</p>\n<ol>\n<li>當 App 啟動時，顯示在畫面時，所處的狀態</li>\n<li>Adnroid 本身只會有一個 Activity在當前執行，如有其他的 Activity則會在背景待命</li>\n</ol>\n</li>\n<li><p>Paused</p>\n<ol>\n<li>畫面按下時、退到背景前，所處的狀態</li>\n<li>只要畫面不是當下的 Activity 都會歸類到這個狀態<br> EX: <pre><code>Alert、Toast</code></pre> 這些不屬於畫面的東西，當下的 Activity 就會退到 Paused</li>\n</ol>\n</li>\n<li><p>Stopped<br> 已不在畫面上的時候</p>\n</li>\n<li><p>Dead</p>\n<ol>\n<li>尚未被啟用 or 被手動停止 or 被系統回收</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>一個 app 就是一個 process ，一個 process 會存有 多個 Activity</p>\n</li>\n<li><p>Android 記憶體不足時，系統回收順序</p>\n<ol>\n<li>非系統的 Receiver </li>\n<li>非激活狀態的(Stopped)， <ul>\n<li>Activity</li>\n<li>Service</li>\n<li>Intent </li>\n<li>Receiver</li>\n</ul>\n</li>\n<li>service 服務</li>\n<li>關閉背景執行的 Activity</li>\n<li>當下激活的 Activity</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android-的-APP-生命週期-life-cycle\"><a href=\"#Android-的-APP-生命週期-life-cycle\" class=\"headerlink\" title=\"Android 的 APP 生命週期(life cycle)\"></a>Android 的 APP 生命週期(life cycle)</h2><ul>\n<li><p>App 整體是由一個或多個的 Activity ，所組成的</p>\n<ul>\n<li>最根本是一個 <strong>*Task</strong></li>\n<li>裡面排序這個需要用到的  <strong>Activity</strong></li>\n<li>假如 Activity 沒有設定 singleTask，同個 Activity 有可能會有多個</li>\n</ul>\n</li>\n<li><p>Activity 代表的是一個畫面的活動，會有開始、結束，整個循環就是生命週期</p>\n<ul>\n<li><p>假如想要增加些指令在某個生命週期階段，必須要 @Override Activity 的生命週期方法</p>\n<ol>\n<li>資源分配<ul>\n<li>onCreate() -建立資訊<blockquote>\n<p>開始建立程式， 通常程式都會在此撰寫</p>\n</blockquote>\n</li>\n<li>onDestroy() - 釋放資源<blockquote>\n<p>結束 Activity</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>可見 與 不可見<ul>\n<li>onStart() - 可見<blockquote>\n<p>建立後、還未顯示</p>\n</blockquote>\n</li>\n<li>onStop() - 不可見<blockquote>\n<p>畫面準備消失，接續 onPause()            </p>\n</blockquote>\n</li>\n<li>onRestart() - 可見<blockquote>\n<p> 還未 onDestroy() ，且從別的 Activity 切回此 Activity</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>螢幕控制權<ul>\n<li>onResume() - 可控<blockquote>\n<p> 當從 onPause 切回來時，所啟動的</p>\n</blockquote>\n</li>\n<li>onPause() - 不可控<blockquote>\n<p> 有其他的 Activity 開啟 或要結束應用程式 </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Activity 狀態</p>\n<ol>\n<li><p>Active</p>\n<ol>\n<li>當 App 啟動時，顯示在畫面時，所處的狀態</li>\n<li>Adnroid 本身只會有一個 Activity在當前執行，如有其他的 Activity則會在背景待命</li>\n</ol>\n</li>\n<li><p>Paused</p>\n<ol>\n<li>畫面按下時、退到背景前，所處的狀態</li>\n<li>只要畫面不是當下的 Activity 都會歸類到這個狀態<br> EX: <pre><code>Alert、Toast</code></pre> 這些不屬於畫面的東西，當下的 Activity 就會退到 Paused</li>\n</ol>\n</li>\n<li><p>Stopped<br> 已不在畫面上的時候</p>\n</li>\n<li><p>Dead</p>\n<ol>\n<li>尚未被啟用 or 被手動停止 or 被系統回收</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>一個 app 就是一個 process ，一個 process 會存有 多個 Activity</p>\n</li>\n<li><p>Android 記憶體不足時，系統回收順序</p>\n<ol>\n<li>非系統的 Receiver </li>\n<li>非激活狀態的(Stopped)， <ul>\n<li>Activity</li>\n<li>Service</li>\n<li>Intent </li>\n<li>Receiver</li>\n</ul>\n</li>\n<li>service 服務</li>\n<li>關閉背景執行的 Activity</li>\n<li>當下激活的 Activity</li>\n</ol>\n</li>\n</ul>\n"},{"title":"android-layout","date":"2020-04-29T15:21:34.000Z","_content":"## Layout\n### LinearLayout:\n* 流水型的排版，分為 `horizontal(垂直)` or `vertical(水平)`\n    * horizontal:\n        預設元件皆往左對齊，並由上至下排版堆疊\n    * vertical:\n        預設元件皆往上對齊，並由左至右排版堆疊\n### RelativeLayout (Legacy):\n* 以指定原件為基準點，來進行排版\n* 如未有指定，則以父元件左上角為定位點\n* 分為 `靠齊(toXXXOf)`、`對齊(alignXXX)`\n    * 靠齊(toXXXOf):\n        * 顯示方向以指定元件邊(上、下、左、右)為基準點，顯示在指定邊的旁邊\n            * layout_above 上\n            * layout_below 下\n            * layout_toLeftOf 左       \n    * 對齊(alignXXX):\n        * 指定邊界方向不得變換(上、下、左、右)\n        * layout_alignTop 上\n        * layout_alignBottom 下\n        * layout_alignLeft 左\n        * layout_alignEight 右\n    * layout_toRightOf 右\n```xml\n<RelativeLayout\n    android:layout_width=\"409dp\"\n    android:layout_height=\"458dp\"\n    tools:layout_editor_absoluteX=\"1dp\"\n    tools:layout_editor_absoluteY=\"272dp\">\n    <EditText\n        android:id=\"@+id/txtName2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"40dp\"\n\n        android:text=\"txtName2\" />\n\n    <EditText\n        android:id=\"@+id/xxx\"\n        android:layout_below=\"@id/txtName2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"40dp\"\n        android:text=\"xxx\" />\n\n    <EditText\n        android:id=\"@+id/yyy\"\n        android:layout_width=\"173dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignBottom=\"@+id/xxx\"\n        android:layout_marginLeft=\"-2dp\"\n        android:layout_marginBottom=\"-116dp\"\n        android:text=\"yyy\" />\n    </RelativeLayout>\n```\n### ConstraintLayout:\n* 約束布局，算是 RelativeLayout的進階版\n* 讓XML Code 扁平化，不會要一直塞不同的 Layout來達成畫面\n* 任何元件都是可以被依附的對象，可以同時依附不同的元件\n    * 每邊都會有一個依附點，包括 BaseLine(內容顯示底線)\n    * 每個元件至少要依附 水平、垂直各一點，約束才算成立\n    * 跟依附的元件距離是以 Margin 來做定義的\n    * 假如依附對象是父類別，並切有兩個相對的依附點(即:上、下 or 左、右)，依附距離各距離50%長度\n        * 想改變長度可以設定 Margin or 調整比例 \n            * layout_constraintHorizontal_bias:\n            > 左右比例:以 0 - 1 (數值為小數位)，由左至右\n            * layout_constraintVertical_bias\n            > 上下比例:以 0 - 1 (數值為小數位)，由上至下\n            * 可調整非 Margin 設定的區域\n    * 如果依附元件消失，可預設 layout_goneMarginXXX 來取代消失的元件\n* 有關參數都是以 app:layout_constraint... 為開頭\n* margin 預設是6dp\n* layout_goneMarginXXX，用來取代消失的依附元件，讓元件本身的位置不至於跑掉\n* 長度設定有 any size 、 wrap_content 、  match_constraint\n    * any size:\n    > 自訂義長度\n    * wrap_content:\n    > 根據自身內容設定長度\n    * match_constraint:\n    > 根據被依附的原件來設定長度、須相對兩點都有設定(即:上、下 or 左、右)，否則無用\n    >>PS.  0dp  = match_constraint\n* android.support.constraint.Guideline\n    * 建立一個虛擬的參考線，不會出現在實際的畫面上，僅供依附\n    * 分為 Horizontal 、 Vertical，\n        * android:orientation:\"XXX\"來設定方向\n        * app:layout_constraintGuide_percent 來設定位置  0 - 1 (數值為小數位)\n        * Horizontal:\n            橫向參考線\n        * Vertical:\n            垂直參考線\n\n* android.support.constraint.Group\n    * 跟 Guideline 很像 ，不過它建立的是一個容器，用來給元件做依附用的\n### DrawerLayout:\n* 會提供一個抽屜式的選單列表\n* 一定會是在layout的最外層\n* 新增之後，用手勢向右邊滑動可以打開選單\n* 需要用按鈕打開需要另外設置 **ActionBarDrawerToggle** 來提供選單開關\n    * 參數:\n        * Activity\n            當前 Activity\n        * DrawerLayout\n            要綁定的 DrawerLayout\n        * openDrawerContentDescRes\n            打開字串，必須寫在 **string.xml** 裡\n        * closeDrawerContentDescRes\n            關閉字串，必須寫在 **string.xml**  裡\n    ```java\n    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(\n                MainActivity.this,dlMenu,tl,R.string.drawer_open,R.string.drawer_close\n        );\n    DrawerLayout.addDrawerListener(toggle);\n    toggle.syncState();//讓左上角的按鈕跟 Drawerlayout同步\n    //會有一個 \"三\"的按鈕顯示在左上角\n    ```\n        \n* setNavigationItemSelectedListener \n    * 設定 drawerlayout 選擇事件\n        * 實作 new NavigationView.OnNavigationItemSelectedListener\n        * Override onNavigationItemSelected(@NonNull MenuItem menuItem)\n","source":"android-layout/index.md","raw":"---\ntitle: android-layout\ndate: 2020-04-29 23:21:34\n---\n## Layout\n### LinearLayout:\n* 流水型的排版，分為 `horizontal(垂直)` or `vertical(水平)`\n    * horizontal:\n        預設元件皆往左對齊，並由上至下排版堆疊\n    * vertical:\n        預設元件皆往上對齊，並由左至右排版堆疊\n### RelativeLayout (Legacy):\n* 以指定原件為基準點，來進行排版\n* 如未有指定，則以父元件左上角為定位點\n* 分為 `靠齊(toXXXOf)`、`對齊(alignXXX)`\n    * 靠齊(toXXXOf):\n        * 顯示方向以指定元件邊(上、下、左、右)為基準點，顯示在指定邊的旁邊\n            * layout_above 上\n            * layout_below 下\n            * layout_toLeftOf 左       \n    * 對齊(alignXXX):\n        * 指定邊界方向不得變換(上、下、左、右)\n        * layout_alignTop 上\n        * layout_alignBottom 下\n        * layout_alignLeft 左\n        * layout_alignEight 右\n    * layout_toRightOf 右\n```xml\n<RelativeLayout\n    android:layout_width=\"409dp\"\n    android:layout_height=\"458dp\"\n    tools:layout_editor_absoluteX=\"1dp\"\n    tools:layout_editor_absoluteY=\"272dp\">\n    <EditText\n        android:id=\"@+id/txtName2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"40dp\"\n\n        android:text=\"txtName2\" />\n\n    <EditText\n        android:id=\"@+id/xxx\"\n        android:layout_below=\"@id/txtName2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"40dp\"\n        android:text=\"xxx\" />\n\n    <EditText\n        android:id=\"@+id/yyy\"\n        android:layout_width=\"173dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignBottom=\"@+id/xxx\"\n        android:layout_marginLeft=\"-2dp\"\n        android:layout_marginBottom=\"-116dp\"\n        android:text=\"yyy\" />\n    </RelativeLayout>\n```\n### ConstraintLayout:\n* 約束布局，算是 RelativeLayout的進階版\n* 讓XML Code 扁平化，不會要一直塞不同的 Layout來達成畫面\n* 任何元件都是可以被依附的對象，可以同時依附不同的元件\n    * 每邊都會有一個依附點，包括 BaseLine(內容顯示底線)\n    * 每個元件至少要依附 水平、垂直各一點，約束才算成立\n    * 跟依附的元件距離是以 Margin 來做定義的\n    * 假如依附對象是父類別，並切有兩個相對的依附點(即:上、下 or 左、右)，依附距離各距離50%長度\n        * 想改變長度可以設定 Margin or 調整比例 \n            * layout_constraintHorizontal_bias:\n            > 左右比例:以 0 - 1 (數值為小數位)，由左至右\n            * layout_constraintVertical_bias\n            > 上下比例:以 0 - 1 (數值為小數位)，由上至下\n            * 可調整非 Margin 設定的區域\n    * 如果依附元件消失，可預設 layout_goneMarginXXX 來取代消失的元件\n* 有關參數都是以 app:layout_constraint... 為開頭\n* margin 預設是6dp\n* layout_goneMarginXXX，用來取代消失的依附元件，讓元件本身的位置不至於跑掉\n* 長度設定有 any size 、 wrap_content 、  match_constraint\n    * any size:\n    > 自訂義長度\n    * wrap_content:\n    > 根據自身內容設定長度\n    * match_constraint:\n    > 根據被依附的原件來設定長度、須相對兩點都有設定(即:上、下 or 左、右)，否則無用\n    >>PS.  0dp  = match_constraint\n* android.support.constraint.Guideline\n    * 建立一個虛擬的參考線，不會出現在實際的畫面上，僅供依附\n    * 分為 Horizontal 、 Vertical，\n        * android:orientation:\"XXX\"來設定方向\n        * app:layout_constraintGuide_percent 來設定位置  0 - 1 (數值為小數位)\n        * Horizontal:\n            橫向參考線\n        * Vertical:\n            垂直參考線\n\n* android.support.constraint.Group\n    * 跟 Guideline 很像 ，不過它建立的是一個容器，用來給元件做依附用的\n### DrawerLayout:\n* 會提供一個抽屜式的選單列表\n* 一定會是在layout的最外層\n* 新增之後，用手勢向右邊滑動可以打開選單\n* 需要用按鈕打開需要另外設置 **ActionBarDrawerToggle** 來提供選單開關\n    * 參數:\n        * Activity\n            當前 Activity\n        * DrawerLayout\n            要綁定的 DrawerLayout\n        * openDrawerContentDescRes\n            打開字串，必須寫在 **string.xml** 裡\n        * closeDrawerContentDescRes\n            關閉字串，必須寫在 **string.xml**  裡\n    ```java\n    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(\n                MainActivity.this,dlMenu,tl,R.string.drawer_open,R.string.drawer_close\n        );\n    DrawerLayout.addDrawerListener(toggle);\n    toggle.syncState();//讓左上角的按鈕跟 Drawerlayout同步\n    //會有一個 \"三\"的按鈕顯示在左上角\n    ```\n        \n* setNavigationItemSelectedListener \n    * 設定 drawerlayout 選擇事件\n        * 實作 new NavigationView.OnNavigationItemSelectedListener\n        * Override onNavigationItemSelected(@NonNull MenuItem menuItem)\n","updated":"2020-04-29T15:55:04.860Z","path":"android-layout/index.html","comments":1,"layout":"page","_id":"ckuy1kd8j00075ojt8k0x3e7q","content":"<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout:\"></a>LinearLayout:</h3><ul>\n<li><p>流水型的排版，分為 <code>horizontal(垂直)</code> or <code>vertical(水平)</code></p>\n<ul>\n<li>horizontal:<br>  預設元件皆往左對齊，並由上至下排版堆疊</li>\n<li>vertical:<br>  預設元件皆往上對齊，並由左至右排版堆疊<h3 id=\"RelativeLayout-Legacy\"><a href=\"#RelativeLayout-Legacy\" class=\"headerlink\" title=\"RelativeLayout (Legacy):\"></a>RelativeLayout (Legacy):</h3></li>\n</ul>\n</li>\n<li><p>以指定原件為基準點，來進行排版</p>\n</li>\n<li><p>如未有指定，則以父元件左上角為定位點</p>\n</li>\n<li><p>分為 <code>靠齊(toXXXOf)</code>、<code>對齊(alignXXX)</code></p>\n<ul>\n<li>靠齊(toXXXOf):<ul>\n<li>顯示方向以指定元件邊(上、下、左、右)為基準點，顯示在指定邊的旁邊<ul>\n<li>layout_above 上</li>\n<li>layout_below 下</li>\n<li>layout_toLeftOf 左       </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>對齊(alignXXX):<ul>\n<li>指定邊界方向不得變換(上、下、左、右)</li>\n<li>layout_alignTop 上</li>\n<li>layout_alignBottom 下</li>\n<li>layout_alignLeft 左</li>\n<li>layout_alignEight 右</li>\n</ul>\n</li>\n<li>layout_toRightOf 右<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"409dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"458dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout_editor_absoluteX</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"272dp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/txtName2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"txtName2\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/xxx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/txtName2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/yyy\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"173dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignBottom</span>=<span class=\"string\">\"@+id/xxx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-2dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"-116dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"yyy\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ConstraintLayout\"><a href=\"#ConstraintLayout\" class=\"headerlink\" title=\"ConstraintLayout:\"></a>ConstraintLayout:</h3></li>\n</ul>\n</li>\n<li><p>約束布局，算是 RelativeLayout的進階版</p>\n</li>\n<li><p>讓XML Code 扁平化，不會要一直塞不同的 Layout來達成畫面</p>\n</li>\n<li><p>任何元件都是可以被依附的對象，可以同時依附不同的元件</p>\n<ul>\n<li>每邊都會有一個依附點，包括 BaseLine(內容顯示底線)</li>\n<li>每個元件至少要依附 水平、垂直各一點，約束才算成立</li>\n<li>跟依附的元件距離是以 Margin 來做定義的</li>\n<li>假如依附對象是父類別，並切有兩個相對的依附點(即:上、下 or 左、右)，依附距離各距離50%長度<ul>\n<li>想改變長度可以設定 Margin or 調整比例 <ul>\n<li>layout_constraintHorizontal_bias:<blockquote>\n<p>左右比例:以 0 - 1 (數值為小數位)，由左至右</p>\n</blockquote>\n</li>\n<li>layout_constraintVertical_bias<blockquote>\n<p>上下比例:以 0 - 1 (數值為小數位)，由上至下</p>\n</blockquote>\n</li>\n<li>可調整非 Margin 設定的區域</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如果依附元件消失，可預設 layout_goneMarginXXX 來取代消失的元件</li>\n</ul>\n</li>\n<li><p>有關參數都是以 app:layout_constraint… 為開頭</p>\n</li>\n<li><p>margin 預設是6dp</p>\n</li>\n<li><p>layout_goneMarginXXX，用來取代消失的依附元件，讓元件本身的位置不至於跑掉</p>\n</li>\n<li><p>長度設定有 any size 、 wrap_content 、  match_constraint</p>\n<ul>\n<li>any size:<blockquote>\n<p>自訂義長度</p>\n</blockquote>\n</li>\n<li>wrap_content:<blockquote>\n<p>根據自身內容設定長度</p>\n</blockquote>\n</li>\n<li>match_constraint:<blockquote>\n<p>根據被依附的原件來設定長度、須相對兩點都有設定(即:上、下 or 左、右)，否則無用</p>\n<blockquote>\n<p>PS.  0dp  = match_constraint</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>android.support.constraint.Guideline</p>\n<ul>\n<li>建立一個虛擬的參考線，不會出現在實際的畫面上，僅供依附</li>\n<li>分為 Horizontal 、 Vertical，<ul>\n<li>android:orientation:”XXX”來設定方向</li>\n<li>app:layout_constraintGuide_percent 來設定位置  0 - 1 (數值為小數位)</li>\n<li>Horizontal:<br>  橫向參考線</li>\n<li>Vertical:<br>  垂直參考線</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>android.support.constraint.Group</p>\n<ul>\n<li>跟 Guideline 很像 ，不過它建立的是一個容器，用來給元件做依附用的<h3 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout:\"></a>DrawerLayout:</h3></li>\n</ul>\n</li>\n<li><p>會提供一個抽屜式的選單列表</p>\n</li>\n<li><p>一定會是在layout的最外層</p>\n</li>\n<li><p>新增之後，用手勢向右邊滑動可以打開選單</p>\n</li>\n<li><p>需要用按鈕打開需要另外設置 <strong>ActionBarDrawerToggle</strong> 來提供選單開關</p>\n<ul>\n<li>參數:<ul>\n<li>Activity<br>  當前 Activity</li>\n<li>DrawerLayout<br>  要綁定的 DrawerLayout</li>\n<li>openDrawerContentDescRes<br>  打開字串，必須寫在 <strong>string.xml</strong> 裡</li>\n<li>closeDrawerContentDescRes<br>  關閉字串，必須寫在 <strong>string.xml</strong>  裡<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActionBarDrawerToggle toggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(</span><br><span class=\"line\">            MainActivity.<span class=\"keyword\">this</span>,dlMenu,tl,R.string.drawer_open,R.string.drawer_close</span><br><span class=\"line\">    );</span><br><span class=\"line\">DrawerLayout.addDrawerListener(toggle);</span><br><span class=\"line\">toggle.syncState();<span class=\"comment\">//讓左上角的按鈕跟 Drawerlayout同步</span></span><br><span class=\"line\"><span class=\"comment\">//會有一個 \"三\"的按鈕顯示在左上角</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>setNavigationItemSelectedListener </p>\n<ul>\n<li>設定 drawerlayout 選擇事件<ul>\n<li>實作 new NavigationView.OnNavigationItemSelectedListener</li>\n<li>Override onNavigationItemSelected(@NonNull MenuItem menuItem)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout:\"></a>LinearLayout:</h3><ul>\n<li><p>流水型的排版，分為 <code>horizontal(垂直)</code> or <code>vertical(水平)</code></p>\n<ul>\n<li>horizontal:<br>  預設元件皆往左對齊，並由上至下排版堆疊</li>\n<li>vertical:<br>  預設元件皆往上對齊，並由左至右排版堆疊<h3 id=\"RelativeLayout-Legacy\"><a href=\"#RelativeLayout-Legacy\" class=\"headerlink\" title=\"RelativeLayout (Legacy):\"></a>RelativeLayout (Legacy):</h3></li>\n</ul>\n</li>\n<li><p>以指定原件為基準點，來進行排版</p>\n</li>\n<li><p>如未有指定，則以父元件左上角為定位點</p>\n</li>\n<li><p>分為 <code>靠齊(toXXXOf)</code>、<code>對齊(alignXXX)</code></p>\n<ul>\n<li>靠齊(toXXXOf):<ul>\n<li>顯示方向以指定元件邊(上、下、左、右)為基準點，顯示在指定邊的旁邊<ul>\n<li>layout_above 上</li>\n<li>layout_below 下</li>\n<li>layout_toLeftOf 左       </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>對齊(alignXXX):<ul>\n<li>指定邊界方向不得變換(上、下、左、右)</li>\n<li>layout_alignTop 上</li>\n<li>layout_alignBottom 下</li>\n<li>layout_alignLeft 左</li>\n<li>layout_alignEight 右</li>\n</ul>\n</li>\n<li>layout_toRightOf 右<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"409dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"458dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout_editor_absoluteX</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"272dp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/txtName2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"txtName2\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/xxx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/txtName2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/yyy\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"173dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignBottom</span>=<span class=\"string\">\"@+id/xxx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-2dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"-116dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"yyy\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ConstraintLayout\"><a href=\"#ConstraintLayout\" class=\"headerlink\" title=\"ConstraintLayout:\"></a>ConstraintLayout:</h3></li>\n</ul>\n</li>\n<li><p>約束布局，算是 RelativeLayout的進階版</p>\n</li>\n<li><p>讓XML Code 扁平化，不會要一直塞不同的 Layout來達成畫面</p>\n</li>\n<li><p>任何元件都是可以被依附的對象，可以同時依附不同的元件</p>\n<ul>\n<li>每邊都會有一個依附點，包括 BaseLine(內容顯示底線)</li>\n<li>每個元件至少要依附 水平、垂直各一點，約束才算成立</li>\n<li>跟依附的元件距離是以 Margin 來做定義的</li>\n<li>假如依附對象是父類別，並切有兩個相對的依附點(即:上、下 or 左、右)，依附距離各距離50%長度<ul>\n<li>想改變長度可以設定 Margin or 調整比例 <ul>\n<li>layout_constraintHorizontal_bias:<blockquote>\n<p>左右比例:以 0 - 1 (數值為小數位)，由左至右</p>\n</blockquote>\n</li>\n<li>layout_constraintVertical_bias<blockquote>\n<p>上下比例:以 0 - 1 (數值為小數位)，由上至下</p>\n</blockquote>\n</li>\n<li>可調整非 Margin 設定的區域</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如果依附元件消失，可預設 layout_goneMarginXXX 來取代消失的元件</li>\n</ul>\n</li>\n<li><p>有關參數都是以 app:layout_constraint… 為開頭</p>\n</li>\n<li><p>margin 預設是6dp</p>\n</li>\n<li><p>layout_goneMarginXXX，用來取代消失的依附元件，讓元件本身的位置不至於跑掉</p>\n</li>\n<li><p>長度設定有 any size 、 wrap_content 、  match_constraint</p>\n<ul>\n<li>any size:<blockquote>\n<p>自訂義長度</p>\n</blockquote>\n</li>\n<li>wrap_content:<blockquote>\n<p>根據自身內容設定長度</p>\n</blockquote>\n</li>\n<li>match_constraint:<blockquote>\n<p>根據被依附的原件來設定長度、須相對兩點都有設定(即:上、下 or 左、右)，否則無用</p>\n<blockquote>\n<p>PS.  0dp  = match_constraint</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>android.support.constraint.Guideline</p>\n<ul>\n<li>建立一個虛擬的參考線，不會出現在實際的畫面上，僅供依附</li>\n<li>分為 Horizontal 、 Vertical，<ul>\n<li>android:orientation:”XXX”來設定方向</li>\n<li>app:layout_constraintGuide_percent 來設定位置  0 - 1 (數值為小數位)</li>\n<li>Horizontal:<br>  橫向參考線</li>\n<li>Vertical:<br>  垂直參考線</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>android.support.constraint.Group</p>\n<ul>\n<li>跟 Guideline 很像 ，不過它建立的是一個容器，用來給元件做依附用的<h3 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout:\"></a>DrawerLayout:</h3></li>\n</ul>\n</li>\n<li><p>會提供一個抽屜式的選單列表</p>\n</li>\n<li><p>一定會是在layout的最外層</p>\n</li>\n<li><p>新增之後，用手勢向右邊滑動可以打開選單</p>\n</li>\n<li><p>需要用按鈕打開需要另外設置 <strong>ActionBarDrawerToggle</strong> 來提供選單開關</p>\n<ul>\n<li>參數:<ul>\n<li>Activity<br>  當前 Activity</li>\n<li>DrawerLayout<br>  要綁定的 DrawerLayout</li>\n<li>openDrawerContentDescRes<br>  打開字串，必須寫在 <strong>string.xml</strong> 裡</li>\n<li>closeDrawerContentDescRes<br>  關閉字串，必須寫在 <strong>string.xml</strong>  裡<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActionBarDrawerToggle toggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(</span><br><span class=\"line\">            MainActivity.<span class=\"keyword\">this</span>,dlMenu,tl,R.string.drawer_open,R.string.drawer_close</span><br><span class=\"line\">    );</span><br><span class=\"line\">DrawerLayout.addDrawerListener(toggle);</span><br><span class=\"line\">toggle.syncState();<span class=\"comment\">//讓左上角的按鈕跟 Drawerlayout同步</span></span><br><span class=\"line\"><span class=\"comment\">//會有一個 \"三\"的按鈕顯示在左上角</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>setNavigationItemSelectedListener </p>\n<ul>\n<li>設定 drawerlayout 選擇事件<ul>\n<li>實作 new NavigationView.OnNavigationItemSelectedListener</li>\n<li>Override onNavigationItemSelected(@NonNull MenuItem menuItem)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"android-qlist","date":"2020-04-24T09:38:24.000Z","_content":"#### 什麼是 gradle-wrapper.properties\n為記錄目前 gradle 版本資訊\n\n\n---\n#### 什麼是  `build.gradle(project)`的 classpath\n**classpath**在 `build.gradle(project)`的  **dependencies**裡，\n表示此專案用的`gradle plugin 版本` <br>\n\n---\n\n#### Q. Error : Could not resolve all artifacts for configuration ':classpath'.\nA. 在 `build.gradle(project)`的  **dependencies > repositories**，找不到 classpath，所以要新增 `repository maven`\n```groovy\nbuildscript {\n    \n    repositories {\n        maven { url 'https://maven.aliyun.com/repository/jcenter' }//新增 repository\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        \n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n---\n#### Unknown host 'jcenter.bintray.com'\n\n**dependencies > repositories**，新增 `repository maven{ url 'https://maven.aliyun.com/repository/jcenter' }`\n\n---\n\n#### default activity not found\nFile > Invalidate Caches / Restart \n\n\n---\n\n#### Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.\n在 build.gradle(Project:xxx)的 repositories 裡的 `google()`一定要排第一個，否則會找不到\n\n---\n\n#### 關於 pendingIntent getActivity\n\n---\n#### 關於 BroadcastReceiver \n---","source":"android-qlist/index.md","raw":"---\ntitle: android-qlist\ndate: 2020-04-24 17:38:24\n---\n#### 什麼是 gradle-wrapper.properties\n為記錄目前 gradle 版本資訊\n\n\n---\n#### 什麼是  `build.gradle(project)`的 classpath\n**classpath**在 `build.gradle(project)`的  **dependencies**裡，\n表示此專案用的`gradle plugin 版本` <br>\n\n---\n\n#### Q. Error : Could not resolve all artifacts for configuration ':classpath'.\nA. 在 `build.gradle(project)`的  **dependencies > repositories**，找不到 classpath，所以要新增 `repository maven`\n```groovy\nbuildscript {\n    \n    repositories {\n        maven { url 'https://maven.aliyun.com/repository/jcenter' }//新增 repository\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        \n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n---\n#### Unknown host 'jcenter.bintray.com'\n\n**dependencies > repositories**，新增 `repository maven{ url 'https://maven.aliyun.com/repository/jcenter' }`\n\n---\n\n#### default activity not found\nFile > Invalidate Caches / Restart \n\n\n---\n\n#### Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.\n在 build.gradle(Project:xxx)的 repositories 裡的 `google()`一定要排第一個，否則會找不到\n\n---\n\n#### 關於 pendingIntent getActivity\n\n---\n#### 關於 BroadcastReceiver \n---","updated":"2020-04-30T19:25:12.032Z","path":"android-qlist/index.html","comments":1,"layout":"page","_id":"ckuy1kd8k00095ojt148rhpff","content":"<h4 id=\"什麼是-gradle-wrapper-properties\"><a href=\"#什麼是-gradle-wrapper-properties\" class=\"headerlink\" title=\"什麼是 gradle-wrapper.properties\"></a>什麼是 gradle-wrapper.properties</h4><p>為記錄目前 gradle 版本資訊</p>\n<hr>\n<h4 id=\"什麼是-build-gradle-project-的-classpath\"><a href=\"#什麼是-build-gradle-project-的-classpath\" class=\"headerlink\" title=\"什麼是  build.gradle(project)的 classpath\"></a>什麼是  <code>build.gradle(project)</code>的 classpath</h4><p><strong>classpath</strong>在 <code>build.gradle(project)</code>的  <strong>dependencies</strong>裡，<br>表示此專案用的<code>gradle plugin 版本</code> <br></p>\n<hr>\n<h4 id=\"Q-Error-Could-not-resolve-all-artifacts-for-configuration-‘-classpath’\"><a href=\"#Q-Error-Could-not-resolve-all-artifacts-for-configuration-‘-classpath’\" class=\"headerlink\" title=\"Q. Error : Could not resolve all artifacts for configuration ‘:classpath’.\"></a>Q. Error : Could not resolve all artifacts for configuration ‘:classpath’.</h4><p>A. 在 <code>build.gradle(project)</code>的  <strong>dependencies &gt; repositories</strong>，找不到 classpath，所以要新增 <code>repository maven</code></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://maven.aliyun.com/repository/jcenter'</span> &#125;<span class=\"comment\">//新增 repository</span></span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:3.2.1'</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Unknown-host-‘jcenter-bintray-com’\"><a href=\"#Unknown-host-‘jcenter-bintray-com’\" class=\"headerlink\" title=\"Unknown host ‘jcenter.bintray.com’\"></a>Unknown host ‘jcenter.bintray.com’</h4><p><strong>dependencies &gt; repositories</strong>，新增 <code>repository maven{ url &#39;https://maven.aliyun.com/repository/jcenter&#39; }</code></p>\n<hr>\n<h4 id=\"default-activity-not-found\"><a href=\"#default-activity-not-found\" class=\"headerlink\" title=\"default activity not found\"></a>default activity not found</h4><p>File &gt; Invalidate Caches / Restart </p>\n<hr>\n<h4 id=\"Q-Caused-by-org-gradle-internal-resolve-ModuleVersionNotFoundException-Could-not-find-com-google-gms-google-services-4-3-3\"><a href=\"#Q-Caused-by-org-gradle-internal-resolve-ModuleVersionNotFoundException-Could-not-find-com-google-gms-google-services-4-3-3\" class=\"headerlink\" title=\"Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.\"></a>Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.</h4><p>在 build.gradle(Project:xxx)的 repositories 裡的 <code>google()</code>一定要排第一個，否則會找不到</p>\n<hr>\n<h4 id=\"關於-pendingIntent-getActivity\"><a href=\"#關於-pendingIntent-getActivity\" class=\"headerlink\" title=\"關於 pendingIntent getActivity\"></a>關於 pendingIntent getActivity</h4><hr>\n<h4 id=\"關於-BroadcastReceiver\"><a href=\"#關於-BroadcastReceiver\" class=\"headerlink\" title=\"關於 BroadcastReceiver\"></a>關於 BroadcastReceiver</h4><hr>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什麼是-gradle-wrapper-properties\"><a href=\"#什麼是-gradle-wrapper-properties\" class=\"headerlink\" title=\"什麼是 gradle-wrapper.properties\"></a>什麼是 gradle-wrapper.properties</h4><p>為記錄目前 gradle 版本資訊</p>\n<hr>\n<h4 id=\"什麼是-build-gradle-project-的-classpath\"><a href=\"#什麼是-build-gradle-project-的-classpath\" class=\"headerlink\" title=\"什麼是  build.gradle(project)的 classpath\"></a>什麼是  <code>build.gradle(project)</code>的 classpath</h4><p><strong>classpath</strong>在 <code>build.gradle(project)</code>的  <strong>dependencies</strong>裡，<br>表示此專案用的<code>gradle plugin 版本</code> <br></p>\n<hr>\n<h4 id=\"Q-Error-Could-not-resolve-all-artifacts-for-configuration-‘-classpath’\"><a href=\"#Q-Error-Could-not-resolve-all-artifacts-for-configuration-‘-classpath’\" class=\"headerlink\" title=\"Q. Error : Could not resolve all artifacts for configuration ‘:classpath’.\"></a>Q. Error : Could not resolve all artifacts for configuration ‘:classpath’.</h4><p>A. 在 <code>build.gradle(project)</code>的  <strong>dependencies &gt; repositories</strong>，找不到 classpath，所以要新增 <code>repository maven</code></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://maven.aliyun.com/repository/jcenter'</span> &#125;<span class=\"comment\">//新增 repository</span></span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:3.2.1'</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Unknown-host-‘jcenter-bintray-com’\"><a href=\"#Unknown-host-‘jcenter-bintray-com’\" class=\"headerlink\" title=\"Unknown host ‘jcenter.bintray.com’\"></a>Unknown host ‘jcenter.bintray.com’</h4><p><strong>dependencies &gt; repositories</strong>，新增 <code>repository maven{ url &#39;https://maven.aliyun.com/repository/jcenter&#39; }</code></p>\n<hr>\n<h4 id=\"default-activity-not-found\"><a href=\"#default-activity-not-found\" class=\"headerlink\" title=\"default activity not found\"></a>default activity not found</h4><p>File &gt; Invalidate Caches / Restart </p>\n<hr>\n<h4 id=\"Q-Caused-by-org-gradle-internal-resolve-ModuleVersionNotFoundException-Could-not-find-com-google-gms-google-services-4-3-3\"><a href=\"#Q-Caused-by-org-gradle-internal-resolve-ModuleVersionNotFoundException-Could-not-find-com-google-gms-google-services-4-3-3\" class=\"headerlink\" title=\"Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.\"></a>Q. Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find com.google.gms:google-services:4.3.3.</h4><p>在 build.gradle(Project:xxx)的 repositories 裡的 <code>google()</code>一定要排第一個，否則會找不到</p>\n<hr>\n<h4 id=\"關於-pendingIntent-getActivity\"><a href=\"#關於-pendingIntent-getActivity\" class=\"headerlink\" title=\"關於 pendingIntent getActivity\"></a>關於 pendingIntent getActivity</h4><hr>\n<h4 id=\"關於-BroadcastReceiver\"><a href=\"#關於-BroadcastReceiver\" class=\"headerlink\" title=\"關於 BroadcastReceiver\"></a>關於 BroadcastReceiver</h4><hr>\n"},{"title":"分類","date":"2020-01-24T14:09:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2020-01-24 22:09:31\ntype: \"categories\"\n---\n","updated":"2020-01-24T16:06:43.268Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckuy1kd8n000d5ojt2tuobyt3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"create-react-app-note","date":"2020-10-14T08:01:47.000Z","_content":"# 使用 `create-react-app` 建立專案\n\n## 流程\n-  建立 `create-react-app` 專案\n-  安裝 `react-app-rewired` 修改專案設定\n-  安裝 `dotenv-cli` 根據不同環境設定環境變數檔\n-  設定 config-overrides.js\n    - webpack\n        - plugin\n        - rules loader\n    - devServer\n        - 設定 proxy\n    - paths\n    - jest(暫不需要)\n-  設定環境變數檔 **.env**\n    - 分類：\n        - .env.development\n        - .env.production\n        - .env\n- 修改 package.json\n    - scripts\n        - build:dev\n        - build:prodr\n## 建置\n> npx create-react-app [**project name**]\n\n## 環境變數\n\n## 安裝 react-app-rewired\n修改 `create-react-app` 建置專案的設定\n> npm install react-app-rewired --save-dev\n\n\n","source":"create-react-app-note/index.md","raw":"---\ntitle: create-react-app-note\ndate: 2020-10-14 16:01:47\n---\n# 使用 `create-react-app` 建立專案\n\n## 流程\n-  建立 `create-react-app` 專案\n-  安裝 `react-app-rewired` 修改專案設定\n-  安裝 `dotenv-cli` 根據不同環境設定環境變數檔\n-  設定 config-overrides.js\n    - webpack\n        - plugin\n        - rules loader\n    - devServer\n        - 設定 proxy\n    - paths\n    - jest(暫不需要)\n-  設定環境變數檔 **.env**\n    - 分類：\n        - .env.development\n        - .env.production\n        - .env\n- 修改 package.json\n    - scripts\n        - build:dev\n        - build:prodr\n## 建置\n> npx create-react-app [**project name**]\n\n## 環境變數\n\n## 安裝 react-app-rewired\n修改 `create-react-app` 建置專案的設定\n> npm install react-app-rewired --save-dev\n\n\n","updated":"2020-10-18T17:28:00.779Z","path":"create-react-app-note/index.html","comments":1,"layout":"page","_id":"ckuy1kd8q000f5ojtadua7njy","content":"<h1 id=\"使用-create-react-app-建立專案\"><a href=\"#使用-create-react-app-建立專案\" class=\"headerlink\" title=\"使用 create-react-app 建立專案\"></a>使用 <code>create-react-app</code> 建立專案</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>建立 <code>create-react-app</code> 專案</li>\n<li>安裝 <code>react-app-rewired</code> 修改專案設定</li>\n<li>安裝 <code>dotenv-cli</code> 根據不同環境設定環境變數檔</li>\n<li>設定 config-overrides.js<ul>\n<li>webpack<ul>\n<li>plugin</li>\n<li>rules loader</li>\n</ul>\n</li>\n<li>devServer<ul>\n<li>設定 proxy</li>\n</ul>\n</li>\n<li>paths</li>\n<li>jest(暫不需要)</li>\n</ul>\n</li>\n<li>設定環境變數檔 <strong>.env</strong><ul>\n<li>分類：<ul>\n<li>.env.development</li>\n<li>.env.production</li>\n<li>.env</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改 package.json<ul>\n<li>scripts<ul>\n<li>build:dev</li>\n<li>build:prodr<h2 id=\"建置\"><a href=\"#建置\" class=\"headerlink\" title=\"建置\"></a>建置</h2><blockquote>\n<p>npx create-react-app [<strong>project name</strong>]</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"環境變數\"><a href=\"#環境變數\" class=\"headerlink\" title=\"環境變數\"></a>環境變數</h2><h2 id=\"安裝-react-app-rewired\"><a href=\"#安裝-react-app-rewired\" class=\"headerlink\" title=\"安裝 react-app-rewired\"></a>安裝 react-app-rewired</h2><p>修改 <code>create-react-app</code> 建置專案的設定</p>\n<blockquote>\n<p>npm install react-app-rewired –save-dev</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用-create-react-app-建立專案\"><a href=\"#使用-create-react-app-建立專案\" class=\"headerlink\" title=\"使用 create-react-app 建立專案\"></a>使用 <code>create-react-app</code> 建立專案</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>建立 <code>create-react-app</code> 專案</li>\n<li>安裝 <code>react-app-rewired</code> 修改專案設定</li>\n<li>安裝 <code>dotenv-cli</code> 根據不同環境設定環境變數檔</li>\n<li>設定 config-overrides.js<ul>\n<li>webpack<ul>\n<li>plugin</li>\n<li>rules loader</li>\n</ul>\n</li>\n<li>devServer<ul>\n<li>設定 proxy</li>\n</ul>\n</li>\n<li>paths</li>\n<li>jest(暫不需要)</li>\n</ul>\n</li>\n<li>設定環境變數檔 <strong>.env</strong><ul>\n<li>分類：<ul>\n<li>.env.development</li>\n<li>.env.production</li>\n<li>.env</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改 package.json<ul>\n<li>scripts<ul>\n<li>build:dev</li>\n<li>build:prodr<h2 id=\"建置\"><a href=\"#建置\" class=\"headerlink\" title=\"建置\"></a>建置</h2><blockquote>\n<p>npx create-react-app [<strong>project name</strong>]</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"環境變數\"><a href=\"#環境變數\" class=\"headerlink\" title=\"環境變數\"></a>環境變數</h2><h2 id=\"安裝-react-app-rewired\"><a href=\"#安裝-react-app-rewired\" class=\"headerlink\" title=\"安裝 react-app-rewired\"></a>安裝 react-app-rewired</h2><p>修改 <code>create-react-app</code> 建置專案的設定</p>\n<blockquote>\n<p>npm install react-app-rewired –save-dev</p>\n</blockquote>\n"},{"title":"css-note/about-flex","date":"2021-04-21T06:22:27.000Z","_content":"\n# Flex\n## 簡介\n是一種 css 針對頁面排版的一種方法 ，  \n分為`外部容器(container)` & `內部元件(items)` 兩方面的設定\n\n###  外部容器 Container\n外部容器負責的是內部元件的排列方式以及方向 ，\n\n根據 flex  模型圖來看會有幾個參考點\n![flexModule](./assets/flexModule.png)\n分兩大類別：\n- main axis  \n根據 flex 方向來決定\n- cross axis  \n跟 `main axis` 為垂直的軸\n\n每個類別包含有：\n- start  \n此軸的啟始\n- end  \n此軸的結束\n- size  \n此軸的長度\n\n#### 相關設定： \n- flex-direction  \n設定 item 排列方向，並決定好上述的參考點，分別為：\n    - row  \n    橫向排列，以左至右\n    - column  \n    縱向排列，以上至下\n    - row-reverse  \n    橫向排列，以右至左\n    - column-reverse\n    縱向排列，以下至上\n- flex-wrap  \n設定內容物件是否需要換行，其相關設定為：\n    - nowarp  \n    預設，單行顯示\n    - wrap  \n    總長度超出設定寬度就換行\n    - wrap-reverse  \n    反轉排序\n- justify-content\n以 `main axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `main start` 對齊\n    - flex-end  \n    以 `main end` 對齊\n    - center  \n    以 `main axis`中間 對齊\n    - space-between  \n    平均分配 `main size` 空間， 第一個 ＆ 最後一個 item 對齊 start & end\n    - space-around  \n    平均分配 `main size` 空間\n- align-items  \n是以**單行**為單位處理，以 `cross axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `cross start` 對齊\n    - flex-end  \n    以 `cross end` 對齊\n    - center  \n    以 `cross axis`中間 對齊\n    - stretch\n    如 item 尚未設定長度，強制拉伸 item 至 `cross size` 同等長度\n    - baseline\n    以 item 的 baseline 為基準做對齊\n- align-content  \n是根據**全部內容**處理，以 `cross axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `cross start` 對齊\n    - flex-end  \n    以 `cross end` 對齊\n    - center  \n    以 `cross axis`中間 對齊\n    - stretch\n    如 item 尚未設定長度，強制拉伸 item 至 `cross size` 同等長度\n    - baseline\n    以 item 的 baseline 為基準做對齊\n    - space-between  \n    平均分配 `cross size` 空間，  第一個 ＆ 最後一個  item 對齊 start & end\n    - space-around  \n    平均分配 `cross size` 空間\n\n#### align-content vs align-items  \n\n###  內部元件 Items\n針對元件本身內部空間相關的設定\n\n#### 相關設定： \n- flex : [grow]  [shrink]   [basis] \n    - flex-grow  \n    在外部容器尚有空間時，依據數值擴展元件大小，0 為不啟用，皆以整數設定\n    - flex-shrink  \n    在外部容器空間不夠時，依據數值縮減元件大小，0 為不啟用，皆以整數設定\n    - flex-basis  \n    此元件基礎長度，可套用不同單位(px、%、em ...etc)\n- order  \n調整元件順序，數字越小越靠前\n- algin-self   \n單獨對元件設定，跟**align-items**一樣的設定","source":"css-note-about-flex/index.md","raw":"---\ntitle: css-note/about-flex\ndate: 2021-04-21 14:22:27\n---\n\n# Flex\n## 簡介\n是一種 css 針對頁面排版的一種方法 ，  \n分為`外部容器(container)` & `內部元件(items)` 兩方面的設定\n\n###  外部容器 Container\n外部容器負責的是內部元件的排列方式以及方向 ，\n\n根據 flex  模型圖來看會有幾個參考點\n![flexModule](./assets/flexModule.png)\n分兩大類別：\n- main axis  \n根據 flex 方向來決定\n- cross axis  \n跟 `main axis` 為垂直的軸\n\n每個類別包含有：\n- start  \n此軸的啟始\n- end  \n此軸的結束\n- size  \n此軸的長度\n\n#### 相關設定： \n- flex-direction  \n設定 item 排列方向，並決定好上述的參考點，分別為：\n    - row  \n    橫向排列，以左至右\n    - column  \n    縱向排列，以上至下\n    - row-reverse  \n    橫向排列，以右至左\n    - column-reverse\n    縱向排列，以下至上\n- flex-wrap  \n設定內容物件是否需要換行，其相關設定為：\n    - nowarp  \n    預設，單行顯示\n    - wrap  \n    總長度超出設定寬度就換行\n    - wrap-reverse  \n    反轉排序\n- justify-content\n以 `main axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `main start` 對齊\n    - flex-end  \n    以 `main end` 對齊\n    - center  \n    以 `main axis`中間 對齊\n    - space-between  \n    平均分配 `main size` 空間， 第一個 ＆ 最後一個 item 對齊 start & end\n    - space-around  \n    平均分配 `main size` 空間\n- align-items  \n是以**單行**為單位處理，以 `cross axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `cross start` 對齊\n    - flex-end  \n    以 `cross end` 對齊\n    - center  \n    以 `cross axis`中間 對齊\n    - stretch\n    如 item 尚未設定長度，強制拉伸 item 至 `cross size` 同等長度\n    - baseline\n    以 item 的 baseline 為基準做對齊\n- align-content  \n是根據**全部內容**處理，以 `cross axis` 為基準來對齊，分別為：\n    - flex-start  \n    以 `cross start` 對齊\n    - flex-end  \n    以 `cross end` 對齊\n    - center  \n    以 `cross axis`中間 對齊\n    - stretch\n    如 item 尚未設定長度，強制拉伸 item 至 `cross size` 同等長度\n    - baseline\n    以 item 的 baseline 為基準做對齊\n    - space-between  \n    平均分配 `cross size` 空間，  第一個 ＆ 最後一個  item 對齊 start & end\n    - space-around  \n    平均分配 `cross size` 空間\n\n#### align-content vs align-items  \n\n###  內部元件 Items\n針對元件本身內部空間相關的設定\n\n#### 相關設定： \n- flex : [grow]  [shrink]   [basis] \n    - flex-grow  \n    在外部容器尚有空間時，依據數值擴展元件大小，0 為不啟用，皆以整數設定\n    - flex-shrink  \n    在外部容器空間不夠時，依據數值縮減元件大小，0 為不啟用，皆以整數設定\n    - flex-basis  \n    此元件基礎長度，可套用不同單位(px、%、em ...etc)\n- order  \n調整元件順序，數字越小越靠前\n- algin-self   \n單獨對元件設定，跟**align-items**一樣的設定","updated":"2021-04-22T06:34:22.374Z","path":"css-note-about-flex/index.html","comments":1,"layout":"page","_id":"ckuy1kd8s000i5ojt7as69ko3","content":"<h1 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h1><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>是一種 css 針對頁面排版的一種方法 ，<br>分為<code>外部容器(container)</code> &amp; <code>內部元件(items)</code> 兩方面的設定</p>\n<h3 id=\"外部容器-Container\"><a href=\"#外部容器-Container\" class=\"headerlink\" title=\"外部容器 Container\"></a>外部容器 Container</h3><p>外部容器負責的是內部元件的排列方式以及方向 ，</p>\n<p>根據 flex  模型圖來看會有幾個參考點<br><img src=\"./assets/flexModule.png\" alt=\"flexModule\"><br>分兩大類別：</p>\n<ul>\n<li>main axis<br>根據 flex 方向來決定</li>\n<li>cross axis<br>跟 <code>main axis</code> 為垂直的軸</li>\n</ul>\n<p>每個類別包含有：</p>\n<ul>\n<li>start<br>此軸的啟始</li>\n<li>end<br>此軸的結束</li>\n<li>size<br>此軸的長度</li>\n</ul>\n<h4 id=\"相關設定：\"><a href=\"#相關設定：\" class=\"headerlink\" title=\"相關設定：\"></a>相關設定：</h4><ul>\n<li>flex-direction<br>設定 item 排列方向，並決定好上述的參考點，分別為：<ul>\n<li>row<br>橫向排列，以左至右</li>\n<li>column<br>縱向排列，以上至下</li>\n<li>row-reverse<br>橫向排列，以右至左</li>\n<li>column-reverse<br>縱向排列，以下至上</li>\n</ul>\n</li>\n<li>flex-wrap<br>設定內容物件是否需要換行，其相關設定為：<ul>\n<li>nowarp<br>預設，單行顯示</li>\n<li>wrap<br>總長度超出設定寬度就換行</li>\n<li>wrap-reverse<br>反轉排序</li>\n</ul>\n</li>\n<li>justify-content<br>以 <code>main axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>main start</code> 對齊</li>\n<li>flex-end<br>以 <code>main end</code> 對齊</li>\n<li>center<br>以 <code>main axis</code>中間 對齊</li>\n<li>space-between<br>平均分配 <code>main size</code> 空間， 第一個 ＆ 最後一個 item 對齊 start &amp; end</li>\n<li>space-around<br>平均分配 <code>main size</code> 空間</li>\n</ul>\n</li>\n<li>align-items<br>是以<strong>單行</strong>為單位處理，以 <code>cross axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>cross start</code> 對齊</li>\n<li>flex-end<br>以 <code>cross end</code> 對齊</li>\n<li>center<br>以 <code>cross axis</code>中間 對齊</li>\n<li>stretch<br>如 item 尚未設定長度，強制拉伸 item 至 <code>cross size</code> 同等長度</li>\n<li>baseline<br>以 item 的 baseline 為基準做對齊</li>\n</ul>\n</li>\n<li>align-content<br>是根據<strong>全部內容</strong>處理，以 <code>cross axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>cross start</code> 對齊</li>\n<li>flex-end<br>以 <code>cross end</code> 對齊</li>\n<li>center<br>以 <code>cross axis</code>中間 對齊</li>\n<li>stretch<br>如 item 尚未設定長度，強制拉伸 item 至 <code>cross size</code> 同等長度</li>\n<li>baseline<br>以 item 的 baseline 為基準做對齊</li>\n<li>space-between<br>平均分配 <code>cross size</code> 空間，  第一個 ＆ 最後一個  item 對齊 start &amp; end</li>\n<li>space-around<br>平均分配 <code>cross size</code> 空間</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"align-content-vs-align-items\"><a href=\"#align-content-vs-align-items\" class=\"headerlink\" title=\"align-content vs align-items\"></a>align-content vs align-items</h4><h3 id=\"內部元件-Items\"><a href=\"#內部元件-Items\" class=\"headerlink\" title=\"內部元件 Items\"></a>內部元件 Items</h3><p>針對元件本身內部空間相關的設定</p>\n<h4 id=\"相關設定：-1\"><a href=\"#相關設定：-1\" class=\"headerlink\" title=\"相關設定：\"></a>相關設定：</h4><ul>\n<li>flex : [grow]  [shrink]   [basis] <ul>\n<li>flex-grow<br>在外部容器尚有空間時，依據數值擴展元件大小，0 為不啟用，皆以整數設定</li>\n<li>flex-shrink<br>在外部容器空間不夠時，依據數值縮減元件大小，0 為不啟用，皆以整數設定</li>\n<li>flex-basis<br>此元件基礎長度，可套用不同單位(px、%、em …etc)</li>\n</ul>\n</li>\n<li>order<br>調整元件順序，數字越小越靠前</li>\n<li>algin-self<br>單獨對元件設定，跟<strong>align-items</strong>一樣的設定</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h1><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>是一種 css 針對頁面排版的一種方法 ，<br>分為<code>外部容器(container)</code> &amp; <code>內部元件(items)</code> 兩方面的設定</p>\n<h3 id=\"外部容器-Container\"><a href=\"#外部容器-Container\" class=\"headerlink\" title=\"外部容器 Container\"></a>外部容器 Container</h3><p>外部容器負責的是內部元件的排列方式以及方向 ，</p>\n<p>根據 flex  模型圖來看會有幾個參考點<br><img src=\"./assets/flexModule.png\" alt=\"flexModule\"><br>分兩大類別：</p>\n<ul>\n<li>main axis<br>根據 flex 方向來決定</li>\n<li>cross axis<br>跟 <code>main axis</code> 為垂直的軸</li>\n</ul>\n<p>每個類別包含有：</p>\n<ul>\n<li>start<br>此軸的啟始</li>\n<li>end<br>此軸的結束</li>\n<li>size<br>此軸的長度</li>\n</ul>\n<h4 id=\"相關設定：\"><a href=\"#相關設定：\" class=\"headerlink\" title=\"相關設定：\"></a>相關設定：</h4><ul>\n<li>flex-direction<br>設定 item 排列方向，並決定好上述的參考點，分別為：<ul>\n<li>row<br>橫向排列，以左至右</li>\n<li>column<br>縱向排列，以上至下</li>\n<li>row-reverse<br>橫向排列，以右至左</li>\n<li>column-reverse<br>縱向排列，以下至上</li>\n</ul>\n</li>\n<li>flex-wrap<br>設定內容物件是否需要換行，其相關設定為：<ul>\n<li>nowarp<br>預設，單行顯示</li>\n<li>wrap<br>總長度超出設定寬度就換行</li>\n<li>wrap-reverse<br>反轉排序</li>\n</ul>\n</li>\n<li>justify-content<br>以 <code>main axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>main start</code> 對齊</li>\n<li>flex-end<br>以 <code>main end</code> 對齊</li>\n<li>center<br>以 <code>main axis</code>中間 對齊</li>\n<li>space-between<br>平均分配 <code>main size</code> 空間， 第一個 ＆ 最後一個 item 對齊 start &amp; end</li>\n<li>space-around<br>平均分配 <code>main size</code> 空間</li>\n</ul>\n</li>\n<li>align-items<br>是以<strong>單行</strong>為單位處理，以 <code>cross axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>cross start</code> 對齊</li>\n<li>flex-end<br>以 <code>cross end</code> 對齊</li>\n<li>center<br>以 <code>cross axis</code>中間 對齊</li>\n<li>stretch<br>如 item 尚未設定長度，強制拉伸 item 至 <code>cross size</code> 同等長度</li>\n<li>baseline<br>以 item 的 baseline 為基準做對齊</li>\n</ul>\n</li>\n<li>align-content<br>是根據<strong>全部內容</strong>處理，以 <code>cross axis</code> 為基準來對齊，分別為：<ul>\n<li>flex-start<br>以 <code>cross start</code> 對齊</li>\n<li>flex-end<br>以 <code>cross end</code> 對齊</li>\n<li>center<br>以 <code>cross axis</code>中間 對齊</li>\n<li>stretch<br>如 item 尚未設定長度，強制拉伸 item 至 <code>cross size</code> 同等長度</li>\n<li>baseline<br>以 item 的 baseline 為基準做對齊</li>\n<li>space-between<br>平均分配 <code>cross size</code> 空間，  第一個 ＆ 最後一個  item 對齊 start &amp; end</li>\n<li>space-around<br>平均分配 <code>cross size</code> 空間</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"align-content-vs-align-items\"><a href=\"#align-content-vs-align-items\" class=\"headerlink\" title=\"align-content vs align-items\"></a>align-content vs align-items</h4><h3 id=\"內部元件-Items\"><a href=\"#內部元件-Items\" class=\"headerlink\" title=\"內部元件 Items\"></a>內部元件 Items</h3><p>針對元件本身內部空間相關的設定</p>\n<h4 id=\"相關設定：-1\"><a href=\"#相關設定：-1\" class=\"headerlink\" title=\"相關設定：\"></a>相關設定：</h4><ul>\n<li>flex : [grow]  [shrink]   [basis] <ul>\n<li>flex-grow<br>在外部容器尚有空間時，依據數值擴展元件大小，0 為不啟用，皆以整數設定</li>\n<li>flex-shrink<br>在外部容器空間不夠時，依據數值縮減元件大小，0 為不啟用，皆以整數設定</li>\n<li>flex-basis<br>此元件基礎長度，可套用不同單位(px、%、em …etc)</li>\n</ul>\n</li>\n<li>order<br>調整元件順序，數字越小越靠前</li>\n<li>algin-self<br>單獨對元件設定，跟<strong>align-items</strong>一樣的設定</li>\n</ul>\n"},{"title":"css-qlist","date":"2020-04-13T10:30:40.000Z","_content":"\n### at-rule\n* 提供規則告訴 CSS 應該做什麼事\n* 分 `Regular Rules (常規規則)` ＆ `Nested Rules (巢狀規則)`\n    ```css\n    /* Regular Rules */\n    @[rule keyword] (rule)\n\n    /* Nested Rule */\n    @[rule keyword] {\n        /* Nested Statements */\n    }\n    ```\n#### Media Queries\n* 一種 `Nested Rules`\n* 開頭為 `@Media` \n    ```css\n    @Media (Media Fratures | Media Types) {\n        /* Style */\n    }\n    ```\n* Media Fratures\n    * 針對裝置的一些特徵做判斷\n    * 可量化的都可以加上 `min` | `max`\n    * 設定時需加上 **()**\n    * 分類\n        * Viewport/Page Deminsions - 視窗或頁面尺寸\n            * width - 寬\n            * height - 高\n            * orientation - 螢幕方位\n                * portrait - 直向\n                * landscape 橫向\n        * Display Quality - 顯示品質\n            * resolution\n            * \n        * Color - 顯示顏色\n            * color - 判斷裝置顯示顏色 ， 0 為黑白\n        * Interation - 互動模式\n            * pointer - 判斷指標裝置 \n                * none - 沒有\n                * coarse - 粗糙\n                * fine - 精準\n\n* Media Types \n    * 裝置判斷\n    * 分類\n        * all - 全部\n        * screen - 螢幕裝置\n        * print - 列印裝置(包含預覽列印看到的)\n        * speech - 朗讀裝置，針對可以「讀出」頁面的設備。\n* 邏輯判斷\n    * 根據不同條件組成的判斷式\n    * 分類\n        * AND\n        * OR - 用 `,`表示\n        * NOT\n        * ONLY\n    ```css\n    /* 判斷是螢幕裝置*/\n    @media screen {\n        body{\n            background: #c0c0c0;\n        }\n    }\n    /* 判斷是螢幕裝置 和 寬最小要是 300px  或是 高最大是 500px*/\n    @media screen and (min-width:300px) , (max-height:500px){\n        body{\n            background: #ff0000;\n        }\n    }\n    /* 判斷是不螢幕裝置*/\n    @media not screen {\n        body{\n            background: #00ff00;\n        }\n    }\n    ```\n\n### css 的順序\n### 關於偽元素\n### 關於符號 +\n### 關於符號 >\n### 關於赴號 ~\n### 關於 view-port\n","source":"css-qlist/index.md","raw":"---\ntitle: css-qlist\ndate: 2020-04-13 18:30:40\n---\n\n### at-rule\n* 提供規則告訴 CSS 應該做什麼事\n* 分 `Regular Rules (常規規則)` ＆ `Nested Rules (巢狀規則)`\n    ```css\n    /* Regular Rules */\n    @[rule keyword] (rule)\n\n    /* Nested Rule */\n    @[rule keyword] {\n        /* Nested Statements */\n    }\n    ```\n#### Media Queries\n* 一種 `Nested Rules`\n* 開頭為 `@Media` \n    ```css\n    @Media (Media Fratures | Media Types) {\n        /* Style */\n    }\n    ```\n* Media Fratures\n    * 針對裝置的一些特徵做判斷\n    * 可量化的都可以加上 `min` | `max`\n    * 設定時需加上 **()**\n    * 分類\n        * Viewport/Page Deminsions - 視窗或頁面尺寸\n            * width - 寬\n            * height - 高\n            * orientation - 螢幕方位\n                * portrait - 直向\n                * landscape 橫向\n        * Display Quality - 顯示品質\n            * resolution\n            * \n        * Color - 顯示顏色\n            * color - 判斷裝置顯示顏色 ， 0 為黑白\n        * Interation - 互動模式\n            * pointer - 判斷指標裝置 \n                * none - 沒有\n                * coarse - 粗糙\n                * fine - 精準\n\n* Media Types \n    * 裝置判斷\n    * 分類\n        * all - 全部\n        * screen - 螢幕裝置\n        * print - 列印裝置(包含預覽列印看到的)\n        * speech - 朗讀裝置，針對可以「讀出」頁面的設備。\n* 邏輯判斷\n    * 根據不同條件組成的判斷式\n    * 分類\n        * AND\n        * OR - 用 `,`表示\n        * NOT\n        * ONLY\n    ```css\n    /* 判斷是螢幕裝置*/\n    @media screen {\n        body{\n            background: #c0c0c0;\n        }\n    }\n    /* 判斷是螢幕裝置 和 寬最小要是 300px  或是 高最大是 500px*/\n    @media screen and (min-width:300px) , (max-height:500px){\n        body{\n            background: #ff0000;\n        }\n    }\n    /* 判斷是不螢幕裝置*/\n    @media not screen {\n        body{\n            background: #00ff00;\n        }\n    }\n    ```\n\n### css 的順序\n### 關於偽元素\n### 關於符號 +\n### 關於符號 >\n### 關於赴號 ~\n### 關於 view-port\n","updated":"2020-04-16T19:14:02.276Z","path":"css-qlist/index.html","comments":1,"layout":"page","_id":"ckuy1kd8v000m5ojta3au9i07","content":"<h3 id=\"at-rule\"><a href=\"#at-rule\" class=\"headerlink\" title=\"at-rule\"></a>at-rule</h3><ul>\n<li><p>提供規則告訴 CSS 應該做什麼事</p>\n</li>\n<li><p>分 <code>Regular Rules (常規規則)</code> ＆ <code>Nested Rules (巢狀規則)</code></p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Regular Rules */</span></span><br><span class=\"line\">@[rule keyword] (rule)</span><br><span class=\"line\"></span><br><span class=\"line\">/* Nested Rule */</span><br><span class=\"line\">@[rule keyword] &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Nested Statements */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Media-Queries\"><a href=\"#Media-Queries\" class=\"headerlink\" title=\"Media Queries\"></a>Media Queries</h4></li>\n<li><p>一種 <code>Nested Rules</code></p>\n</li>\n<li><p>開頭為 <code>@Media</code> </p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@Media</span> (Media Fratures | Media Types) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Style */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Media Fratures</p>\n<ul>\n<li>針對裝置的一些特徵做判斷</li>\n<li>可量化的都可以加上 <code>min</code> | <code>max</code></li>\n<li>設定時需加上 <strong>()</strong></li>\n<li>分類<ul>\n<li>Viewport/Page Deminsions - 視窗或頁面尺寸<ul>\n<li>width - 寬</li>\n<li>height - 高</li>\n<li>orientation - 螢幕方位<ul>\n<li>portrait - 直向</li>\n<li>landscape 橫向</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Display Quality - 顯示品質<ul>\n<li>resolution</li>\n<li></li>\n</ul>\n</li>\n<li>Color - 顯示顏色<ul>\n<li>color - 判斷裝置顯示顏色 ， 0 為黑白</li>\n</ul>\n</li>\n<li>Interation - 互動模式<ul>\n<li>pointer - 判斷指標裝置 <ul>\n<li>none - 沒有</li>\n<li>coarse - 粗糙</li>\n<li>fine - 精準</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Media Types </p>\n<ul>\n<li>裝置判斷</li>\n<li>分類<ul>\n<li>all - 全部</li>\n<li>screen - 螢幕裝置</li>\n<li>print - 列印裝置(包含預覽列印看到的)</li>\n<li>speech - 朗讀裝置，針對可以「讀出」頁面的設備。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>邏輯判斷</p>\n<ul>\n<li>根據不同條件組成的判斷式</li>\n<li>分類<ul>\n<li>AND</li>\n<li>OR - 用 <code>,</code>表示</li>\n<li>NOT</li>\n<li>ONLY<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 判斷是螢幕裝置*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#c0c0c0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 判斷是螢幕裝置 和 寬最小要是 300px  或是 高最大是 500px*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width:</span><span class=\"number\">300px</span>) , (<span class=\"attribute\">max-height:</span><span class=\"number\">500px</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 判斷是不螢幕裝置*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> screen &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"css-的順序\"><a href=\"#css-的順序\" class=\"headerlink\" title=\"css 的順序\"></a>css 的順序</h3><h3 id=\"關於偽元素\"><a href=\"#關於偽元素\" class=\"headerlink\" title=\"關於偽元素\"></a>關於偽元素</h3><h3 id=\"關於符號\"><a href=\"#關於符號\" class=\"headerlink\" title=\"關於符號 +\"></a>關於符號 +</h3><h3 id=\"關於符號-gt\"><a href=\"#關於符號-gt\" class=\"headerlink\" title=\"關於符號 &gt;\"></a>關於符號 &gt;</h3><h3 id=\"關於赴號\"><a href=\"#關於赴號\" class=\"headerlink\" title=\"關於赴號 ~\"></a>關於赴號 ~</h3><h3 id=\"關於-view-port\"><a href=\"#關於-view-port\" class=\"headerlink\" title=\"關於 view-port\"></a>關於 view-port</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"at-rule\"><a href=\"#at-rule\" class=\"headerlink\" title=\"at-rule\"></a>at-rule</h3><ul>\n<li><p>提供規則告訴 CSS 應該做什麼事</p>\n</li>\n<li><p>分 <code>Regular Rules (常規規則)</code> ＆ <code>Nested Rules (巢狀規則)</code></p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Regular Rules */</span></span><br><span class=\"line\">@[rule keyword] (rule)</span><br><span class=\"line\"></span><br><span class=\"line\">/* Nested Rule */</span><br><span class=\"line\">@[rule keyword] &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Nested Statements */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Media-Queries\"><a href=\"#Media-Queries\" class=\"headerlink\" title=\"Media Queries\"></a>Media Queries</h4></li>\n<li><p>一種 <code>Nested Rules</code></p>\n</li>\n<li><p>開頭為 <code>@Media</code> </p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@Media</span> (Media Fratures | Media Types) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Style */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Media Fratures</p>\n<ul>\n<li>針對裝置的一些特徵做判斷</li>\n<li>可量化的都可以加上 <code>min</code> | <code>max</code></li>\n<li>設定時需加上 <strong>()</strong></li>\n<li>分類<ul>\n<li>Viewport/Page Deminsions - 視窗或頁面尺寸<ul>\n<li>width - 寬</li>\n<li>height - 高</li>\n<li>orientation - 螢幕方位<ul>\n<li>portrait - 直向</li>\n<li>landscape 橫向</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Display Quality - 顯示品質<ul>\n<li>resolution</li>\n<li></li>\n</ul>\n</li>\n<li>Color - 顯示顏色<ul>\n<li>color - 判斷裝置顯示顏色 ， 0 為黑白</li>\n</ul>\n</li>\n<li>Interation - 互動模式<ul>\n<li>pointer - 判斷指標裝置 <ul>\n<li>none - 沒有</li>\n<li>coarse - 粗糙</li>\n<li>fine - 精準</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Media Types </p>\n<ul>\n<li>裝置判斷</li>\n<li>分類<ul>\n<li>all - 全部</li>\n<li>screen - 螢幕裝置</li>\n<li>print - 列印裝置(包含預覽列印看到的)</li>\n<li>speech - 朗讀裝置，針對可以「讀出」頁面的設備。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>邏輯判斷</p>\n<ul>\n<li>根據不同條件組成的判斷式</li>\n<li>分類<ul>\n<li>AND</li>\n<li>OR - 用 <code>,</code>表示</li>\n<li>NOT</li>\n<li>ONLY<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 判斷是螢幕裝置*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#c0c0c0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 判斷是螢幕裝置 和 寬最小要是 300px  或是 高最大是 500px*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width:</span><span class=\"number\">300px</span>) , (<span class=\"attribute\">max-height:</span><span class=\"number\">500px</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 判斷是不螢幕裝置*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> screen &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"css-的順序\"><a href=\"#css-的順序\" class=\"headerlink\" title=\"css 的順序\"></a>css 的順序</h3><h3 id=\"關於偽元素\"><a href=\"#關於偽元素\" class=\"headerlink\" title=\"關於偽元素\"></a>關於偽元素</h3><h3 id=\"關於符號\"><a href=\"#關於符號\" class=\"headerlink\" title=\"關於符號 +\"></a>關於符號 +</h3><h3 id=\"關於符號-gt\"><a href=\"#關於符號-gt\" class=\"headerlink\" title=\"關於符號 &gt;\"></a>關於符號 &gt;</h3><h3 id=\"關於赴號\"><a href=\"#關於赴號\" class=\"headerlink\" title=\"關於赴號 ~\"></a>關於赴號 ~</h3><h3 id=\"關於-view-port\"><a href=\"#關於-view-port\" class=\"headerlink\" title=\"關於 view-port\"></a>關於 view-port</h3>"},{"title":"以 CRA 建立 todo list","date":"2021-02-23T10:05:27.000Z","_content":"\n# todo list\n\n## [source code](https://github.com/TonyYang203/react-todolist-use-cra/tree/create-todo-list-in-app-component)\n\n## 目標\n以 reactJS 單一 component 實作 Todo List相關功能，來了解建立 class  component基本的相關功能\n\n### 實作功能\n- 讀取 todo list\n- 新增 todo item\n- 刪除 todo item\n\n\n## Component\n\n在 react 是以 component 為基礎單位\n\n### 特色：\n\n- 封裝性\n- 可重複使用\n- 可組合\n- 單一資料流\n- jsx 語法\n\n### 簡介\n\n- component 命名以`大駝峰命名(upper camel case)`，否則會報錯\n- html element 對應到 react 的 attributes 的命名：\n  - 基本上會以 `小駝峰命名(lower camel case)`\n  - class => className\n  - for => htmlFor\n- style 內容格式是 **js object**\n  - attributes 改以`小駝峰命名(lower camel case)`\n\n## jsx 語法\n\n全名為 **javascript XML** ， 是以模擬 html 標籤語法來建立 react element ，來簡化生成時的複雜度\n\n```js\n//create react element function\nconst hello = React.createElement(\"h1\", null, \"Hello World\");\n\n//jsx\nconst hello = <h1>Hello World</h1>;\n```\n\n## 建立 class component\n\n以 ES6 class 語法糖來宣告並 `extend React.Component`，來建立 component\n\n```js\nclass App extends Component {\n  render() {\n    // jsx\n    return <div>Hello React</div>;\n  }\n}\n```\n\n### 特色：\n\n- 具有 state 機制，可內部自行控制 component `update` 時機\n- 可在 class 內部 override **生命週期** function\n\n### render\n\n- component 的生命週期之一\n- 在 class component 內必須實作的 function， 需有返回值\n- **返回值**為將要顯示的畫面，其型別可以有：\n  - react elements\n  - arrays ＆ fragments\n  - string or number\n  - boolean or null\n\n### virtual dom\n\n- 以 js object 結構 來模擬 `real dom`\n- 所有的操作都是針對 virtual dom，在改變完後才判斷是否要更新 `real dom`\n- 在 virtual dom 上的變化會映射到 \b `real dom`\n\n## state & props\n\n### props\n\n- 由 **開發者** 決定`開放`給 **使用者** 從外部傳入內部去影響 component 狀態的參數\n- 從外部傳入內部的參數都會放進 `props` 屬性裡，以物件`key-value`保存\n- props 其值是被 呼叫此 component 的所決定的\n- 屬性是**唯讀**的，不能改動其值，也**不應該**在內部重新賦值給 props\n- 能改變 props 值，只有在外部傳入直發生改變時\n- 改變時會觸發 component 的 update 流程\n\n### state\n\n- 代表 component 內部的狀態，會影響內部 rendering or data flow\n- 封裝在 component 內部， 不會流傳到外部\n- 一個純物件參數，`key-value` 形式 ，內容應該是**可序列化**\n- 只在 component 內部\n- 需要 rendering or data flow 的資料都**應該**放在 state\n- 除了**初始化**，否則**不應該**直接改動 state\n\n#### 宣告 初始值\n\n- 在 constructor 宣告 state 初始值\n\n```js\n  constructor() {\n    super();\n    this.state = {\n      todoList: [],\n    };\n  }\n```\n\n- 在 class 內部直接宣告\n\n```js\nclass App extends Component {\n  state = {\n    todoList: [],\n  };\n}\n```\n\n### this.setState\n\n更新指定 state ， 並觸發 component 的 update 的流程\n\n```js\nthis.setState(updater, [callback]);\n```\n\n- updater 有兩種模式\n  - object\n    - 是以 key-value 方式來更新指定 state value\n  - function\n    - 是會接收`當下`的 state & props ，可以以此為參考基礎來進行更新， return `object` 包裹需要更改的值\n- `callback` 會在更新流程結束後去執行\n\n```js\n//object\nthis.setState({ text: \"hello!\" });\n\n//function\nthis.setState(function (state, props) {\n  return {\n    text: \"hello\",\n  };\n});\n\n//use callback\nthis.setState(\n  function (state, props) {\n    return {\n      text: \"hello\",\n    };\n  },\n  function () {\n    console.log(this.state);\n  }\n);\n```\n\n#### 注意\n\n- **setState** 是`非同步`\n- 一次 update 代表一個`循環(cycle)`\n- 假如同一循環同時執行多次 `setState` ， 會依順序更新，但更新循環只會有**一次**\n- 如果需要根據當下 state 值去更新，請用 function 來取得當下最即時的 state\n\n## ref\n可獲取指定 dom node or react element 內容，\n通常是無法透過 dataflow 來控制畫面的變化，從而需要`直接操作`元素本身  \n像是以下情境：\n  - input value\n  - video play\n  - scroll 位置  \n\n### 用法 \n- 在 constructor 裡使用 `createRef` function 建立 ref 參考\n```js\n  constructor(props) {\n    super(props);\n    this.inputRef = createRef();\n  }\n\n```\n- 在 render function 裡，在指定 component | element 放入 **ref** props\n```js\n  render() {\n    return (\n      <div>\n        <header className=\"todo-header\">\n          <input ref={this.inputRef} />\n          <button onClick={this.createTodoItem}>save</button>\n        </header>\n      </div>\n    );\n  }\n\n```\n\n\n","source":"draft-react-dev-note-create-todolist-by-cra/index.md","raw":"---\ntitle: 以 CRA 建立 todo list\ndate: 2021-02-23 18:05:27\n---\n\n# todo list\n\n## [source code](https://github.com/TonyYang203/react-todolist-use-cra/tree/create-todo-list-in-app-component)\n\n## 目標\n以 reactJS 單一 component 實作 Todo List相關功能，來了解建立 class  component基本的相關功能\n\n### 實作功能\n- 讀取 todo list\n- 新增 todo item\n- 刪除 todo item\n\n\n## Component\n\n在 react 是以 component 為基礎單位\n\n### 特色：\n\n- 封裝性\n- 可重複使用\n- 可組合\n- 單一資料流\n- jsx 語法\n\n### 簡介\n\n- component 命名以`大駝峰命名(upper camel case)`，否則會報錯\n- html element 對應到 react 的 attributes 的命名：\n  - 基本上會以 `小駝峰命名(lower camel case)`\n  - class => className\n  - for => htmlFor\n- style 內容格式是 **js object**\n  - attributes 改以`小駝峰命名(lower camel case)`\n\n## jsx 語法\n\n全名為 **javascript XML** ， 是以模擬 html 標籤語法來建立 react element ，來簡化生成時的複雜度\n\n```js\n//create react element function\nconst hello = React.createElement(\"h1\", null, \"Hello World\");\n\n//jsx\nconst hello = <h1>Hello World</h1>;\n```\n\n## 建立 class component\n\n以 ES6 class 語法糖來宣告並 `extend React.Component`，來建立 component\n\n```js\nclass App extends Component {\n  render() {\n    // jsx\n    return <div>Hello React</div>;\n  }\n}\n```\n\n### 特色：\n\n- 具有 state 機制，可內部自行控制 component `update` 時機\n- 可在 class 內部 override **生命週期** function\n\n### render\n\n- component 的生命週期之一\n- 在 class component 內必須實作的 function， 需有返回值\n- **返回值**為將要顯示的畫面，其型別可以有：\n  - react elements\n  - arrays ＆ fragments\n  - string or number\n  - boolean or null\n\n### virtual dom\n\n- 以 js object 結構 來模擬 `real dom`\n- 所有的操作都是針對 virtual dom，在改變完後才判斷是否要更新 `real dom`\n- 在 virtual dom 上的變化會映射到 \b `real dom`\n\n## state & props\n\n### props\n\n- 由 **開發者** 決定`開放`給 **使用者** 從外部傳入內部去影響 component 狀態的參數\n- 從外部傳入內部的參數都會放進 `props` 屬性裡，以物件`key-value`保存\n- props 其值是被 呼叫此 component 的所決定的\n- 屬性是**唯讀**的，不能改動其值，也**不應該**在內部重新賦值給 props\n- 能改變 props 值，只有在外部傳入直發生改變時\n- 改變時會觸發 component 的 update 流程\n\n### state\n\n- 代表 component 內部的狀態，會影響內部 rendering or data flow\n- 封裝在 component 內部， 不會流傳到外部\n- 一個純物件參數，`key-value` 形式 ，內容應該是**可序列化**\n- 只在 component 內部\n- 需要 rendering or data flow 的資料都**應該**放在 state\n- 除了**初始化**，否則**不應該**直接改動 state\n\n#### 宣告 初始值\n\n- 在 constructor 宣告 state 初始值\n\n```js\n  constructor() {\n    super();\n    this.state = {\n      todoList: [],\n    };\n  }\n```\n\n- 在 class 內部直接宣告\n\n```js\nclass App extends Component {\n  state = {\n    todoList: [],\n  };\n}\n```\n\n### this.setState\n\n更新指定 state ， 並觸發 component 的 update 的流程\n\n```js\nthis.setState(updater, [callback]);\n```\n\n- updater 有兩種模式\n  - object\n    - 是以 key-value 方式來更新指定 state value\n  - function\n    - 是會接收`當下`的 state & props ，可以以此為參考基礎來進行更新， return `object` 包裹需要更改的值\n- `callback` 會在更新流程結束後去執行\n\n```js\n//object\nthis.setState({ text: \"hello!\" });\n\n//function\nthis.setState(function (state, props) {\n  return {\n    text: \"hello\",\n  };\n});\n\n//use callback\nthis.setState(\n  function (state, props) {\n    return {\n      text: \"hello\",\n    };\n  },\n  function () {\n    console.log(this.state);\n  }\n);\n```\n\n#### 注意\n\n- **setState** 是`非同步`\n- 一次 update 代表一個`循環(cycle)`\n- 假如同一循環同時執行多次 `setState` ， 會依順序更新，但更新循環只會有**一次**\n- 如果需要根據當下 state 值去更新，請用 function 來取得當下最即時的 state\n\n## ref\n可獲取指定 dom node or react element 內容，\n通常是無法透過 dataflow 來控制畫面的變化，從而需要`直接操作`元素本身  \n像是以下情境：\n  - input value\n  - video play\n  - scroll 位置  \n\n### 用法 \n- 在 constructor 裡使用 `createRef` function 建立 ref 參考\n```js\n  constructor(props) {\n    super(props);\n    this.inputRef = createRef();\n  }\n\n```\n- 在 render function 裡，在指定 component | element 放入 **ref** props\n```js\n  render() {\n    return (\n      <div>\n        <header className=\"todo-header\">\n          <input ref={this.inputRef} />\n          <button onClick={this.createTodoItem}>save</button>\n        </header>\n      </div>\n    );\n  }\n\n```\n\n\n","updated":"2021-03-18T07:58:53.262Z","path":"draft-react-dev-note-create-todolist-by-cra/index.html","comments":1,"layout":"page","_id":"ckuy1kd8w000o5ojt112mhr2w","content":"<h1 id=\"todo-list\"><a href=\"#todo-list\" class=\"headerlink\" title=\"todo list\"></a>todo list</h1><h2 id=\"source-code\"><a href=\"#source-code\" class=\"headerlink\" title=\"source code\"></a><a href=\"https://github.com/TonyYang203/react-todolist-use-cra/tree/create-todo-list-in-app-component\" target=\"_blank\" rel=\"noopener\">source code</a></h2><h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><p>以 reactJS 單一 component 實作 Todo List相關功能，來了解建立 class  component基本的相關功能</p>\n<h3 id=\"實作功能\"><a href=\"#實作功能\" class=\"headerlink\" title=\"實作功能\"></a>實作功能</h3><ul>\n<li>讀取 todo list</li>\n<li>新增 todo item</li>\n<li>刪除 todo item</li>\n</ul>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>在 react 是以 component 為基礎單位</p>\n<h3 id=\"特色：\"><a href=\"#特色：\" class=\"headerlink\" title=\"特色：\"></a>特色：</h3><ul>\n<li>封裝性</li>\n<li>可重複使用</li>\n<li>可組合</li>\n<li>單一資料流</li>\n<li>jsx 語法</li>\n</ul>\n<h3 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h3><ul>\n<li>component 命名以<code>大駝峰命名(upper camel case)</code>，否則會報錯</li>\n<li>html element 對應到 react 的 attributes 的命名：<ul>\n<li>基本上會以 <code>小駝峰命名(lower camel case)</code></li>\n<li>class =&gt; className</li>\n<li>for =&gt; htmlFor</li>\n</ul>\n</li>\n<li>style 內容格式是 <strong>js object</strong><ul>\n<li>attributes 改以<code>小駝峰命名(lower camel case)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jsx-語法\"><a href=\"#jsx-語法\" class=\"headerlink\" title=\"jsx 語法\"></a>jsx 語法</h2><p>全名為 <strong>javascript XML</strong> ， 是以模擬 html 標籤語法來建立 react element ，來簡化生成時的複雜度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create react element function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = React.createElement(<span class=\"string\">\"h1\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jsx</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立-class-component\"><a href=\"#建立-class-component\" class=\"headerlink\" title=\"建立 class component\"></a>建立 class component</h2><p>以 ES6 class 語法糖來宣告並 <code>extend React.Component</code>，來建立 component</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// jsx</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特色：-1\"><a href=\"#特色：-1\" class=\"headerlink\" title=\"特色：\"></a>特色：</h3><ul>\n<li>具有 state 機制，可內部自行控制 component <code>update</code> 時機</li>\n<li>可在 class 內部 override <strong>生命週期</strong> function</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li>component 的生命週期之一</li>\n<li>在 class component 內必須實作的 function， 需有返回值</li>\n<li><strong>返回值</strong>為將要顯示的畫面，其型別可以有：<ul>\n<li>react elements</li>\n<li>arrays ＆ fragments</li>\n<li>string or number</li>\n<li>boolean or null</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"virtual-dom\"><a href=\"#virtual-dom\" class=\"headerlink\" title=\"virtual dom\"></a>virtual dom</h3><ul>\n<li>以 js object 結構 來模擬 <code>real dom</code></li>\n<li>所有的操作都是針對 virtual dom，在改變完後才判斷是否要更新 <code>real dom</code></li>\n<li>在 virtual dom 上的變化會映射到 \b <code>real dom</code></li>\n</ul>\n<h2 id=\"state-amp-props\"><a href=\"#state-amp-props\" class=\"headerlink\" title=\"state &amp; props\"></a>state &amp; props</h2><h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li>由 <strong>開發者</strong> 決定<code>開放</code>給 <strong>使用者</strong> 從外部傳入內部去影響 component 狀態的參數</li>\n<li>從外部傳入內部的參數都會放進 <code>props</code> 屬性裡，以物件<code>key-value</code>保存</li>\n<li>props 其值是被 呼叫此 component 的所決定的</li>\n<li>屬性是<strong>唯讀</strong>的，不能改動其值，也<strong>不應該</strong>在內部重新賦值給 props</li>\n<li>能改變 props 值，只有在外部傳入直發生改變時</li>\n<li>改變時會觸發 component 的 update 流程</li>\n</ul>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><ul>\n<li>代表 component 內部的狀態，會影響內部 rendering or data flow</li>\n<li>封裝在 component 內部， 不會流傳到外部</li>\n<li>一個純物件參數，<code>key-value</code> 形式 ，內容應該是<strong>可序列化</strong></li>\n<li>只在 component 內部</li>\n<li>需要 rendering or data flow 的資料都<strong>應該</strong>放在 state</li>\n<li>除了<strong>初始化</strong>，否則<strong>不應該</strong>直接改動 state</li>\n</ul>\n<h4 id=\"宣告-初始值\"><a href=\"#宣告-初始值\" class=\"headerlink\" title=\"宣告 初始值\"></a>宣告 初始值</h4><ul>\n<li>在 constructor 宣告 state 初始值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    todoList: [],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 class 內部直接宣告</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    todoList: [],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-setState\"><a href=\"#this-setState\" class=\"headerlink\" title=\"this.setState\"></a>this.setState</h3><p>更新指定 state ， 並觸發 component 的 update 的流程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(updater, [callback]);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>updater 有兩種模式<ul>\n<li>object<ul>\n<li>是以 key-value 方式來更新指定 state value</li>\n</ul>\n</li>\n<li>function<ul>\n<li>是會接收<code>當下</code>的 state &amp; props ，可以以此為參考基礎來進行更新， return <code>object</code> 包裹需要更改的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>callback</code> 會在更新流程結束後去執行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: <span class=\"string\">\"hello!\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use callback</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      text: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><strong>setState</strong> 是<code>非同步</code></li>\n<li>一次 update 代表一個<code>循環(cycle)</code></li>\n<li>假如同一循環同時執行多次 <code>setState</code> ， 會依順序更新，但更新循環只會有<strong>一次</strong></li>\n<li>如果需要根據當下 state 值去更新，請用 function 來取得當下最即時的 state</li>\n</ul>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>可獲取指定 dom node or react element 內容，<br>通常是無法透過 dataflow 來控制畫面的變化，從而需要<code>直接操作</code>元素本身<br>像是以下情境：</p>\n<ul>\n<li>input value</li>\n<li>video play</li>\n<li>scroll 位置  </li>\n</ul>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li>在 constructor 裡使用 <code>createRef</code> function 建立 ref 參考<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inputRef = createRef();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 render function 裡，在指定 component | element 放入 <strong>ref</strong> props<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;header className=<span class=\"string\">\"todo-header\"</span>&gt;</span><br><span class=\"line\">        &lt;input ref=&#123;<span class=\"keyword\">this</span>.inputRef&#125; /&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.createTodoItem&#125;&gt;save&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>header&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"todo-list\"><a href=\"#todo-list\" class=\"headerlink\" title=\"todo list\"></a>todo list</h1><h2 id=\"source-code\"><a href=\"#source-code\" class=\"headerlink\" title=\"source code\"></a><a href=\"https://github.com/TonyYang203/react-todolist-use-cra/tree/create-todo-list-in-app-component\" target=\"_blank\" rel=\"noopener\">source code</a></h2><h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><p>以 reactJS 單一 component 實作 Todo List相關功能，來了解建立 class  component基本的相關功能</p>\n<h3 id=\"實作功能\"><a href=\"#實作功能\" class=\"headerlink\" title=\"實作功能\"></a>實作功能</h3><ul>\n<li>讀取 todo list</li>\n<li>新增 todo item</li>\n<li>刪除 todo item</li>\n</ul>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>在 react 是以 component 為基礎單位</p>\n<h3 id=\"特色：\"><a href=\"#特色：\" class=\"headerlink\" title=\"特色：\"></a>特色：</h3><ul>\n<li>封裝性</li>\n<li>可重複使用</li>\n<li>可組合</li>\n<li>單一資料流</li>\n<li>jsx 語法</li>\n</ul>\n<h3 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h3><ul>\n<li>component 命名以<code>大駝峰命名(upper camel case)</code>，否則會報錯</li>\n<li>html element 對應到 react 的 attributes 的命名：<ul>\n<li>基本上會以 <code>小駝峰命名(lower camel case)</code></li>\n<li>class =&gt; className</li>\n<li>for =&gt; htmlFor</li>\n</ul>\n</li>\n<li>style 內容格式是 <strong>js object</strong><ul>\n<li>attributes 改以<code>小駝峰命名(lower camel case)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jsx-語法\"><a href=\"#jsx-語法\" class=\"headerlink\" title=\"jsx 語法\"></a>jsx 語法</h2><p>全名為 <strong>javascript XML</strong> ， 是以模擬 html 標籤語法來建立 react element ，來簡化生成時的複雜度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create react element function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = React.createElement(<span class=\"string\">\"h1\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jsx</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立-class-component\"><a href=\"#建立-class-component\" class=\"headerlink\" title=\"建立 class component\"></a>建立 class component</h2><p>以 ES6 class 語法糖來宣告並 <code>extend React.Component</code>，來建立 component</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// jsx</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特色：-1\"><a href=\"#特色：-1\" class=\"headerlink\" title=\"特色：\"></a>特色：</h3><ul>\n<li>具有 state 機制，可內部自行控制 component <code>update</code> 時機</li>\n<li>可在 class 內部 override <strong>生命週期</strong> function</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li>component 的生命週期之一</li>\n<li>在 class component 內必須實作的 function， 需有返回值</li>\n<li><strong>返回值</strong>為將要顯示的畫面，其型別可以有：<ul>\n<li>react elements</li>\n<li>arrays ＆ fragments</li>\n<li>string or number</li>\n<li>boolean or null</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"virtual-dom\"><a href=\"#virtual-dom\" class=\"headerlink\" title=\"virtual dom\"></a>virtual dom</h3><ul>\n<li>以 js object 結構 來模擬 <code>real dom</code></li>\n<li>所有的操作都是針對 virtual dom，在改變完後才判斷是否要更新 <code>real dom</code></li>\n<li>在 virtual dom 上的變化會映射到 \b <code>real dom</code></li>\n</ul>\n<h2 id=\"state-amp-props\"><a href=\"#state-amp-props\" class=\"headerlink\" title=\"state &amp; props\"></a>state &amp; props</h2><h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li>由 <strong>開發者</strong> 決定<code>開放</code>給 <strong>使用者</strong> 從外部傳入內部去影響 component 狀態的參數</li>\n<li>從外部傳入內部的參數都會放進 <code>props</code> 屬性裡，以物件<code>key-value</code>保存</li>\n<li>props 其值是被 呼叫此 component 的所決定的</li>\n<li>屬性是<strong>唯讀</strong>的，不能改動其值，也<strong>不應該</strong>在內部重新賦值給 props</li>\n<li>能改變 props 值，只有在外部傳入直發生改變時</li>\n<li>改變時會觸發 component 的 update 流程</li>\n</ul>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><ul>\n<li>代表 component 內部的狀態，會影響內部 rendering or data flow</li>\n<li>封裝在 component 內部， 不會流傳到外部</li>\n<li>一個純物件參數，<code>key-value</code> 形式 ，內容應該是<strong>可序列化</strong></li>\n<li>只在 component 內部</li>\n<li>需要 rendering or data flow 的資料都<strong>應該</strong>放在 state</li>\n<li>除了<strong>初始化</strong>，否則<strong>不應該</strong>直接改動 state</li>\n</ul>\n<h4 id=\"宣告-初始值\"><a href=\"#宣告-初始值\" class=\"headerlink\" title=\"宣告 初始值\"></a>宣告 初始值</h4><ul>\n<li>在 constructor 宣告 state 初始值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    todoList: [],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 class 內部直接宣告</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    todoList: [],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-setState\"><a href=\"#this-setState\" class=\"headerlink\" title=\"this.setState\"></a>this.setState</h3><p>更新指定 state ， 並觸發 component 的 update 的流程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(updater, [callback]);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>updater 有兩種模式<ul>\n<li>object<ul>\n<li>是以 key-value 方式來更新指定 state value</li>\n</ul>\n</li>\n<li>function<ul>\n<li>是會接收<code>當下</code>的 state &amp; props ，可以以此為參考基礎來進行更新， return <code>object</code> 包裹需要更改的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>callback</code> 會在更新流程結束後去執行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: <span class=\"string\">\"hello!\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use callback</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      text: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><strong>setState</strong> 是<code>非同步</code></li>\n<li>一次 update 代表一個<code>循環(cycle)</code></li>\n<li>假如同一循環同時執行多次 <code>setState</code> ， 會依順序更新，但更新循環只會有<strong>一次</strong></li>\n<li>如果需要根據當下 state 值去更新，請用 function 來取得當下最即時的 state</li>\n</ul>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>可獲取指定 dom node or react element 內容，<br>通常是無法透過 dataflow 來控制畫面的變化，從而需要<code>直接操作</code>元素本身<br>像是以下情境：</p>\n<ul>\n<li>input value</li>\n<li>video play</li>\n<li>scroll 位置  </li>\n</ul>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li>在 constructor 裡使用 <code>createRef</code> function 建立 ref 參考<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.inputRef = createRef();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 render function 裡，在指定 component | element 放入 <strong>ref</strong> props<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;header className=<span class=\"string\">\"todo-header\"</span>&gt;</span><br><span class=\"line\">        &lt;input ref=&#123;<span class=\"keyword\">this</span>.inputRef&#125; /&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.createTodoItem&#125;&gt;save&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>header&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n"},{"title":"Eclipse_Spring_Project_Setting","date":"2020-02-09T17:22:47.000Z","_content":"\n##  Eclipse Spring Project Setting\n* 打開 Eclipse ，在新增專案裡找到 **Web**資料夾，選擇 **Dynamic Web Project**\n* 設定 `project name`，完成\n* 手動載入 **Spring Framework**\n\n##  Spring Maven Web Project\n* 打開 Eclipse ，在新增專案裡找到 **Maven**資料夾，選擇 **Maven Project**\n* 在 **Select an Archetype** 選擇 \n    * `Group ID`: **com.apache.maven.archetypes**<br>\n    * `Artifact Id`: **maven-archetype-webapp**\n* 編輯 `pom.xml` 載入 **Spring Framework**\n```xml\n<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>4.3.14.RELEASE</version>\n</dependency>\n```\n* 確認 JRE 在 JAVA8 以上，否則會有 `springmvc/main/java(missing)`\n## WebContent 架構\n* META-INF\n    * 主要是在打包(.jar .war)時內容會自動建立\n    * 存放 **Package**, **額外設定(版本,安全,擴展,服務)**  \n    * 主要檔案\n        * Manifast.MF\n    * 參考資料：\n        * https://blog.csdn.net/umi2008/article/details/84211141\n* WEB-INF\n    * 網站資訊存放區，不過客戶端**不可直接存取**\n    * 目錄\n        * lib/\n        * web.xml\n        * classes/\n\n","source":"eclipse-spring-project-setting/index.md","raw":"---\ntitle: Eclipse_Spring_Project_Setting\ndate: 2020-02-10 01:22:47\n---\n\n##  Eclipse Spring Project Setting\n* 打開 Eclipse ，在新增專案裡找到 **Web**資料夾，選擇 **Dynamic Web Project**\n* 設定 `project name`，完成\n* 手動載入 **Spring Framework**\n\n##  Spring Maven Web Project\n* 打開 Eclipse ，在新增專案裡找到 **Maven**資料夾，選擇 **Maven Project**\n* 在 **Select an Archetype** 選擇 \n    * `Group ID`: **com.apache.maven.archetypes**<br>\n    * `Artifact Id`: **maven-archetype-webapp**\n* 編輯 `pom.xml` 載入 **Spring Framework**\n```xml\n<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>4.3.14.RELEASE</version>\n</dependency>\n```\n* 確認 JRE 在 JAVA8 以上，否則會有 `springmvc/main/java(missing)`\n## WebContent 架構\n* META-INF\n    * 主要是在打包(.jar .war)時內容會自動建立\n    * 存放 **Package**, **額外設定(版本,安全,擴展,服務)**  \n    * 主要檔案\n        * Manifast.MF\n    * 參考資料：\n        * https://blog.csdn.net/umi2008/article/details/84211141\n* WEB-INF\n    * 網站資訊存放區，不過客戶端**不可直接存取**\n    * 目錄\n        * lib/\n        * web.xml\n        * classes/\n\n","updated":"2020-02-09T17:24:32.679Z","path":"eclipse-spring-project-setting/index.html","comments":1,"layout":"page","_id":"ckuy1kd90000t5ojt7jhc6l7f","content":"<h2 id=\"Eclipse-Spring-Project-Setting\"><a href=\"#Eclipse-Spring-Project-Setting\" class=\"headerlink\" title=\"Eclipse Spring Project Setting\"></a>Eclipse Spring Project Setting</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Web</strong>資料夾，選擇 <strong>Dynamic Web Project</strong></li>\n<li>設定 <code>project name</code>，完成</li>\n<li>手動載入 <strong>Spring Framework</strong></li>\n</ul>\n<h2 id=\"Spring-Maven-Web-Project\"><a href=\"#Spring-Maven-Web-Project\" class=\"headerlink\" title=\"Spring Maven Web Project\"></a>Spring Maven Web Project</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Maven</strong>資料夾，選擇 <strong>Maven Project</strong></li>\n<li>在 <strong>Select an Archetype</strong> 選擇 <ul>\n<li><code>Group ID</code>: <strong>com.apache.maven.archetypes</strong><br></li>\n<li><code>Artifact Id</code>: <strong>maven-archetype-webapp</strong></li>\n</ul>\n</li>\n<li>編輯 <code>pom.xml</code> 載入 <strong>Spring Framework</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.14.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>確認 JRE 在 JAVA8 以上，否則會有 <code>springmvc/main/java(missing)</code><h2 id=\"WebContent-架構\"><a href=\"#WebContent-架構\" class=\"headerlink\" title=\"WebContent 架構\"></a>WebContent 架構</h2></li>\n<li>META-INF<ul>\n<li>主要是在打包(.jar .war)時內容會自動建立</li>\n<li>存放 <strong>Package</strong>, <strong>額外設定(版本,安全,擴展,服務)</strong>  </li>\n<li>主要檔案<ul>\n<li>Manifast.MF</li>\n</ul>\n</li>\n<li>參考資料：<ul>\n<li><a href=\"https://blog.csdn.net/umi2008/article/details/84211141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/umi2008/article/details/84211141</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WEB-INF<ul>\n<li>網站資訊存放區，不過客戶端<strong>不可直接存取</strong></li>\n<li>目錄<ul>\n<li>lib/</li>\n<li>web.xml</li>\n<li>classes/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Eclipse-Spring-Project-Setting\"><a href=\"#Eclipse-Spring-Project-Setting\" class=\"headerlink\" title=\"Eclipse Spring Project Setting\"></a>Eclipse Spring Project Setting</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Web</strong>資料夾，選擇 <strong>Dynamic Web Project</strong></li>\n<li>設定 <code>project name</code>，完成</li>\n<li>手動載入 <strong>Spring Framework</strong></li>\n</ul>\n<h2 id=\"Spring-Maven-Web-Project\"><a href=\"#Spring-Maven-Web-Project\" class=\"headerlink\" title=\"Spring Maven Web Project\"></a>Spring Maven Web Project</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Maven</strong>資料夾，選擇 <strong>Maven Project</strong></li>\n<li>在 <strong>Select an Archetype</strong> 選擇 <ul>\n<li><code>Group ID</code>: <strong>com.apache.maven.archetypes</strong><br></li>\n<li><code>Artifact Id</code>: <strong>maven-archetype-webapp</strong></li>\n</ul>\n</li>\n<li>編輯 <code>pom.xml</code> 載入 <strong>Spring Framework</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.14.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>確認 JRE 在 JAVA8 以上，否則會有 <code>springmvc/main/java(missing)</code><h2 id=\"WebContent-架構\"><a href=\"#WebContent-架構\" class=\"headerlink\" title=\"WebContent 架構\"></a>WebContent 架構</h2></li>\n<li>META-INF<ul>\n<li>主要是在打包(.jar .war)時內容會自動建立</li>\n<li>存放 <strong>Package</strong>, <strong>額外設定(版本,安全,擴展,服務)</strong>  </li>\n<li>主要檔案<ul>\n<li>Manifast.MF</li>\n</ul>\n</li>\n<li>參考資料：<ul>\n<li><a href=\"https://blog.csdn.net/umi2008/article/details/84211141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/umi2008/article/details/84211141</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WEB-INF<ul>\n<li>網站資訊存放區，不過客戶端<strong>不可直接存取</strong></li>\n<li>目錄<ul>\n<li>lib/</li>\n<li>web.xml</li>\n<li>classes/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"eclipse-setting","date":"2020-01-26T08:31:11.000Z","_content":"\n## 下載 Eclipse\n* 官網下載, [**eclipse-install**](https://www.eclipse.org/downloads/)\n* 執行 **eclipse-install**\n> 要執行之前，需要安裝**JDK**\n\n## 安裝套件\n* 打開 eclipse ，選擇 **Help** -> Install New Software\n* `Work With`選擇 **http://download.eclipse.org/releases/lasest-version**\n* 找到 **`Web, XML, Java EE and OSGi Enterprise Development`** 展開\n    * Web\n        * 選擇 \n            * Eclipse Java EE Developer Tools\n            * Eclipse Java Web Developer Tools\n            * Eclipse Web Developer Tools\n            * Eclipse XML Editors and Tools\n        * 安裝\n    > **P.S.** 沒安裝的話，再新增專案會找不到 **Web** 選項\n    * Server\n        * 選擇 \n            * JST Server Adapters\n            * JST Server Adapters Extensions\n        * 安裝\n    > **P.S.** 沒安裝的話，新增專案會找不到 **Tomcat** 選項\n\n\n## 安裝 Tomcat\n* 在[Tomcat官網](https://tomcat.apache.org/)下載\n    * 選擇 **Binary Distributions** > Core\n    * 解壓縮\n* 打開 Eclipse ，在新增專案裡找到 **Server**資料夾，選擇 **Server**\n* 進入後選擇 **Apache** > **Tomcat version Server** \n* 在 **`Tomcat installation directory`** 選擇下載的 Tomcat Server\n* **JRE 版本**選擇現有的版本\n\n\n## 手動下載 & 掛載  Spring Framework\n* 下載網址: https://repo.spring.io/release/org/springframework/spring/\n* 選擇版本\n* 選擇 **spring-version.RELEASE-dist.zip**\n* 在 **Project Explorer** 選擇設定的 `project name` ， 右鍵 `Bulid Path` > `Configure Build Path`\n* 選擇 **Libraries** > **Add External JARS**，選擇下載好的 `Spring Framework` > `libs` 底下所有的 jar檔 \n","source":"eclipse-setting/index.md","raw":"---\ntitle: eclipse-setting\ndate: 2020-01-26 16:31:11\n---\n\n## 下載 Eclipse\n* 官網下載, [**eclipse-install**](https://www.eclipse.org/downloads/)\n* 執行 **eclipse-install**\n> 要執行之前，需要安裝**JDK**\n\n## 安裝套件\n* 打開 eclipse ，選擇 **Help** -> Install New Software\n* `Work With`選擇 **http://download.eclipse.org/releases/lasest-version**\n* 找到 **`Web, XML, Java EE and OSGi Enterprise Development`** 展開\n    * Web\n        * 選擇 \n            * Eclipse Java EE Developer Tools\n            * Eclipse Java Web Developer Tools\n            * Eclipse Web Developer Tools\n            * Eclipse XML Editors and Tools\n        * 安裝\n    > **P.S.** 沒安裝的話，再新增專案會找不到 **Web** 選項\n    * Server\n        * 選擇 \n            * JST Server Adapters\n            * JST Server Adapters Extensions\n        * 安裝\n    > **P.S.** 沒安裝的話，新增專案會找不到 **Tomcat** 選項\n\n\n## 安裝 Tomcat\n* 在[Tomcat官網](https://tomcat.apache.org/)下載\n    * 選擇 **Binary Distributions** > Core\n    * 解壓縮\n* 打開 Eclipse ，在新增專案裡找到 **Server**資料夾，選擇 **Server**\n* 進入後選擇 **Apache** > **Tomcat version Server** \n* 在 **`Tomcat installation directory`** 選擇下載的 Tomcat Server\n* **JRE 版本**選擇現有的版本\n\n\n## 手動下載 & 掛載  Spring Framework\n* 下載網址: https://repo.spring.io/release/org/springframework/spring/\n* 選擇版本\n* 選擇 **spring-version.RELEASE-dist.zip**\n* 在 **Project Explorer** 選擇設定的 `project name` ， 右鍵 `Bulid Path` > `Configure Build Path`\n* 選擇 **Libraries** > **Add External JARS**，選擇下載好的 `Spring Framework` > `libs` 底下所有的 jar檔 \n","updated":"2020-01-26T09:12:31.254Z","path":"eclipse-setting/index.html","comments":1,"layout":"page","_id":"ckuy1kd91000w5ojt243i27yp","content":"<h2 id=\"下載-Eclipse\"><a href=\"#下載-Eclipse\" class=\"headerlink\" title=\"下載 Eclipse\"></a>下載 Eclipse</h2><ul>\n<li>官網下載, <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\"><strong>eclipse-install</strong></a></li>\n<li>執行 <strong>eclipse-install</strong><blockquote>\n<p>要執行之前，需要安裝<strong>JDK</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><ul>\n<li>打開 eclipse ，選擇 <strong>Help</strong> -&gt; Install New Software</li>\n<li><code>Work With</code>選擇 <strong><a href=\"http://download.eclipse.org/releases/lasest-version\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/releases/lasest-version</a></strong></li>\n<li>找到 <strong><code>Web, XML, Java EE and OSGi Enterprise Development</code></strong> 展開<ul>\n<li>Web<ul>\n<li>選擇 <ul>\n<li>Eclipse Java EE Developer Tools</li>\n<li>Eclipse Java Web Developer Tools</li>\n<li>Eclipse Web Developer Tools</li>\n<li>Eclipse XML Editors and Tools</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，再新增專案會找不到 <strong>Web</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>Server<ul>\n<li>選擇 <ul>\n<li>JST Server Adapters</li>\n<li>JST Server Adapters Extensions</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，新增專案會找不到 <strong>Tomcat</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安裝-Tomcat\"><a href=\"#安裝-Tomcat\" class=\"headerlink\" title=\"安裝 Tomcat\"></a>安裝 Tomcat</h2><ul>\n<li>在<a href=\"https://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">Tomcat官網</a>下載<ul>\n<li>選擇 <strong>Binary Distributions</strong> &gt; Core</li>\n<li>解壓縮</li>\n</ul>\n</li>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Server</strong>資料夾，選擇 <strong>Server</strong></li>\n<li>進入後選擇 <strong>Apache</strong> &gt; <strong>Tomcat version Server</strong> </li>\n<li>在 <strong><code>Tomcat installation directory</code></strong> 選擇下載的 Tomcat Server</li>\n<li><strong>JRE 版本</strong>選擇現有的版本</li>\n</ul>\n<h2 id=\"手動下載-amp-掛載-Spring-Framework\"><a href=\"#手動下載-amp-掛載-Spring-Framework\" class=\"headerlink\" title=\"手動下載 &amp; 掛載  Spring Framework\"></a>手動下載 &amp; 掛載  Spring Framework</h2><ul>\n<li>下載網址: <a href=\"https://repo.spring.io/release/org/springframework/spring/\" target=\"_blank\" rel=\"noopener\">https://repo.spring.io/release/org/springframework/spring/</a></li>\n<li>選擇版本</li>\n<li>選擇 <strong>spring-version.RELEASE-dist.zip</strong></li>\n<li>在 <strong>Project Explorer</strong> 選擇設定的 <code>project name</code> ， 右鍵 <code>Bulid Path</code> &gt; <code>Configure Build Path</code></li>\n<li>選擇 <strong>Libraries</strong> &gt; <strong>Add External JARS</strong>，選擇下載好的 <code>Spring Framework</code> &gt; <code>libs</code> 底下所有的 jar檔 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下載-Eclipse\"><a href=\"#下載-Eclipse\" class=\"headerlink\" title=\"下載 Eclipse\"></a>下載 Eclipse</h2><ul>\n<li>官網下載, <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\"><strong>eclipse-install</strong></a></li>\n<li>執行 <strong>eclipse-install</strong><blockquote>\n<p>要執行之前，需要安裝<strong>JDK</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><ul>\n<li>打開 eclipse ，選擇 <strong>Help</strong> -&gt; Install New Software</li>\n<li><code>Work With</code>選擇 <strong><a href=\"http://download.eclipse.org/releases/lasest-version\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/releases/lasest-version</a></strong></li>\n<li>找到 <strong><code>Web, XML, Java EE and OSGi Enterprise Development</code></strong> 展開<ul>\n<li>Web<ul>\n<li>選擇 <ul>\n<li>Eclipse Java EE Developer Tools</li>\n<li>Eclipse Java Web Developer Tools</li>\n<li>Eclipse Web Developer Tools</li>\n<li>Eclipse XML Editors and Tools</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，再新增專案會找不到 <strong>Web</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>Server<ul>\n<li>選擇 <ul>\n<li>JST Server Adapters</li>\n<li>JST Server Adapters Extensions</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，新增專案會找不到 <strong>Tomcat</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安裝-Tomcat\"><a href=\"#安裝-Tomcat\" class=\"headerlink\" title=\"安裝 Tomcat\"></a>安裝 Tomcat</h2><ul>\n<li>在<a href=\"https://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">Tomcat官網</a>下載<ul>\n<li>選擇 <strong>Binary Distributions</strong> &gt; Core</li>\n<li>解壓縮</li>\n</ul>\n</li>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Server</strong>資料夾，選擇 <strong>Server</strong></li>\n<li>進入後選擇 <strong>Apache</strong> &gt; <strong>Tomcat version Server</strong> </li>\n<li>在 <strong><code>Tomcat installation directory</code></strong> 選擇下載的 Tomcat Server</li>\n<li><strong>JRE 版本</strong>選擇現有的版本</li>\n</ul>\n<h2 id=\"手動下載-amp-掛載-Spring-Framework\"><a href=\"#手動下載-amp-掛載-Spring-Framework\" class=\"headerlink\" title=\"手動下載 &amp; 掛載  Spring Framework\"></a>手動下載 &amp; 掛載  Spring Framework</h2><ul>\n<li>下載網址: <a href=\"https://repo.spring.io/release/org/springframework/spring/\" target=\"_blank\" rel=\"noopener\">https://repo.spring.io/release/org/springframework/spring/</a></li>\n<li>選擇版本</li>\n<li>選擇 <strong>spring-version.RELEASE-dist.zip</strong></li>\n<li>在 <strong>Project Explorer</strong> 選擇設定的 <code>project name</code> ， 右鍵 <code>Bulid Path</code> &gt; <code>Configure Build Path</code></li>\n<li>選擇 <strong>Libraries</strong> &gt; <strong>Add External JARS</strong>，選擇下載好的 <code>Spring Framework</code> &gt; <code>libs</code> 底下所有的 jar檔 </li>\n</ul>\n"},{"title":"git-note","date":"2020-05-01T16:17:01.000Z","_content":"\n#### Git 作業流程\n* Git就是一個大倉庫，它為每個專案去建立一個倉庫，\n* 把每次提交過的訊息儲存起來，當有需要的時候可以提取處來做更改建立新版本\n* 大致分類:\n    * 工作區(Working Directory):\n        * 已建立git 資料夾(git init)\n        * 尚未做任何git動作的區塊\n        * 當 git add \"file name\"指定檔案將會被送進暫存區\n    * 暫存區(Staging Area):\n        * 別稱 index，通常會放置在 .git/index裡\n        * 當 git add 後，會進入到此區\n        * 在提交(commit)之前，所屬版本都是同一個\n        * 此區不會因為\"工作區\"修改而改動，但是會去判別是否有改動過(use \"git status\")\n        * 此區的改動不會去影響已經提交(commit)過的檔案\n        * 當在此區的檔案同樣會有一份在儲存庫(\"Repository\")裡，其目的，是代表此儲存區在\"可提領\"(git reset)狀態，可供編輯\n        * 在提交(commit)之後，此區檔案將被清空，儲存庫的區域將被封裝，打開下一個可用區域\n    * 儲存庫(Repository):\n        * 保存每一次提交過的代碼\n        * 提交一次，就是一個版本\n        * 版本不會被複寫，就算提取(reset)比較早的版本，提交(commit)之後，還是會建立新的版本\n        * 此區以樹狀型式來做儲存分為 \"master\"、\"branch\"\n    * HEAD:\n        *  指標類的物件，用來指向目前在那個版本儲存區(分支)\n\n---\n \n#### --since --until 、--after --before  差在哪?\n查了資料，沒有特別去解釋這部分，好像就是一樣的，既然這樣，為何要多這部分出來\n是因為可以讓查詢變得更細麼?\n\t\n---\n \n#### 何謂CVCS\n**Centralized Version Control Sysyem** 集中式版控(版本控制)管理系統<br>\n把每個版本資料集中在一台 Server上，讓用戶去通過這台 Server去查看\n\n---\n \n#### 何謂DVCS\n**Distributed Version Control System**分散式版控管理系統\n每個 client 都會 clone Server ，把資料從Server 複製一份到本地端<br>\n當 主Server 有問題時，可以藉由 client端的 clone Server 來恢復 Server資料\n\n---\n \n#### Git 儲存方式\n在專案裡， Commit(Version 1) ，執行快照(SnapShot)，<br>\n就像是拍照一樣，去記錄當前檔案的資訊，<br>\n而當下一次的 Commit(Version 2)，執行快照(SnapShot)，<br>\n這時會去判斷 Version 1 裡的檔案是否有被變動過，<br>\n有，進行 Version 2 的快照，<br>\n無，留下 Version 1 快照連結，<br>\n當抓取 Version 2，會透過此連結去抓取 Version 1 的檔案資訊\n\n---\n \n#### Git 的 三態三域\n* 三態， 三種狀態 committed(已提交) 、 modified(已修改) 、 staged(已預存)\n* 三域 ， 三個區域對應三種狀態\n    * 預存區(staging area) - staged:\n        * 又稱index\n        * 是一個資訊檔，專們記錄下一次要commit的檔案資訊\n    * 工作目錄(working area) - modified :\n        * 是從 Git Directory 裡克隆(clone)某一版出來到硬碟裡，目的是要來做修改編輯用的\n    * Git 資料夾(Git Directory) - committed:\n        * commit 後會把資料檔案放入的位置\n        * 放入後將不會再被修改，成為此專案的一個版本\n        * 可以提取但只會用複製的方式去做，並不會改動到資料夾裡的版本\n   \n---\n      \n#### Git 工具\n* git config\n    設定一些組態變數的的地方，這些會儲存到三個地方\n    * /etc/gitconfig\n        * 這裡包含 User 以及 respositores 的資料設定，\n        * 如果輸入 git config --system ，設定就會儲存到這裡\n        * 因為它是系統設定，需要有管理者的權限\n    * ~/.gitconfig or ~/.config/git/config\n        * 這裡是個人化設定，\n        * 只會影響到 user 本身， \n        * 輸入 git config --global ，\n        * 影響到關於此 User 的所有 respositores\n    * config(.git/config)\n        * 這設定是預設選項，放在 Git Directory \n        * 輸入 git config --local  \n        * 可強制讀寫當前的設定\n        * 會影響到的是目前正在使用的 repositore \n    * 由上往下，後來者覆蓋前面的設定，所以優先設定會是 \"config\"\n    * 在Windows 這三部分分別儲存在\n        *  .gitconfig\n            C:\\Users\\UserName\n        *  /etc/gitconfig\n            在 window vista以上 ，則會在  C:\\ProgramData\\Git\n  \n---\n           \n#### Git Status\n在Git 的目錄裡，會先判斷兩種狀態\n* Untracked\n    * 在新加入 or 被移除的 檔案，狀態都是 Untracked，代表目前此檔案不被Git所管，被編輯、移除，Git 都不會偵測到\n    * 也無法復原 Untracked 的檔案\n* Tracked\n    被追蹤中的檔案，會去偵測此檔案目前的狀態，一共有三種狀態\n    *  Unmodified\n        * 此狀態通常會是在，commit 之後，Tracked 的檔案，直接歸到 Unmodified<br>\n        * 從別的 server 上 clone過來的檔案，一開始也會是 Unmodified<br>\n    *  Modified\n        * 只要尚未 commit ，並且在 Tracked 狀態裡，只要改動過檔案，就會被劃分到 Modified\n        * 但改動過的檔案會有一份改動之前的版本留在 Statged\n        * 如果沒有在重新\"git add\"，commit的版本會是改動之前的檔案\n    *  Staged \n        * 此狀態代表尚未 commit ，是下一次 commit的預備區\n        * Untracked 轉移到  Tracked 會直接劃分此區\n        * Modified 的檔案需要重新轉移到這裡，否則 commit的檔案會是修改前的檔案\n```\n打個比方，每一次 commit 都是一集連續劇的其中之一的場景， staged 是舞台 、file 是演員，\n演員要開演上舞台，所以要 (add)，把演員(file)推上舞台，\n但因應不同的需求，演員需要換服裝，所以下場換(Modified)，\n再上場(add)，當這幕結束時，卡(commit)\n```\n\n---\n \n#### 甚麼是 origin/master , origin/HEAD\t\t\n*  origin :\n    > 遠端名，在 remote時會建立，假如 remote時不戴 shortname，就會預設 origin\n*  master:\n    >branch 名，通常在 init 時，就會建一個 master 的 branch\n*  HEAD:\n    >當前已 commit 的指針\n*  幾個和起來的意思就是，\n    * origin/master\n        *  遠端的 master branch\n    * origin/HEAD\n        *  遠端當前 commit \n#### 關於 遠端同步\n*  把本地資料送到 指定的 遠端 git repo\n    *  未同步前\n        *  本地 HEAD 高於 FETCH_HEAD\n    *  HEAD 同步\n        *  git merge FETCH_HEAD\n*  把遠端資料 同步回本地\n    *   git fetch &#60;remote shortname&#62;\n        *  將遠端資料拉回本地\n        *  資料尚未同步，此時遠端  FETCH_HEAD 高於 HEAD\t\t\n    *  HEAD 同步\n        *  git merge FETCH_HEAD\n\n---\n \n#### 關於 FETCH_HEAD & HEAD\n*  FETCH_HEAD\n    *  遠端 repo 的指針\n    *  判斷目前位在哪個 遠端的 branch\n*  HEAD\n    *  本地 repo 的指針\n    *  判斷目前位在哪個 本地的 branch\n        \n>PS.  不是下載後，就算本地，而是要經過 merge 才會讓資料進入本地的 repo\n\n---\n \n#### Err\n*  warning: LF will be replaced by CRLF\n    * 原因:\n        > 因為 Window 的換行符號是 CRLF， git add 時，會去轉換成 LF，在提出(checkout)時，轉回 CRLF\n    > PS. 不希望 checkout時轉換的話，**git config --global core.autocrlf input**(預設為 true)\n        \n> PS. CRLF：ASCII 13, \\r\\n 進行換行，對於 git 中浪費了更多的字元組成換行\t\n    LF：ASCII 10, \\n 僅為換行符號","source":"git-note/index.md","raw":"---\ntitle: git-note\ndate: 2020-05-02 00:17:01\n---\n\n#### Git 作業流程\n* Git就是一個大倉庫，它為每個專案去建立一個倉庫，\n* 把每次提交過的訊息儲存起來，當有需要的時候可以提取處來做更改建立新版本\n* 大致分類:\n    * 工作區(Working Directory):\n        * 已建立git 資料夾(git init)\n        * 尚未做任何git動作的區塊\n        * 當 git add \"file name\"指定檔案將會被送進暫存區\n    * 暫存區(Staging Area):\n        * 別稱 index，通常會放置在 .git/index裡\n        * 當 git add 後，會進入到此區\n        * 在提交(commit)之前，所屬版本都是同一個\n        * 此區不會因為\"工作區\"修改而改動，但是會去判別是否有改動過(use \"git status\")\n        * 此區的改動不會去影響已經提交(commit)過的檔案\n        * 當在此區的檔案同樣會有一份在儲存庫(\"Repository\")裡，其目的，是代表此儲存區在\"可提領\"(git reset)狀態，可供編輯\n        * 在提交(commit)之後，此區檔案將被清空，儲存庫的區域將被封裝，打開下一個可用區域\n    * 儲存庫(Repository):\n        * 保存每一次提交過的代碼\n        * 提交一次，就是一個版本\n        * 版本不會被複寫，就算提取(reset)比較早的版本，提交(commit)之後，還是會建立新的版本\n        * 此區以樹狀型式來做儲存分為 \"master\"、\"branch\"\n    * HEAD:\n        *  指標類的物件，用來指向目前在那個版本儲存區(分支)\n\n---\n \n#### --since --until 、--after --before  差在哪?\n查了資料，沒有特別去解釋這部分，好像就是一樣的，既然這樣，為何要多這部分出來\n是因為可以讓查詢變得更細麼?\n\t\n---\n \n#### 何謂CVCS\n**Centralized Version Control Sysyem** 集中式版控(版本控制)管理系統<br>\n把每個版本資料集中在一台 Server上，讓用戶去通過這台 Server去查看\n\n---\n \n#### 何謂DVCS\n**Distributed Version Control System**分散式版控管理系統\n每個 client 都會 clone Server ，把資料從Server 複製一份到本地端<br>\n當 主Server 有問題時，可以藉由 client端的 clone Server 來恢復 Server資料\n\n---\n \n#### Git 儲存方式\n在專案裡， Commit(Version 1) ，執行快照(SnapShot)，<br>\n就像是拍照一樣，去記錄當前檔案的資訊，<br>\n而當下一次的 Commit(Version 2)，執行快照(SnapShot)，<br>\n這時會去判斷 Version 1 裡的檔案是否有被變動過，<br>\n有，進行 Version 2 的快照，<br>\n無，留下 Version 1 快照連結，<br>\n當抓取 Version 2，會透過此連結去抓取 Version 1 的檔案資訊\n\n---\n \n#### Git 的 三態三域\n* 三態， 三種狀態 committed(已提交) 、 modified(已修改) 、 staged(已預存)\n* 三域 ， 三個區域對應三種狀態\n    * 預存區(staging area) - staged:\n        * 又稱index\n        * 是一個資訊檔，專們記錄下一次要commit的檔案資訊\n    * 工作目錄(working area) - modified :\n        * 是從 Git Directory 裡克隆(clone)某一版出來到硬碟裡，目的是要來做修改編輯用的\n    * Git 資料夾(Git Directory) - committed:\n        * commit 後會把資料檔案放入的位置\n        * 放入後將不會再被修改，成為此專案的一個版本\n        * 可以提取但只會用複製的方式去做，並不會改動到資料夾裡的版本\n   \n---\n      \n#### Git 工具\n* git config\n    設定一些組態變數的的地方，這些會儲存到三個地方\n    * /etc/gitconfig\n        * 這裡包含 User 以及 respositores 的資料設定，\n        * 如果輸入 git config --system ，設定就會儲存到這裡\n        * 因為它是系統設定，需要有管理者的權限\n    * ~/.gitconfig or ~/.config/git/config\n        * 這裡是個人化設定，\n        * 只會影響到 user 本身， \n        * 輸入 git config --global ，\n        * 影響到關於此 User 的所有 respositores\n    * config(.git/config)\n        * 這設定是預設選項，放在 Git Directory \n        * 輸入 git config --local  \n        * 可強制讀寫當前的設定\n        * 會影響到的是目前正在使用的 repositore \n    * 由上往下，後來者覆蓋前面的設定，所以優先設定會是 \"config\"\n    * 在Windows 這三部分分別儲存在\n        *  .gitconfig\n            C:\\Users\\UserName\n        *  /etc/gitconfig\n            在 window vista以上 ，則會在  C:\\ProgramData\\Git\n  \n---\n           \n#### Git Status\n在Git 的目錄裡，會先判斷兩種狀態\n* Untracked\n    * 在新加入 or 被移除的 檔案，狀態都是 Untracked，代表目前此檔案不被Git所管，被編輯、移除，Git 都不會偵測到\n    * 也無法復原 Untracked 的檔案\n* Tracked\n    被追蹤中的檔案，會去偵測此檔案目前的狀態，一共有三種狀態\n    *  Unmodified\n        * 此狀態通常會是在，commit 之後，Tracked 的檔案，直接歸到 Unmodified<br>\n        * 從別的 server 上 clone過來的檔案，一開始也會是 Unmodified<br>\n    *  Modified\n        * 只要尚未 commit ，並且在 Tracked 狀態裡，只要改動過檔案，就會被劃分到 Modified\n        * 但改動過的檔案會有一份改動之前的版本留在 Statged\n        * 如果沒有在重新\"git add\"，commit的版本會是改動之前的檔案\n    *  Staged \n        * 此狀態代表尚未 commit ，是下一次 commit的預備區\n        * Untracked 轉移到  Tracked 會直接劃分此區\n        * Modified 的檔案需要重新轉移到這裡，否則 commit的檔案會是修改前的檔案\n```\n打個比方，每一次 commit 都是一集連續劇的其中之一的場景， staged 是舞台 、file 是演員，\n演員要開演上舞台，所以要 (add)，把演員(file)推上舞台，\n但因應不同的需求，演員需要換服裝，所以下場換(Modified)，\n再上場(add)，當這幕結束時，卡(commit)\n```\n\n---\n \n#### 甚麼是 origin/master , origin/HEAD\t\t\n*  origin :\n    > 遠端名，在 remote時會建立，假如 remote時不戴 shortname，就會預設 origin\n*  master:\n    >branch 名，通常在 init 時，就會建一個 master 的 branch\n*  HEAD:\n    >當前已 commit 的指針\n*  幾個和起來的意思就是，\n    * origin/master\n        *  遠端的 master branch\n    * origin/HEAD\n        *  遠端當前 commit \n#### 關於 遠端同步\n*  把本地資料送到 指定的 遠端 git repo\n    *  未同步前\n        *  本地 HEAD 高於 FETCH_HEAD\n    *  HEAD 同步\n        *  git merge FETCH_HEAD\n*  把遠端資料 同步回本地\n    *   git fetch &#60;remote shortname&#62;\n        *  將遠端資料拉回本地\n        *  資料尚未同步，此時遠端  FETCH_HEAD 高於 HEAD\t\t\n    *  HEAD 同步\n        *  git merge FETCH_HEAD\n\n---\n \n#### 關於 FETCH_HEAD & HEAD\n*  FETCH_HEAD\n    *  遠端 repo 的指針\n    *  判斷目前位在哪個 遠端的 branch\n*  HEAD\n    *  本地 repo 的指針\n    *  判斷目前位在哪個 本地的 branch\n        \n>PS.  不是下載後，就算本地，而是要經過 merge 才會讓資料進入本地的 repo\n\n---\n \n#### Err\n*  warning: LF will be replaced by CRLF\n    * 原因:\n        > 因為 Window 的換行符號是 CRLF， git add 時，會去轉換成 LF，在提出(checkout)時，轉回 CRLF\n    > PS. 不希望 checkout時轉換的話，**git config --global core.autocrlf input**(預設為 true)\n        \n> PS. CRLF：ASCII 13, \\r\\n 進行換行，對於 git 中浪費了更多的字元組成換行\t\n    LF：ASCII 10, \\n 僅為換行符號","updated":"2020-05-01T17:36:33.193Z","path":"git-note/index.html","comments":1,"layout":"page","_id":"ckuy1kd9300115ojtfftk530d","content":"<h4 id=\"Git-作業流程\"><a href=\"#Git-作業流程\" class=\"headerlink\" title=\"Git 作業流程\"></a>Git 作業流程</h4><ul>\n<li>Git就是一個大倉庫，它為每個專案去建立一個倉庫，</li>\n<li>把每次提交過的訊息儲存起來，當有需要的時候可以提取處來做更改建立新版本</li>\n<li>大致分類:<ul>\n<li>工作區(Working Directory):<ul>\n<li>已建立git 資料夾(git init)</li>\n<li>尚未做任何git動作的區塊</li>\n<li>當 git add “file name”指定檔案將會被送進暫存區</li>\n</ul>\n</li>\n<li>暫存區(Staging Area):<ul>\n<li>別稱 index，通常會放置在 .git/index裡</li>\n<li>當 git add 後，會進入到此區</li>\n<li>在提交(commit)之前，所屬版本都是同一個</li>\n<li>此區不會因為”工作區”修改而改動，但是會去判別是否有改動過(use “git status”)</li>\n<li>此區的改動不會去影響已經提交(commit)過的檔案</li>\n<li>當在此區的檔案同樣會有一份在儲存庫(“Repository”)裡，其目的，是代表此儲存區在”可提領”(git reset)狀態，可供編輯</li>\n<li>在提交(commit)之後，此區檔案將被清空，儲存庫的區域將被封裝，打開下一個可用區域</li>\n</ul>\n</li>\n<li>儲存庫(Repository):<ul>\n<li>保存每一次提交過的代碼</li>\n<li>提交一次，就是一個版本</li>\n<li>版本不會被複寫，就算提取(reset)比較早的版本，提交(commit)之後，還是會建立新的版本</li>\n<li>此區以樹狀型式來做儲存分為 “master”、”branch”</li>\n</ul>\n</li>\n<li>HEAD:<ul>\n<li>指標類的物件，用來指向目前在那個版本儲存區(分支)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"–since-–until-、–after-–before-差在哪\"><a href=\"#–since-–until-、–after-–before-差在哪\" class=\"headerlink\" title=\"–since –until 、–after –before  差在哪?\"></a>–since –until 、–after –before  差在哪?</h4><p>查了資料，沒有特別去解釋這部分，好像就是一樣的，既然這樣，為何要多這部分出來<br>是因為可以讓查詢變得更細麼?</p>\n<hr>\n<h4 id=\"何謂CVCS\"><a href=\"#何謂CVCS\" class=\"headerlink\" title=\"何謂CVCS\"></a>何謂CVCS</h4><p><strong>Centralized Version Control Sysyem</strong> 集中式版控(版本控制)管理系統<br><br>把每個版本資料集中在一台 Server上，讓用戶去通過這台 Server去查看</p>\n<hr>\n<h4 id=\"何謂DVCS\"><a href=\"#何謂DVCS\" class=\"headerlink\" title=\"何謂DVCS\"></a>何謂DVCS</h4><p><strong>Distributed Version Control System</strong>分散式版控管理系統<br>每個 client 都會 clone Server ，把資料從Server 複製一份到本地端<br><br>當 主Server 有問題時，可以藉由 client端的 clone Server 來恢復 Server資料</p>\n<hr>\n<h4 id=\"Git-儲存方式\"><a href=\"#Git-儲存方式\" class=\"headerlink\" title=\"Git 儲存方式\"></a>Git 儲存方式</h4><p>在專案裡， Commit(Version 1) ，執行快照(SnapShot)，<br><br>就像是拍照一樣，去記錄當前檔案的資訊，<br><br>而當下一次的 Commit(Version 2)，執行快照(SnapShot)，<br><br>這時會去判斷 Version 1 裡的檔案是否有被變動過，<br><br>有，進行 Version 2 的快照，<br><br>無，留下 Version 1 快照連結，<br><br>當抓取 Version 2，會透過此連結去抓取 Version 1 的檔案資訊</p>\n<hr>\n<h4 id=\"Git-的-三態三域\"><a href=\"#Git-的-三態三域\" class=\"headerlink\" title=\"Git 的 三態三域\"></a>Git 的 三態三域</h4><ul>\n<li>三態， 三種狀態 committed(已提交) 、 modified(已修改) 、 staged(已預存)</li>\n<li>三域 ， 三個區域對應三種狀態<ul>\n<li>預存區(staging area) - staged:<ul>\n<li>又稱index</li>\n<li>是一個資訊檔，專們記錄下一次要commit的檔案資訊</li>\n</ul>\n</li>\n<li>工作目錄(working area) - modified :<ul>\n<li>是從 Git Directory 裡克隆(clone)某一版出來到硬碟裡，目的是要來做修改編輯用的</li>\n</ul>\n</li>\n<li>Git 資料夾(Git Directory) - committed:<ul>\n<li>commit 後會把資料檔案放入的位置</li>\n<li>放入後將不會再被修改，成為此專案的一個版本</li>\n<li>可以提取但只會用複製的方式去做，並不會改動到資料夾裡的版本</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"Git-工具\"><a href=\"#Git-工具\" class=\"headerlink\" title=\"Git 工具\"></a>Git 工具</h4><ul>\n<li>git config<br>  設定一些組態變數的的地方，這些會儲存到三個地方<ul>\n<li>/etc/gitconfig<ul>\n<li>這裡包含 User 以及 respositores 的資料設定，</li>\n<li>如果輸入 git config –system ，設定就會儲存到這裡</li>\n<li>因為它是系統設定，需要有管理者的權限</li>\n</ul>\n</li>\n<li>~/.gitconfig or ~/.config/git/config<ul>\n<li>這裡是個人化設定，</li>\n<li>只會影響到 user 本身， </li>\n<li>輸入 git config –global ，</li>\n<li>影響到關於此 User 的所有 respositores</li>\n</ul>\n</li>\n<li>config(.git/config)<ul>\n<li>這設定是預設選項，放在 Git Directory </li>\n<li>輸入 git config –local  </li>\n<li>可強制讀寫當前的設定</li>\n<li>會影響到的是目前正在使用的 repositore </li>\n</ul>\n</li>\n<li>由上往下，後來者覆蓋前面的設定，所以優先設定會是 “config”</li>\n<li>在Windows 這三部分分別儲存在<ul>\n<li>.gitconfig<br> C:\\Users\\UserName</li>\n<li>/etc/gitconfig<br> 在 window vista以上 ，則會在  C:\\ProgramData\\Git</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"Git-Status\"><a href=\"#Git-Status\" class=\"headerlink\" title=\"Git Status\"></a>Git Status</h4><p>在Git 的目錄裡，會先判斷兩種狀態</p>\n<ul>\n<li>Untracked<ul>\n<li>在新加入 or 被移除的 檔案，狀態都是 Untracked，代表目前此檔案不被Git所管，被編輯、移除，Git 都不會偵測到</li>\n<li>也無法復原 Untracked 的檔案</li>\n</ul>\n</li>\n<li>Tracked<br>  被追蹤中的檔案，會去偵測此檔案目前的狀態，一共有三種狀態<ul>\n<li>Unmodified<ul>\n<li>此狀態通常會是在，commit 之後，Tracked 的檔案，直接歸到 Unmodified<br></li>\n<li>從別的 server 上 clone過來的檔案，一開始也會是 Unmodified<br></li>\n</ul>\n</li>\n<li>Modified<ul>\n<li>只要尚未 commit ，並且在 Tracked 狀態裡，只要改動過檔案，就會被劃分到 Modified</li>\n<li>但改動過的檔案會有一份改動之前的版本留在 Statged</li>\n<li>如果沒有在重新”git add”，commit的版本會是改動之前的檔案</li>\n</ul>\n</li>\n<li>Staged <ul>\n<li>此狀態代表尚未 commit ，是下一次 commit的預備區</li>\n<li>Untracked 轉移到  Tracked 會直接劃分此區</li>\n<li>Modified 的檔案需要重新轉移到這裡，否則 commit的檔案會是修改前的檔案<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打個比方，每一次 commit 都是一集連續劇的其中之一的場景， staged 是舞台 、file 是演員，</span><br><span class=\"line\">演員要開演上舞台，所以要 (add)，把演員(file)推上舞台，</span><br><span class=\"line\">但因應不同的需求，演員需要換服裝，所以下場換(Modified)，</span><br><span class=\"line\">再上場(add)，當這幕結束時，卡(commit)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"甚麼是-origin-master-origin-HEAD\"><a href=\"#甚麼是-origin-master-origin-HEAD\" class=\"headerlink\" title=\"甚麼是 origin/master , origin/HEAD\"></a>甚麼是 origin/master , origin/HEAD</h4><ul>\n<li>origin :<blockquote>\n<p>遠端名，在 remote時會建立，假如 remote時不戴 shortname，就會預設 origin</p>\n</blockquote>\n</li>\n<li>master:<blockquote>\n<p>branch 名，通常在 init 時，就會建一個 master 的 branch</p>\n</blockquote>\n</li>\n<li>HEAD:<blockquote>\n<p>當前已 commit 的指針</p>\n</blockquote>\n</li>\n<li>幾個和起來的意思就是，<ul>\n<li>origin/master<ul>\n<li>遠端的 master branch</li>\n</ul>\n</li>\n<li>origin/HEAD<ul>\n<li>遠端當前 commit <h4 id=\"關於-遠端同步\"><a href=\"#關於-遠端同步\" class=\"headerlink\" title=\"關於 遠端同步\"></a>關於 遠端同步</h4></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>把本地資料送到 指定的 遠端 git repo<ul>\n<li>未同步前<ul>\n<li>本地 HEAD 高於 FETCH_HEAD</li>\n</ul>\n</li>\n<li>HEAD 同步<ul>\n<li>git merge FETCH_HEAD</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>把遠端資料 同步回本地<ul>\n<li>git fetch &#60;remote shortname&#62;<ul>\n<li>將遠端資料拉回本地</li>\n<li>資料尚未同步，此時遠端  FETCH_HEAD 高於 HEAD        </li>\n</ul>\n</li>\n<li>HEAD 同步<ul>\n<li>git merge FETCH_HEAD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"關於-FETCH-HEAD-amp-HEAD\"><a href=\"#關於-FETCH-HEAD-amp-HEAD\" class=\"headerlink\" title=\"關於 FETCH_HEAD &amp; HEAD\"></a>關於 FETCH_HEAD &amp; HEAD</h4><ul>\n<li>FETCH_HEAD<ul>\n<li>遠端 repo 的指針</li>\n<li>判斷目前位在哪個 遠端的 branch</li>\n</ul>\n</li>\n<li>HEAD<ul>\n<li>本地 repo 的指針</li>\n<li>判斷目前位在哪個 本地的 branch</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>PS.  不是下載後，就算本地，而是要經過 merge 才會讓資料進入本地的 repo</p>\n</blockquote>\n<hr>\n<h4 id=\"Err\"><a href=\"#Err\" class=\"headerlink\" title=\"Err\"></a>Err</h4><ul>\n<li>warning: LF will be replaced by CRLF<ul>\n<li>原因:<blockquote>\n<p>因為 Window 的換行符號是 CRLF， git add 時，會去轉換成 LF，在提出(checkout)時，轉回 CRLF<br>PS. 不希望 checkout時轉換的話，<strong>git config –global core.autocrlf input</strong>(預設為 true)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>PS. CRLF：ASCII 13, \\r\\n 進行換行，對於 git 中浪費了更多的字元組成換行<br>    LF：ASCII 10, \\n 僅為換行符號</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Git-作業流程\"><a href=\"#Git-作業流程\" class=\"headerlink\" title=\"Git 作業流程\"></a>Git 作業流程</h4><ul>\n<li>Git就是一個大倉庫，它為每個專案去建立一個倉庫，</li>\n<li>把每次提交過的訊息儲存起來，當有需要的時候可以提取處來做更改建立新版本</li>\n<li>大致分類:<ul>\n<li>工作區(Working Directory):<ul>\n<li>已建立git 資料夾(git init)</li>\n<li>尚未做任何git動作的區塊</li>\n<li>當 git add “file name”指定檔案將會被送進暫存區</li>\n</ul>\n</li>\n<li>暫存區(Staging Area):<ul>\n<li>別稱 index，通常會放置在 .git/index裡</li>\n<li>當 git add 後，會進入到此區</li>\n<li>在提交(commit)之前，所屬版本都是同一個</li>\n<li>此區不會因為”工作區”修改而改動，但是會去判別是否有改動過(use “git status”)</li>\n<li>此區的改動不會去影響已經提交(commit)過的檔案</li>\n<li>當在此區的檔案同樣會有一份在儲存庫(“Repository”)裡，其目的，是代表此儲存區在”可提領”(git reset)狀態，可供編輯</li>\n<li>在提交(commit)之後，此區檔案將被清空，儲存庫的區域將被封裝，打開下一個可用區域</li>\n</ul>\n</li>\n<li>儲存庫(Repository):<ul>\n<li>保存每一次提交過的代碼</li>\n<li>提交一次，就是一個版本</li>\n<li>版本不會被複寫，就算提取(reset)比較早的版本，提交(commit)之後，還是會建立新的版本</li>\n<li>此區以樹狀型式來做儲存分為 “master”、”branch”</li>\n</ul>\n</li>\n<li>HEAD:<ul>\n<li>指標類的物件，用來指向目前在那個版本儲存區(分支)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"–since-–until-、–after-–before-差在哪\"><a href=\"#–since-–until-、–after-–before-差在哪\" class=\"headerlink\" title=\"–since –until 、–after –before  差在哪?\"></a>–since –until 、–after –before  差在哪?</h4><p>查了資料，沒有特別去解釋這部分，好像就是一樣的，既然這樣，為何要多這部分出來<br>是因為可以讓查詢變得更細麼?</p>\n<hr>\n<h4 id=\"何謂CVCS\"><a href=\"#何謂CVCS\" class=\"headerlink\" title=\"何謂CVCS\"></a>何謂CVCS</h4><p><strong>Centralized Version Control Sysyem</strong> 集中式版控(版本控制)管理系統<br><br>把每個版本資料集中在一台 Server上，讓用戶去通過這台 Server去查看</p>\n<hr>\n<h4 id=\"何謂DVCS\"><a href=\"#何謂DVCS\" class=\"headerlink\" title=\"何謂DVCS\"></a>何謂DVCS</h4><p><strong>Distributed Version Control System</strong>分散式版控管理系統<br>每個 client 都會 clone Server ，把資料從Server 複製一份到本地端<br><br>當 主Server 有問題時，可以藉由 client端的 clone Server 來恢復 Server資料</p>\n<hr>\n<h4 id=\"Git-儲存方式\"><a href=\"#Git-儲存方式\" class=\"headerlink\" title=\"Git 儲存方式\"></a>Git 儲存方式</h4><p>在專案裡， Commit(Version 1) ，執行快照(SnapShot)，<br><br>就像是拍照一樣，去記錄當前檔案的資訊，<br><br>而當下一次的 Commit(Version 2)，執行快照(SnapShot)，<br><br>這時會去判斷 Version 1 裡的檔案是否有被變動過，<br><br>有，進行 Version 2 的快照，<br><br>無，留下 Version 1 快照連結，<br><br>當抓取 Version 2，會透過此連結去抓取 Version 1 的檔案資訊</p>\n<hr>\n<h4 id=\"Git-的-三態三域\"><a href=\"#Git-的-三態三域\" class=\"headerlink\" title=\"Git 的 三態三域\"></a>Git 的 三態三域</h4><ul>\n<li>三態， 三種狀態 committed(已提交) 、 modified(已修改) 、 staged(已預存)</li>\n<li>三域 ， 三個區域對應三種狀態<ul>\n<li>預存區(staging area) - staged:<ul>\n<li>又稱index</li>\n<li>是一個資訊檔，專們記錄下一次要commit的檔案資訊</li>\n</ul>\n</li>\n<li>工作目錄(working area) - modified :<ul>\n<li>是從 Git Directory 裡克隆(clone)某一版出來到硬碟裡，目的是要來做修改編輯用的</li>\n</ul>\n</li>\n<li>Git 資料夾(Git Directory) - committed:<ul>\n<li>commit 後會把資料檔案放入的位置</li>\n<li>放入後將不會再被修改，成為此專案的一個版本</li>\n<li>可以提取但只會用複製的方式去做，並不會改動到資料夾裡的版本</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"Git-工具\"><a href=\"#Git-工具\" class=\"headerlink\" title=\"Git 工具\"></a>Git 工具</h4><ul>\n<li>git config<br>  設定一些組態變數的的地方，這些會儲存到三個地方<ul>\n<li>/etc/gitconfig<ul>\n<li>這裡包含 User 以及 respositores 的資料設定，</li>\n<li>如果輸入 git config –system ，設定就會儲存到這裡</li>\n<li>因為它是系統設定，需要有管理者的權限</li>\n</ul>\n</li>\n<li>~/.gitconfig or ~/.config/git/config<ul>\n<li>這裡是個人化設定，</li>\n<li>只會影響到 user 本身， </li>\n<li>輸入 git config –global ，</li>\n<li>影響到關於此 User 的所有 respositores</li>\n</ul>\n</li>\n<li>config(.git/config)<ul>\n<li>這設定是預設選項，放在 Git Directory </li>\n<li>輸入 git config –local  </li>\n<li>可強制讀寫當前的設定</li>\n<li>會影響到的是目前正在使用的 repositore </li>\n</ul>\n</li>\n<li>由上往下，後來者覆蓋前面的設定，所以優先設定會是 “config”</li>\n<li>在Windows 這三部分分別儲存在<ul>\n<li>.gitconfig<br> C:\\Users\\UserName</li>\n<li>/etc/gitconfig<br> 在 window vista以上 ，則會在  C:\\ProgramData\\Git</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"Git-Status\"><a href=\"#Git-Status\" class=\"headerlink\" title=\"Git Status\"></a>Git Status</h4><p>在Git 的目錄裡，會先判斷兩種狀態</p>\n<ul>\n<li>Untracked<ul>\n<li>在新加入 or 被移除的 檔案，狀態都是 Untracked，代表目前此檔案不被Git所管，被編輯、移除，Git 都不會偵測到</li>\n<li>也無法復原 Untracked 的檔案</li>\n</ul>\n</li>\n<li>Tracked<br>  被追蹤中的檔案，會去偵測此檔案目前的狀態，一共有三種狀態<ul>\n<li>Unmodified<ul>\n<li>此狀態通常會是在，commit 之後，Tracked 的檔案，直接歸到 Unmodified<br></li>\n<li>從別的 server 上 clone過來的檔案，一開始也會是 Unmodified<br></li>\n</ul>\n</li>\n<li>Modified<ul>\n<li>只要尚未 commit ，並且在 Tracked 狀態裡，只要改動過檔案，就會被劃分到 Modified</li>\n<li>但改動過的檔案會有一份改動之前的版本留在 Statged</li>\n<li>如果沒有在重新”git add”，commit的版本會是改動之前的檔案</li>\n</ul>\n</li>\n<li>Staged <ul>\n<li>此狀態代表尚未 commit ，是下一次 commit的預備區</li>\n<li>Untracked 轉移到  Tracked 會直接劃分此區</li>\n<li>Modified 的檔案需要重新轉移到這裡，否則 commit的檔案會是修改前的檔案<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打個比方，每一次 commit 都是一集連續劇的其中之一的場景， staged 是舞台 、file 是演員，</span><br><span class=\"line\">演員要開演上舞台，所以要 (add)，把演員(file)推上舞台，</span><br><span class=\"line\">但因應不同的需求，演員需要換服裝，所以下場換(Modified)，</span><br><span class=\"line\">再上場(add)，當這幕結束時，卡(commit)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"甚麼是-origin-master-origin-HEAD\"><a href=\"#甚麼是-origin-master-origin-HEAD\" class=\"headerlink\" title=\"甚麼是 origin/master , origin/HEAD\"></a>甚麼是 origin/master , origin/HEAD</h4><ul>\n<li>origin :<blockquote>\n<p>遠端名，在 remote時會建立，假如 remote時不戴 shortname，就會預設 origin</p>\n</blockquote>\n</li>\n<li>master:<blockquote>\n<p>branch 名，通常在 init 時，就會建一個 master 的 branch</p>\n</blockquote>\n</li>\n<li>HEAD:<blockquote>\n<p>當前已 commit 的指針</p>\n</blockquote>\n</li>\n<li>幾個和起來的意思就是，<ul>\n<li>origin/master<ul>\n<li>遠端的 master branch</li>\n</ul>\n</li>\n<li>origin/HEAD<ul>\n<li>遠端當前 commit <h4 id=\"關於-遠端同步\"><a href=\"#關於-遠端同步\" class=\"headerlink\" title=\"關於 遠端同步\"></a>關於 遠端同步</h4></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>把本地資料送到 指定的 遠端 git repo<ul>\n<li>未同步前<ul>\n<li>本地 HEAD 高於 FETCH_HEAD</li>\n</ul>\n</li>\n<li>HEAD 同步<ul>\n<li>git merge FETCH_HEAD</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>把遠端資料 同步回本地<ul>\n<li>git fetch &#60;remote shortname&#62;<ul>\n<li>將遠端資料拉回本地</li>\n<li>資料尚未同步，此時遠端  FETCH_HEAD 高於 HEAD        </li>\n</ul>\n</li>\n<li>HEAD 同步<ul>\n<li>git merge FETCH_HEAD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"關於-FETCH-HEAD-amp-HEAD\"><a href=\"#關於-FETCH-HEAD-amp-HEAD\" class=\"headerlink\" title=\"關於 FETCH_HEAD &amp; HEAD\"></a>關於 FETCH_HEAD &amp; HEAD</h4><ul>\n<li>FETCH_HEAD<ul>\n<li>遠端 repo 的指針</li>\n<li>判斷目前位在哪個 遠端的 branch</li>\n</ul>\n</li>\n<li>HEAD<ul>\n<li>本地 repo 的指針</li>\n<li>判斷目前位在哪個 本地的 branch</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>PS.  不是下載後，就算本地，而是要經過 merge 才會讓資料進入本地的 repo</p>\n</blockquote>\n<hr>\n<h4 id=\"Err\"><a href=\"#Err\" class=\"headerlink\" title=\"Err\"></a>Err</h4><ul>\n<li>warning: LF will be replaced by CRLF<ul>\n<li>原因:<blockquote>\n<p>因為 Window 的換行符號是 CRLF， git add 時，會去轉換成 LF，在提出(checkout)時，轉回 CRLF<br>PS. 不希望 checkout時轉換的話，<strong>git config –global core.autocrlf input</strong>(預設為 true)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>PS. CRLF：ASCII 13, \\r\\n 進行換行，對於 git 中浪費了更多的字元組成換行<br>    LF：ASCII 10, \\n 僅為換行符號</p>\n</blockquote>\n"},{"title":"JAVA-JPA-Setting","date":"2020-02-25T17:39:58.000Z","_content":"\n## JPA (Java Persistence API)\n\n* Java 持久化 API\n* 是 Java 對 **ORM(Object-Relation Mapping)** 做出的規範，一個`介面(Interface)`\n* 讓 `Model class`跟 `DB Table` 做映射,取代直接跟 DB要資料\n* 以 **hibernate**實作 JPA\n* 設定 `persistence.xml`\n    ```xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <persistence version=\"1.0\" \n    xmlns=\"http://java.sun.com/xml/ns/persistence\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n    <persistence-unit name=\"ContactPU\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n        <class>Contact.Contact</class>\n        <properties>\n        <property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.NoCacheProvider\"/>\n        <property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"hibernate.connection.url\" value=\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"/>\n        <property name=\"hibernate.connection.username\" value=\"資料庫帳號\"/>\n        <property name=\"hibernate.connection.password\" value=\"資料庫密碼\"/>\n        </properties>\n    </persistence-unit>\n    </persistence>\n    ```\n* 建立 Table 對 物件的映射\n    ```java\n    @Entity\n    public class Customer {\n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        private Long id;\n        private String name;\n        private String email;\n        private String address;\n        \n        protected Customer() {\n            \n        }\n        \n        protected Customer(String name,String email,String address) {\n            this.name = name;\n            this.address = address;\n            this.email = email;\t\t\n        }\n        \n        public Long getId() {\n            return this.id;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n        public void setName(String name) {\n            this.name=name;\n        }\n        \n        public String getEmail() {\n            return this.email;\n        }\n        public void setEmail(String email) {\n            this.email=email;\n        }\n        \n        public String getAddress() {\n            return this.address;\n        }\n        public void setAddress(String address) {\n            this.address=address;\n        }\n\n    }\n    ```\n* 建立 `CrudRepository`\n    ```java\n    public interface CustomerRepository extends CrudRepository<Customer, Long>{\n\n        //要做複雜的 Query\n        @Query(value = \n                \"SELECT c \"\n                + \"FROM Customer c \"\n                + \"WHERE c.name LIKE '%' || :keyword || '%'\"\n                + \" OR c.email LIKE '%' || :keyword || '%'\"\n                + \" OR c.address LIKE '%' || :keyword || '%'\")\n        public List<Customer> search(@Param(\"keyword\") String keyword);\n    }\n    ```\n* 建立 `Service`\n\n    ```java\n\n    @Service\n    @Transactional\n    public class CustomerService {\n        @Autowired CustomerRepository repo;\n        \n        public void save(Customer customer) {\n            repo.save(customer);\t\t\n        }\n        \n        public List<Customer> listAll() {\n            return (List<Customer>)repo.findAll();\t\t\n        }\n        \n        public Customer get(Long Id) {\n            return repo.findById(Id).get();\n        }\n        \n        public void delete(Long Id) {\n            repo.deleteById(Id);\n        }\n        \n        public List<Customer> search(String keyword) {\n            return repo.search(keyword);\n        }\n    }\n    ```\n\n ","source":"java-jpa-setting/index.md","raw":"---\ntitle: JAVA-JPA-Setting\ndate: 2020-02-26 01:39:58\n---\n\n## JPA (Java Persistence API)\n\n* Java 持久化 API\n* 是 Java 對 **ORM(Object-Relation Mapping)** 做出的規範，一個`介面(Interface)`\n* 讓 `Model class`跟 `DB Table` 做映射,取代直接跟 DB要資料\n* 以 **hibernate**實作 JPA\n* 設定 `persistence.xml`\n    ```xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <persistence version=\"1.0\" \n    xmlns=\"http://java.sun.com/xml/ns/persistence\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n    <persistence-unit name=\"ContactPU\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n        <class>Contact.Contact</class>\n        <properties>\n        <property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.NoCacheProvider\"/>\n        <property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"hibernate.connection.url\" value=\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"/>\n        <property name=\"hibernate.connection.username\" value=\"資料庫帳號\"/>\n        <property name=\"hibernate.connection.password\" value=\"資料庫密碼\"/>\n        </properties>\n    </persistence-unit>\n    </persistence>\n    ```\n* 建立 Table 對 物件的映射\n    ```java\n    @Entity\n    public class Customer {\n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        private Long id;\n        private String name;\n        private String email;\n        private String address;\n        \n        protected Customer() {\n            \n        }\n        \n        protected Customer(String name,String email,String address) {\n            this.name = name;\n            this.address = address;\n            this.email = email;\t\t\n        }\n        \n        public Long getId() {\n            return this.id;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n        public void setName(String name) {\n            this.name=name;\n        }\n        \n        public String getEmail() {\n            return this.email;\n        }\n        public void setEmail(String email) {\n            this.email=email;\n        }\n        \n        public String getAddress() {\n            return this.address;\n        }\n        public void setAddress(String address) {\n            this.address=address;\n        }\n\n    }\n    ```\n* 建立 `CrudRepository`\n    ```java\n    public interface CustomerRepository extends CrudRepository<Customer, Long>{\n\n        //要做複雜的 Query\n        @Query(value = \n                \"SELECT c \"\n                + \"FROM Customer c \"\n                + \"WHERE c.name LIKE '%' || :keyword || '%'\"\n                + \" OR c.email LIKE '%' || :keyword || '%'\"\n                + \" OR c.address LIKE '%' || :keyword || '%'\")\n        public List<Customer> search(@Param(\"keyword\") String keyword);\n    }\n    ```\n* 建立 `Service`\n\n    ```java\n\n    @Service\n    @Transactional\n    public class CustomerService {\n        @Autowired CustomerRepository repo;\n        \n        public void save(Customer customer) {\n            repo.save(customer);\t\t\n        }\n        \n        public List<Customer> listAll() {\n            return (List<Customer>)repo.findAll();\t\t\n        }\n        \n        public Customer get(Long Id) {\n            return repo.findById(Id).get();\n        }\n        \n        public void delete(Long Id) {\n            repo.deleteById(Id);\n        }\n        \n        public List<Customer> search(String keyword) {\n            return repo.search(keyword);\n        }\n    }\n    ```\n\n ","updated":"2020-02-26T20:32:55.969Z","path":"java-jpa-setting/index.html","comments":1,"layout":"page","_id":"ckuy1kd9300135ojt4ec10tkr","content":"<h2 id=\"JPA-Java-Persistence-API\"><a href=\"#JPA-Java-Persistence-API\" class=\"headerlink\" title=\"JPA (Java Persistence API)\"></a>JPA (Java Persistence API)</h2><ul>\n<li><p>Java 持久化 API</p>\n</li>\n<li><p>是 Java 對 <strong>ORM(Object-Relation Mapping)</strong> 做出的規範，一個<code>介面(Interface)</code></p>\n</li>\n<li><p>讓 <code>Model class</code>跟 <code>DB Table</code> 做映射,取代直接跟 DB要資料</p>\n</li>\n<li><p>以 <strong>hibernate</strong>實作 JPA</p>\n</li>\n<li><p>設定 <code>persistence.xml</code></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence-unit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ContactPU\"</span> <span class=\"attr\">transaction-type</span>=<span class=\"string\">\"RESOURCE_LOCAL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span>&gt;</span>Contact.Contact<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.cache.NoCacheProvider\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫帳號\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫密碼\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence-unit</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立 Table 對 物件的映射</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">(String name,String email,String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email=email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address=address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>CrudRepository</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Customer</span>, <span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要做複雜的 Query</span></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(value = </span><br><span class=\"line\">            <span class=\"string\">\"SELECT c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"FROM Customer c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"WHERE c.name LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.email LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.address LIKE '%' || :keyword || '%'\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(@Param(<span class=\"string\">\"keyword\"</span>)</span> String keyword)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>Service</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> CustomerRepository repo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        repo.save(customer);\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (List&lt;Customer&gt;)repo.findAll();\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Customer <span class=\"title\">get</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.findById(Id).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        repo.deleteById(Id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(String keyword)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.search(keyword);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JPA-Java-Persistence-API\"><a href=\"#JPA-Java-Persistence-API\" class=\"headerlink\" title=\"JPA (Java Persistence API)\"></a>JPA (Java Persistence API)</h2><ul>\n<li><p>Java 持久化 API</p>\n</li>\n<li><p>是 Java 對 <strong>ORM(Object-Relation Mapping)</strong> 做出的規範，一個<code>介面(Interface)</code></p>\n</li>\n<li><p>讓 <code>Model class</code>跟 <code>DB Table</code> 做映射,取代直接跟 DB要資料</p>\n</li>\n<li><p>以 <strong>hibernate</strong>實作 JPA</p>\n</li>\n<li><p>設定 <code>persistence.xml</code></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence-unit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ContactPU\"</span> <span class=\"attr\">transaction-type</span>=<span class=\"string\">\"RESOURCE_LOCAL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span>&gt;</span>Contact.Contact<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.cache.NoCacheProvider\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫帳號\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫密碼\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence-unit</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立 Table 對 物件的映射</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">(String name,String email,String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email=email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address=address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>CrudRepository</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Customer</span>, <span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要做複雜的 Query</span></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(value = </span><br><span class=\"line\">            <span class=\"string\">\"SELECT c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"FROM Customer c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"WHERE c.name LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.email LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.address LIKE '%' || :keyword || '%'\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(@Param(<span class=\"string\">\"keyword\"</span>)</span> String keyword)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>Service</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> CustomerRepository repo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        repo.save(customer);\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (List&lt;Customer&gt;)repo.findAll();\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Customer <span class=\"title\">get</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.findById(Id).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        repo.deleteById(Id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(String keyword)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.search(keyword);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"git-command-note","date":"2020-05-01T16:16:49.000Z","_content":"\n\n## Git 指令\n#### git init\n在指定資料夾初始化 git，建立 .git (隱藏的)資料夾\n\n---\n####  git status\n檢視目前 git資料夾的狀態，分為:\t\n* Changes to be commited:\n> 以追蹤，待上傳檔案\n* Changes not staged for commit:\n> 以追蹤檔案，但修改過\n* Untracked files:\n> 尚未追蹤的檔案\n* 額外指令: \n> -s:\n* 以一行來顯示目前每個檔案狀態\n>EX: \n>> AM UnTrackedFile.txt\n<br>PS. AM表示兩個區域範圍\n* 左邊是 Stage(預存區)，右邊是 Working Directory\n    * A = Add\n    * M = Modify\n    * ? = UnTracked\n\t\t\t\t\n\n---\n\n####  git add\n把指定資料加入暫存區 EX: git add \"file name\"\n指令: \n* git add . : \n> 把目前所在位置包含子目錄全加進暫存區\n* git add all :\n> 把目前專案所有檔案加入暫存區\n\n---\n \t\t\t\n####  git commit\n提交暫存區檔案，讓資料可以儲存讓git管理\n* git commit -m \"commit info\"<----添加此次上傳註解\n* 無註解的話，會跑出編輯視窗叫你填寫\n    * window:預設編輯器\n    * linux:vim\n* 不需要註解:\n    git commit --allow-empty -m \"\"\n* 額外指令:\n    1. -a:\n        直接忽略git add，把所有檔案直接提交到 staging Area\n    2. --amend\n        1. 修改上一次的commit資料\n\n---\n \t\n####  git log\n* 檢視提交紀錄\n* 會有的資訊:\n    * commit編號(亂碼\"Secure Hash Algorithm\")，假如目前 HEAD在這裡的話會顯示(HEAD -> master)\n    * Author 作者(E-mail)\n    * 日期\n    * 註解\n\t\t\n---\n \t\n* 額外指令:\n    * --oneline 把每筆資料，以一行來顯示\n    >commit編號(7-8碼) HEAD是否在這 註解&#60;br>\n    >f9a2f8d (HEAD -> master) Test Commit 20181105_12:35\n    \n    * --graph 把目前commit的資料以樹狀圖表示\n    \n    * --author=\"name\" 尋找作者\n    \n    * --grep=\"XXX\" 尋找commit的註解裡包含的字\n    \n    * -S=\"關鍵字\" 尋找檔案內容裡包含關鍵字\n    \n    * --since --until 查詢時間內的檔案，從日期~時間\n    * --after --before 同上\n    \n    * -p or --patch\n    ```\n    顯示每次 commit 的跟上一次commit的差別 & 修改的內容 ，\n    後面會顯示 diff的內容，\n    可以多加 -p -數量，\n    決定要顯示幾筆，沒加就是全部\n    ```\n    * --stat\n    ```\n    在顯示每筆commit的最後都會有修改的統計\n    commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -> master, origin/master,origin/HEAD)\n    Author: Scott Chacon <schacon@gmail.com>\n    Date:   Mon Mar 17 21:52:11 2008 -0700\n\n        changed the verison number\t\t\t\t\t<---備註\n\n        Rakefile | 2 +-\t\t\t\t\t\t\t\t<---修改的檔案以及修改動作 +是增加 -是減少\n        1 file changed, 1 insertion(+), 1 deletion(-)  <---統計\n    ```\n    * --pretty\n    > 更換顯示紀錄格式\n    ```\n    EX:\n    --pretty=oneline\n        以一行解決一筆顯示\n    --pretty=format:\"%h - %an, %ar : %s\" (Commit hash)-(Author name),(Author date, relative):(Subject)\n        自訂顯示格式\n    ```\n  \n---\n \t\n####   git rm\n刪除在管檔案\n* 已有下指令 **EX: add or modified** 尚未commit必須先做完，否則會出現 error\n    * error: the following file has changes staged in the index:\n    * error: the following file has local modifications:\n* 未託管(Untracked)檔案無法用此指令，否則會出現 error\n    * fatal: pathspec 'UnTrackedFile.txt' did not match any files\n* 刪除在 git status會顯示 **deleted:    FileName**\n> 並非未刪除，是還沒commit做好這次的紀錄\n* 額外指令:\n    * --cached\n    > 在暫存區時，退回託管狀態，變成未託管(Untracked)\n> PS. 此命令無法影響到儲存庫(Repository)\n\n####  git diff\n判斷被託管的檔案差異性\n```\nL:\\Git_Work\\Git_Test_20181102>git diff\ndiff --git a/UnTrackedFile.txt b/UnTrackedFile.txt\nindex 65ff6f9..3b01642 100644\n--- a/UnTrackedFile.txt <--原本\n+++ b/UnTrackedFile.txt <---修改\n@@ -1,3 +1,2 @@\n```\n* 當檔案被修改後，被修改的檔案會被移到 Modified，並且保留原本檔案在 staged\n* 此指令就是會去判斷這兩個檔案的內容差異\n* 兩個數字為一組 - 為舊檔 +為新檔\n* 數字是變化起始跟結尾 \n    * `-1,3` 就是 舊檔 第1行 - 第3行\n    * `+1,2` 就是 新檔 第1行 - 第2行\n* 額外指令:\n    * --staged\n    * --cached\n       *  會比較上次 commit的檔案跟 目前在 staged的檔案\n\n---\n \t\t\n####  git mv\n* 移動檔案 or 重新命名\n```\nEX:\n    git mv FileName NewFileName<---重新命名\n    git mv FileName NewAddress/FileName <---移動\n```\n\n\n---\n \t\t\n\n####  git reset &#60;commit id>\n退回之前的狀態 or 版本\n* 作用於單獨檔案 --> 退回指定檔案 ，狀態變至(UnTracked)\n限定在 Working tree，當下的 commit\n* 作用於版本 \n    * --SOFT <指定版本>\n        > 退到 added\n    * --MIXED <指定版本>\n        > 退到 UnTracked\n    * --HARD <指定版本>\n        > 檔案完全恢復成指定版本\n    *  沒有指令\n        > 退回到指定 commit id commit 後的狀態\n\t\t\t\n####  git checkout -- &#60;file name>>\nModified 的檔案還原尚未 Modify 時\n\n---\n \t\t\n####  git clone &#60;url> &#60;specified dir>\n會複製一份指定的 repository 最新的檔案下來到指定資料夾`(包含 .git)`\n\n---\n \t\t\n####  git remote\n連接指定的 repository  遠端管理\n\n* add &#60; shortname > &#60; url >\n    > 加入指定的 url 至本地的 repository shortname是此 url的簡稱\n* show &#60;shortname>\n    >顯示指定的 remote 資訊\n* 額外指令:\n    * -v\n        >顯示目前有加入多少 remote url\n\n---\n \t\n####  git fetch &#60;remote shortname> &#60;branch name> :&#60;local new create branch>\n把遠端資料同步到本機上，並在現有的 Commit 新開一條分支 origin/master\n* remote shortname\n    >在 remote 上建立的 遠端簡稱\n* branch name\n    >在遠端欲要下載下來的分支\n* local new create branch\n    >下載到指定分支\n* 沒有參數以 origin/master 為基準\n* 載下來不會做 merge，所以 HEAD 跟 FETCH_HEAD 不會同步\n\n---\n \t\n####  git pull &#60;remote shortname> &#60;branch name> :&#60;local new create branch>\n把遠端資料同步到本機上，資料直接合併為一條 branch\n* 同 fetch\n* 載下來自動做 merge，所以 HEAD 跟 FETCH_HEAD 會同步\n\n---\n \t\n####  git push  &#60;remote shortname> &#60;branch name>\n把本機上的資料推送到遠端上\n\t\n---\n \t\n####  git branch\n分支管理\n* 不帶參數，會顯示目前有多少的 branch\n* 參數\n    * git branch &#60;branch name>\n        > 新建\n    * git branch -m &#60;origin branch name> &#60;change branch name>\n        > 改名\n    * git branch -d &#60;branch name>\n        > 刪除，當未合併時，會提醒說未合併，禁止刪除\t\t\t\n    * git branch -D &#60;branch name>\n        > 強制刪除\n\n---\n \t\n####  git checkout &#60;branch name>\n* 切換分支\n* 沒有指定分支時，切過去會有錯誤\n* 參數\n    *  git checkout -b &#60;branch name>\n        > 判斷有無此分支，沒有會新建再切過去\n\t\n---\n \t\n####  git gc\n處理掉不需要的資源\n\n---\n \t\n\t\n","source":"git-command-note/index.md","raw":"---\ntitle: git-command-note\ndate: 2020-05-02 00:16:49\n---\n\n\n## Git 指令\n#### git init\n在指定資料夾初始化 git，建立 .git (隱藏的)資料夾\n\n---\n####  git status\n檢視目前 git資料夾的狀態，分為:\t\n* Changes to be commited:\n> 以追蹤，待上傳檔案\n* Changes not staged for commit:\n> 以追蹤檔案，但修改過\n* Untracked files:\n> 尚未追蹤的檔案\n* 額外指令: \n> -s:\n* 以一行來顯示目前每個檔案狀態\n>EX: \n>> AM UnTrackedFile.txt\n<br>PS. AM表示兩個區域範圍\n* 左邊是 Stage(預存區)，右邊是 Working Directory\n    * A = Add\n    * M = Modify\n    * ? = UnTracked\n\t\t\t\t\n\n---\n\n####  git add\n把指定資料加入暫存區 EX: git add \"file name\"\n指令: \n* git add . : \n> 把目前所在位置包含子目錄全加進暫存區\n* git add all :\n> 把目前專案所有檔案加入暫存區\n\n---\n \t\t\t\n####  git commit\n提交暫存區檔案，讓資料可以儲存讓git管理\n* git commit -m \"commit info\"<----添加此次上傳註解\n* 無註解的話，會跑出編輯視窗叫你填寫\n    * window:預設編輯器\n    * linux:vim\n* 不需要註解:\n    git commit --allow-empty -m \"\"\n* 額外指令:\n    1. -a:\n        直接忽略git add，把所有檔案直接提交到 staging Area\n    2. --amend\n        1. 修改上一次的commit資料\n\n---\n \t\n####  git log\n* 檢視提交紀錄\n* 會有的資訊:\n    * commit編號(亂碼\"Secure Hash Algorithm\")，假如目前 HEAD在這裡的話會顯示(HEAD -> master)\n    * Author 作者(E-mail)\n    * 日期\n    * 註解\n\t\t\n---\n \t\n* 額外指令:\n    * --oneline 把每筆資料，以一行來顯示\n    >commit編號(7-8碼) HEAD是否在這 註解&#60;br>\n    >f9a2f8d (HEAD -> master) Test Commit 20181105_12:35\n    \n    * --graph 把目前commit的資料以樹狀圖表示\n    \n    * --author=\"name\" 尋找作者\n    \n    * --grep=\"XXX\" 尋找commit的註解裡包含的字\n    \n    * -S=\"關鍵字\" 尋找檔案內容裡包含關鍵字\n    \n    * --since --until 查詢時間內的檔案，從日期~時間\n    * --after --before 同上\n    \n    * -p or --patch\n    ```\n    顯示每次 commit 的跟上一次commit的差別 & 修改的內容 ，\n    後面會顯示 diff的內容，\n    可以多加 -p -數量，\n    決定要顯示幾筆，沒加就是全部\n    ```\n    * --stat\n    ```\n    在顯示每筆commit的最後都會有修改的統計\n    commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -> master, origin/master,origin/HEAD)\n    Author: Scott Chacon <schacon@gmail.com>\n    Date:   Mon Mar 17 21:52:11 2008 -0700\n\n        changed the verison number\t\t\t\t\t<---備註\n\n        Rakefile | 2 +-\t\t\t\t\t\t\t\t<---修改的檔案以及修改動作 +是增加 -是減少\n        1 file changed, 1 insertion(+), 1 deletion(-)  <---統計\n    ```\n    * --pretty\n    > 更換顯示紀錄格式\n    ```\n    EX:\n    --pretty=oneline\n        以一行解決一筆顯示\n    --pretty=format:\"%h - %an, %ar : %s\" (Commit hash)-(Author name),(Author date, relative):(Subject)\n        自訂顯示格式\n    ```\n  \n---\n \t\n####   git rm\n刪除在管檔案\n* 已有下指令 **EX: add or modified** 尚未commit必須先做完，否則會出現 error\n    * error: the following file has changes staged in the index:\n    * error: the following file has local modifications:\n* 未託管(Untracked)檔案無法用此指令，否則會出現 error\n    * fatal: pathspec 'UnTrackedFile.txt' did not match any files\n* 刪除在 git status會顯示 **deleted:    FileName**\n> 並非未刪除，是還沒commit做好這次的紀錄\n* 額外指令:\n    * --cached\n    > 在暫存區時，退回託管狀態，變成未託管(Untracked)\n> PS. 此命令無法影響到儲存庫(Repository)\n\n####  git diff\n判斷被託管的檔案差異性\n```\nL:\\Git_Work\\Git_Test_20181102>git diff\ndiff --git a/UnTrackedFile.txt b/UnTrackedFile.txt\nindex 65ff6f9..3b01642 100644\n--- a/UnTrackedFile.txt <--原本\n+++ b/UnTrackedFile.txt <---修改\n@@ -1,3 +1,2 @@\n```\n* 當檔案被修改後，被修改的檔案會被移到 Modified，並且保留原本檔案在 staged\n* 此指令就是會去判斷這兩個檔案的內容差異\n* 兩個數字為一組 - 為舊檔 +為新檔\n* 數字是變化起始跟結尾 \n    * `-1,3` 就是 舊檔 第1行 - 第3行\n    * `+1,2` 就是 新檔 第1行 - 第2行\n* 額外指令:\n    * --staged\n    * --cached\n       *  會比較上次 commit的檔案跟 目前在 staged的檔案\n\n---\n \t\t\n####  git mv\n* 移動檔案 or 重新命名\n```\nEX:\n    git mv FileName NewFileName<---重新命名\n    git mv FileName NewAddress/FileName <---移動\n```\n\n\n---\n \t\t\n\n####  git reset &#60;commit id>\n退回之前的狀態 or 版本\n* 作用於單獨檔案 --> 退回指定檔案 ，狀態變至(UnTracked)\n限定在 Working tree，當下的 commit\n* 作用於版本 \n    * --SOFT <指定版本>\n        > 退到 added\n    * --MIXED <指定版本>\n        > 退到 UnTracked\n    * --HARD <指定版本>\n        > 檔案完全恢復成指定版本\n    *  沒有指令\n        > 退回到指定 commit id commit 後的狀態\n\t\t\t\n####  git checkout -- &#60;file name>>\nModified 的檔案還原尚未 Modify 時\n\n---\n \t\t\n####  git clone &#60;url> &#60;specified dir>\n會複製一份指定的 repository 最新的檔案下來到指定資料夾`(包含 .git)`\n\n---\n \t\t\n####  git remote\n連接指定的 repository  遠端管理\n\n* add &#60; shortname > &#60; url >\n    > 加入指定的 url 至本地的 repository shortname是此 url的簡稱\n* show &#60;shortname>\n    >顯示指定的 remote 資訊\n* 額外指令:\n    * -v\n        >顯示目前有加入多少 remote url\n\n---\n \t\n####  git fetch &#60;remote shortname> &#60;branch name> :&#60;local new create branch>\n把遠端資料同步到本機上，並在現有的 Commit 新開一條分支 origin/master\n* remote shortname\n    >在 remote 上建立的 遠端簡稱\n* branch name\n    >在遠端欲要下載下來的分支\n* local new create branch\n    >下載到指定分支\n* 沒有參數以 origin/master 為基準\n* 載下來不會做 merge，所以 HEAD 跟 FETCH_HEAD 不會同步\n\n---\n \t\n####  git pull &#60;remote shortname> &#60;branch name> :&#60;local new create branch>\n把遠端資料同步到本機上，資料直接合併為一條 branch\n* 同 fetch\n* 載下來自動做 merge，所以 HEAD 跟 FETCH_HEAD 會同步\n\n---\n \t\n####  git push  &#60;remote shortname> &#60;branch name>\n把本機上的資料推送到遠端上\n\t\n---\n \t\n####  git branch\n分支管理\n* 不帶參數，會顯示目前有多少的 branch\n* 參數\n    * git branch &#60;branch name>\n        > 新建\n    * git branch -m &#60;origin branch name> &#60;change branch name>\n        > 改名\n    * git branch -d &#60;branch name>\n        > 刪除，當未合併時，會提醒說未合併，禁止刪除\t\t\t\n    * git branch -D &#60;branch name>\n        > 強制刪除\n\n---\n \t\n####  git checkout &#60;branch name>\n* 切換分支\n* 沒有指定分支時，切過去會有錯誤\n* 參數\n    *  git checkout -b &#60;branch name>\n        > 判斷有無此分支，沒有會新建再切過去\n\t\n---\n \t\n####  git gc\n處理掉不需要的資源\n\n---\n \t\n\t\n","updated":"2020-05-02T16:24:13.324Z","path":"git-command-note/index.html","comments":1,"layout":"page","_id":"ckuy1kd9400175ojt3j9tep5s","content":"<h2 id=\"Git-指令\"><a href=\"#Git-指令\" class=\"headerlink\" title=\"Git 指令\"></a>Git 指令</h2><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>在指定資料夾初始化 git，建立 .git (隱藏的)資料夾</p>\n<hr>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>檢視目前 git資料夾的狀態，分為:    </p>\n<ul>\n<li>Changes to be commited:<blockquote>\n<p>以追蹤，待上傳檔案</p>\n</blockquote>\n</li>\n<li>Changes not staged for commit:<blockquote>\n<p>以追蹤檔案，但修改過</p>\n</blockquote>\n</li>\n<li>Untracked files:<blockquote>\n<p>尚未追蹤的檔案</p>\n</blockquote>\n</li>\n<li>額外指令: <blockquote>\n<p>-s:</p>\n</blockquote>\n</li>\n<li>以一行來顯示目前每個檔案狀態<blockquote>\n<p>EX: </p>\n<blockquote>\n<p>AM UnTrackedFile.txt<br><br>PS. AM表示兩個區域範圍</p>\n</blockquote>\n</blockquote>\n</li>\n<li>左邊是 Stage(預存區)，右邊是 Working Directory<ul>\n<li>A = Add</li>\n<li>M = Modify</li>\n<li>? = UnTracked</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><p>把指定資料加入暫存區 EX: git add “file name”<br>指令: </p>\n<ul>\n<li>git add . : <blockquote>\n<p>把目前所在位置包含子目錄全加進暫存區</p>\n</blockquote>\n</li>\n<li>git add all :<blockquote>\n<p>把目前專案所有檔案加入暫存區</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>提交暫存區檔案，讓資料可以儲存讓git管理</p>\n<ul>\n<li>git commit -m “commit info”&lt;—-添加此次上傳註解</li>\n<li>無註解的話，會跑出編輯視窗叫你填寫<ul>\n<li>window:預設編輯器</li>\n<li>linux:vim</li>\n</ul>\n</li>\n<li>不需要註解:<br>  git commit –allow-empty -m “”</li>\n<li>額外指令:<ol>\n<li>-a:<br> 直接忽略git add，把所有檔案直接提交到 staging Area</li>\n<li>–amend<ol>\n<li>修改上一次的commit資料</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h4><ul>\n<li>檢視提交紀錄</li>\n<li>會有的資訊:<ul>\n<li>commit編號(亂碼”Secure Hash Algorithm”)，假如目前 HEAD在這裡的話會顯示(HEAD -&gt; master)</li>\n<li>Author 作者(E-mail)</li>\n<li>日期</li>\n<li>註解</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>額外指令:</p>\n<ul>\n<li><p>–oneline 把每筆資料，以一行來顯示</p>\n<blockquote>\n<p>commit編號(7-8碼) HEAD是否在這 註解&#60;br&gt;<br>f9a2f8d (HEAD -&gt; master) Test Commit 20181105_12:35</p>\n</blockquote>\n</li>\n<li><p>–graph 把目前commit的資料以樹狀圖表示</p>\n</li>\n<li><p>–author=”name” 尋找作者</p>\n</li>\n<li><p>–grep=”XXX” 尋找commit的註解裡包含的字</p>\n</li>\n<li><p>-S=”關鍵字” 尋找檔案內容裡包含關鍵字</p>\n</li>\n<li><p>–since –until 查詢時間內的檔案，從日期~時間</p>\n</li>\n<li><p>–after –before 同上</p>\n</li>\n<li><p>-p or –patch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">顯示每次 commit 的跟上一次commit的差別 &amp; 修改的內容 ，</span><br><span class=\"line\">後面會顯示 diff的內容，</span><br><span class=\"line\">可以多加 -p -數量，</span><br><span class=\"line\">決定要顯示幾筆，沒加就是全部</span><br></pre></td></tr></table></figure></li>\n<li><p>–stat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在顯示每筆commit的最後都會有修改的統計</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin&#x2F;master,origin&#x2F;HEAD)</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the verison number\t\t\t\t\t&lt;---備註</span><br><span class=\"line\"></span><br><span class=\"line\">    Rakefile | 2 +-\t\t\t\t\t\t\t\t&lt;---修改的檔案以及修改動作 +是增加 -是減少</span><br><span class=\"line\">    1 file changed, 1 insertion(+), 1 deletion(-)  &lt;---統計</span><br></pre></td></tr></table></figure></li>\n<li><p>–pretty</p>\n<blockquote>\n<p>更換顯示紀錄格式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EX:</span><br><span class=\"line\">--pretty&#x3D;oneline</span><br><span class=\"line\">    以一行解決一筆顯示</span><br><span class=\"line\">--pretty&#x3D;format:&quot;%h - %an, %ar : %s&quot; (Commit hash)-(Author name),(Author date, relative):(Subject)</span><br><span class=\"line\">    自訂顯示格式</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h4><p>刪除在管檔案</p>\n<ul>\n<li>已有下指令 <strong>EX: add or modified</strong> 尚未commit必須先做完，否則會出現 error<ul>\n<li>error: the following file has changes staged in the index:</li>\n<li>error: the following file has local modifications:</li>\n</ul>\n</li>\n<li>未託管(Untracked)檔案無法用此指令，否則會出現 error<ul>\n<li>fatal: pathspec ‘UnTrackedFile.txt’ did not match any files</li>\n</ul>\n</li>\n<li>刪除在 git status會顯示 <strong>deleted:    FileName</strong><blockquote>\n<p>並非未刪除，是還沒commit做好這次的紀錄</p>\n</blockquote>\n</li>\n<li>額外指令:<ul>\n<li>–cached<blockquote>\n<p>在暫存區時，退回託管狀態，變成未託管(Untracked)<br>PS. 此命令無法影響到儲存庫(Repository)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>判斷被託管的檔案差異性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L:\\Git_Work\\Git_Test_20181102&gt;git diff</span><br><span class=\"line\">diff --git a&#x2F;UnTrackedFile.txt b&#x2F;UnTrackedFile.txt</span><br><span class=\"line\">index 65ff6f9..3b01642 100644</span><br><span class=\"line\">--- a&#x2F;UnTrackedFile.txt &lt;--原本</span><br><span class=\"line\">+++ b&#x2F;UnTrackedFile.txt &lt;---修改</span><br><span class=\"line\">@@ -1,3 +1,2 @@</span><br></pre></td></tr></table></figure>\n<ul>\n<li>當檔案被修改後，被修改的檔案會被移到 Modified，並且保留原本檔案在 staged</li>\n<li>此指令就是會去判斷這兩個檔案的內容差異</li>\n<li>兩個數字為一組 - 為舊檔 +為新檔</li>\n<li>數字是變化起始跟結尾 <ul>\n<li><code>-1,3</code> 就是 舊檔 第1行 - 第3行</li>\n<li><code>+1,2</code> 就是 新檔 第1行 - 第2行</li>\n</ul>\n</li>\n<li>額外指令:<ul>\n<li>–staged</li>\n<li>–cached<ul>\n<li>會比較上次 commit的檔案跟 目前在 staged的檔案</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h4><ul>\n<li>移動檔案 or 重新命名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EX:</span><br><span class=\"line\">    git mv FileName NewFileName&lt;---重新命名</span><br><span class=\"line\">    git mv FileName NewAddress&#x2F;FileName &lt;---移動</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<hr>\n<h4 id=\"git-reset-60-commit-id-gt\"><a href=\"#git-reset-60-commit-id-gt\" class=\"headerlink\" title=\"git reset &#60;commit id&gt;\"></a>git reset &#60;commit id&gt;</h4><p>退回之前的狀態 or 版本</p>\n<ul>\n<li>作用於單獨檔案 –&gt; 退回指定檔案 ，狀態變至(UnTracked)<br>限定在 Working tree，當下的 commit</li>\n<li>作用於版本 <ul>\n<li>–SOFT &lt;指定版本&gt;<blockquote>\n<p>退到 added</p>\n</blockquote>\n</li>\n<li>–MIXED &lt;指定版本&gt;<blockquote>\n<p>退到 UnTracked</p>\n</blockquote>\n</li>\n<li>–HARD &lt;指定版本&gt;<blockquote>\n<p>檔案完全恢復成指定版本</p>\n</blockquote>\n</li>\n<li>沒有指令<blockquote>\n<p>退回到指定 commit id commit 後的狀態</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"git-checkout-–-60-file-name-gt-gt\"><a href=\"#git-checkout-–-60-file-name-gt-gt\" class=\"headerlink\" title=\"git checkout – &#60;file name&gt;&gt;\"></a>git checkout – &#60;file name&gt;&gt;</h4><p>Modified 的檔案還原尚未 Modify 時</p>\n<hr>\n<h4 id=\"git-clone-60-url-gt-60-specified-dir-gt\"><a href=\"#git-clone-60-url-gt-60-specified-dir-gt\" class=\"headerlink\" title=\"git clone &#60;url&gt; &#60;specified dir&gt;\"></a>git clone &#60;url&gt; &#60;specified dir&gt;</h4><p>會複製一份指定的 repository 最新的檔案下來到指定資料夾<code>(包含 .git)</code></p>\n<hr>\n<h4 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h4><p>連接指定的 repository  遠端管理</p>\n<ul>\n<li>add &#60; shortname &gt; &#60; url &gt;<blockquote>\n<p>加入指定的 url 至本地的 repository shortname是此 url的簡稱</p>\n</blockquote>\n</li>\n<li>show &#60;shortname&gt;<blockquote>\n<p>顯示指定的 remote 資訊</p>\n</blockquote>\n</li>\n<li>額外指令:<ul>\n<li>-v<blockquote>\n<p>顯示目前有加入多少 remote url</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-fetch-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\"><a href=\"#git-fetch-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\" class=\"headerlink\" title=\"git fetch &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;\"></a>git fetch &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;</h4><p>把遠端資料同步到本機上，並在現有的 Commit 新開一條分支 origin/master</p>\n<ul>\n<li>remote shortname<blockquote>\n<p>在 remote 上建立的 遠端簡稱</p>\n</blockquote>\n</li>\n<li>branch name<blockquote>\n<p>在遠端欲要下載下來的分支</p>\n</blockquote>\n</li>\n<li>local new create branch<blockquote>\n<p>下載到指定分支</p>\n</blockquote>\n</li>\n<li>沒有參數以 origin/master 為基準</li>\n<li>載下來不會做 merge，所以 HEAD 跟 FETCH_HEAD 不會同步</li>\n</ul>\n<hr>\n<h4 id=\"git-pull-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\"><a href=\"#git-pull-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\" class=\"headerlink\" title=\"git pull &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;\"></a>git pull &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;</h4><p>把遠端資料同步到本機上，資料直接合併為一條 branch</p>\n<ul>\n<li>同 fetch</li>\n<li>載下來自動做 merge，所以 HEAD 跟 FETCH_HEAD 會同步</li>\n</ul>\n<hr>\n<h4 id=\"git-push-60-remote-shortname-gt-60-branch-name-gt\"><a href=\"#git-push-60-remote-shortname-gt-60-branch-name-gt\" class=\"headerlink\" title=\"git push  &#60;remote shortname&gt; &#60;branch name&gt;\"></a>git push  &#60;remote shortname&gt; &#60;branch name&gt;</h4><p>把本機上的資料推送到遠端上</p>\n<hr>\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><p>分支管理</p>\n<ul>\n<li>不帶參數，會顯示目前有多少的 branch</li>\n<li>參數<ul>\n<li>git branch &#60;branch name&gt;<blockquote>\n<p>新建</p>\n</blockquote>\n</li>\n<li>git branch -m &#60;origin branch name&gt; &#60;change branch name&gt;<blockquote>\n<p>改名</p>\n</blockquote>\n</li>\n<li>git branch -d &#60;branch name&gt;<blockquote>\n<p>刪除，當未合併時，會提醒說未合併，禁止刪除            </p>\n</blockquote>\n</li>\n<li>git branch -D &#60;branch name&gt;<blockquote>\n<p>強制刪除</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-checkout-60-branch-name-gt\"><a href=\"#git-checkout-60-branch-name-gt\" class=\"headerlink\" title=\"git checkout &#60;branch name&gt;\"></a>git checkout &#60;branch name&gt;</h4><ul>\n<li>切換分支</li>\n<li>沒有指定分支時，切過去會有錯誤</li>\n<li>參數<ul>\n<li>git checkout -b &#60;branch name&gt;<blockquote>\n<p>判斷有無此分支，沒有會新建再切過去</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-gc\"><a href=\"#git-gc\" class=\"headerlink\" title=\"git gc\"></a>git gc</h4><p>處理掉不需要的資源</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git-指令\"><a href=\"#Git-指令\" class=\"headerlink\" title=\"Git 指令\"></a>Git 指令</h2><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>在指定資料夾初始化 git，建立 .git (隱藏的)資料夾</p>\n<hr>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>檢視目前 git資料夾的狀態，分為:    </p>\n<ul>\n<li>Changes to be commited:<blockquote>\n<p>以追蹤，待上傳檔案</p>\n</blockquote>\n</li>\n<li>Changes not staged for commit:<blockquote>\n<p>以追蹤檔案，但修改過</p>\n</blockquote>\n</li>\n<li>Untracked files:<blockquote>\n<p>尚未追蹤的檔案</p>\n</blockquote>\n</li>\n<li>額外指令: <blockquote>\n<p>-s:</p>\n</blockquote>\n</li>\n<li>以一行來顯示目前每個檔案狀態<blockquote>\n<p>EX: </p>\n<blockquote>\n<p>AM UnTrackedFile.txt<br><br>PS. AM表示兩個區域範圍</p>\n</blockquote>\n</blockquote>\n</li>\n<li>左邊是 Stage(預存區)，右邊是 Working Directory<ul>\n<li>A = Add</li>\n<li>M = Modify</li>\n<li>? = UnTracked</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><p>把指定資料加入暫存區 EX: git add “file name”<br>指令: </p>\n<ul>\n<li>git add . : <blockquote>\n<p>把目前所在位置包含子目錄全加進暫存區</p>\n</blockquote>\n</li>\n<li>git add all :<blockquote>\n<p>把目前專案所有檔案加入暫存區</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>提交暫存區檔案，讓資料可以儲存讓git管理</p>\n<ul>\n<li>git commit -m “commit info”&lt;—-添加此次上傳註解</li>\n<li>無註解的話，會跑出編輯視窗叫你填寫<ul>\n<li>window:預設編輯器</li>\n<li>linux:vim</li>\n</ul>\n</li>\n<li>不需要註解:<br>  git commit –allow-empty -m “”</li>\n<li>額外指令:<ol>\n<li>-a:<br> 直接忽略git add，把所有檔案直接提交到 staging Area</li>\n<li>–amend<ol>\n<li>修改上一次的commit資料</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h4><ul>\n<li>檢視提交紀錄</li>\n<li>會有的資訊:<ul>\n<li>commit編號(亂碼”Secure Hash Algorithm”)，假如目前 HEAD在這裡的話會顯示(HEAD -&gt; master)</li>\n<li>Author 作者(E-mail)</li>\n<li>日期</li>\n<li>註解</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>額外指令:</p>\n<ul>\n<li><p>–oneline 把每筆資料，以一行來顯示</p>\n<blockquote>\n<p>commit編號(7-8碼) HEAD是否在這 註解&#60;br&gt;<br>f9a2f8d (HEAD -&gt; master) Test Commit 20181105_12:35</p>\n</blockquote>\n</li>\n<li><p>–graph 把目前commit的資料以樹狀圖表示</p>\n</li>\n<li><p>–author=”name” 尋找作者</p>\n</li>\n<li><p>–grep=”XXX” 尋找commit的註解裡包含的字</p>\n</li>\n<li><p>-S=”關鍵字” 尋找檔案內容裡包含關鍵字</p>\n</li>\n<li><p>–since –until 查詢時間內的檔案，從日期~時間</p>\n</li>\n<li><p>–after –before 同上</p>\n</li>\n<li><p>-p or –patch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">顯示每次 commit 的跟上一次commit的差別 &amp; 修改的內容 ，</span><br><span class=\"line\">後面會顯示 diff的內容，</span><br><span class=\"line\">可以多加 -p -數量，</span><br><span class=\"line\">決定要顯示幾筆，沒加就是全部</span><br></pre></td></tr></table></figure></li>\n<li><p>–stat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在顯示每筆commit的最後都會有修改的統計</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin&#x2F;master,origin&#x2F;HEAD)</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the verison number\t\t\t\t\t&lt;---備註</span><br><span class=\"line\"></span><br><span class=\"line\">    Rakefile | 2 +-\t\t\t\t\t\t\t\t&lt;---修改的檔案以及修改動作 +是增加 -是減少</span><br><span class=\"line\">    1 file changed, 1 insertion(+), 1 deletion(-)  &lt;---統計</span><br></pre></td></tr></table></figure></li>\n<li><p>–pretty</p>\n<blockquote>\n<p>更換顯示紀錄格式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EX:</span><br><span class=\"line\">--pretty&#x3D;oneline</span><br><span class=\"line\">    以一行解決一筆顯示</span><br><span class=\"line\">--pretty&#x3D;format:&quot;%h - %an, %ar : %s&quot; (Commit hash)-(Author name),(Author date, relative):(Subject)</span><br><span class=\"line\">    自訂顯示格式</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h4><p>刪除在管檔案</p>\n<ul>\n<li>已有下指令 <strong>EX: add or modified</strong> 尚未commit必須先做完，否則會出現 error<ul>\n<li>error: the following file has changes staged in the index:</li>\n<li>error: the following file has local modifications:</li>\n</ul>\n</li>\n<li>未託管(Untracked)檔案無法用此指令，否則會出現 error<ul>\n<li>fatal: pathspec ‘UnTrackedFile.txt’ did not match any files</li>\n</ul>\n</li>\n<li>刪除在 git status會顯示 <strong>deleted:    FileName</strong><blockquote>\n<p>並非未刪除，是還沒commit做好這次的紀錄</p>\n</blockquote>\n</li>\n<li>額外指令:<ul>\n<li>–cached<blockquote>\n<p>在暫存區時，退回託管狀態，變成未託管(Untracked)<br>PS. 此命令無法影響到儲存庫(Repository)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>判斷被託管的檔案差異性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L:\\Git_Work\\Git_Test_20181102&gt;git diff</span><br><span class=\"line\">diff --git a&#x2F;UnTrackedFile.txt b&#x2F;UnTrackedFile.txt</span><br><span class=\"line\">index 65ff6f9..3b01642 100644</span><br><span class=\"line\">--- a&#x2F;UnTrackedFile.txt &lt;--原本</span><br><span class=\"line\">+++ b&#x2F;UnTrackedFile.txt &lt;---修改</span><br><span class=\"line\">@@ -1,3 +1,2 @@</span><br></pre></td></tr></table></figure>\n<ul>\n<li>當檔案被修改後，被修改的檔案會被移到 Modified，並且保留原本檔案在 staged</li>\n<li>此指令就是會去判斷這兩個檔案的內容差異</li>\n<li>兩個數字為一組 - 為舊檔 +為新檔</li>\n<li>數字是變化起始跟結尾 <ul>\n<li><code>-1,3</code> 就是 舊檔 第1行 - 第3行</li>\n<li><code>+1,2</code> 就是 新檔 第1行 - 第2行</li>\n</ul>\n</li>\n<li>額外指令:<ul>\n<li>–staged</li>\n<li>–cached<ul>\n<li>會比較上次 commit的檔案跟 目前在 staged的檔案</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h4><ul>\n<li>移動檔案 or 重新命名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EX:</span><br><span class=\"line\">    git mv FileName NewFileName&lt;---重新命名</span><br><span class=\"line\">    git mv FileName NewAddress&#x2F;FileName &lt;---移動</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<hr>\n<h4 id=\"git-reset-60-commit-id-gt\"><a href=\"#git-reset-60-commit-id-gt\" class=\"headerlink\" title=\"git reset &#60;commit id&gt;\"></a>git reset &#60;commit id&gt;</h4><p>退回之前的狀態 or 版本</p>\n<ul>\n<li>作用於單獨檔案 –&gt; 退回指定檔案 ，狀態變至(UnTracked)<br>限定在 Working tree，當下的 commit</li>\n<li>作用於版本 <ul>\n<li>–SOFT &lt;指定版本&gt;<blockquote>\n<p>退到 added</p>\n</blockquote>\n</li>\n<li>–MIXED &lt;指定版本&gt;<blockquote>\n<p>退到 UnTracked</p>\n</blockquote>\n</li>\n<li>–HARD &lt;指定版本&gt;<blockquote>\n<p>檔案完全恢復成指定版本</p>\n</blockquote>\n</li>\n<li>沒有指令<blockquote>\n<p>退回到指定 commit id commit 後的狀態</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"git-checkout-–-60-file-name-gt-gt\"><a href=\"#git-checkout-–-60-file-name-gt-gt\" class=\"headerlink\" title=\"git checkout – &#60;file name&gt;&gt;\"></a>git checkout – &#60;file name&gt;&gt;</h4><p>Modified 的檔案還原尚未 Modify 時</p>\n<hr>\n<h4 id=\"git-clone-60-url-gt-60-specified-dir-gt\"><a href=\"#git-clone-60-url-gt-60-specified-dir-gt\" class=\"headerlink\" title=\"git clone &#60;url&gt; &#60;specified dir&gt;\"></a>git clone &#60;url&gt; &#60;specified dir&gt;</h4><p>會複製一份指定的 repository 最新的檔案下來到指定資料夾<code>(包含 .git)</code></p>\n<hr>\n<h4 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h4><p>連接指定的 repository  遠端管理</p>\n<ul>\n<li>add &#60; shortname &gt; &#60; url &gt;<blockquote>\n<p>加入指定的 url 至本地的 repository shortname是此 url的簡稱</p>\n</blockquote>\n</li>\n<li>show &#60;shortname&gt;<blockquote>\n<p>顯示指定的 remote 資訊</p>\n</blockquote>\n</li>\n<li>額外指令:<ul>\n<li>-v<blockquote>\n<p>顯示目前有加入多少 remote url</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-fetch-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\"><a href=\"#git-fetch-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\" class=\"headerlink\" title=\"git fetch &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;\"></a>git fetch &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;</h4><p>把遠端資料同步到本機上，並在現有的 Commit 新開一條分支 origin/master</p>\n<ul>\n<li>remote shortname<blockquote>\n<p>在 remote 上建立的 遠端簡稱</p>\n</blockquote>\n</li>\n<li>branch name<blockquote>\n<p>在遠端欲要下載下來的分支</p>\n</blockquote>\n</li>\n<li>local new create branch<blockquote>\n<p>下載到指定分支</p>\n</blockquote>\n</li>\n<li>沒有參數以 origin/master 為基準</li>\n<li>載下來不會做 merge，所以 HEAD 跟 FETCH_HEAD 不會同步</li>\n</ul>\n<hr>\n<h4 id=\"git-pull-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\"><a href=\"#git-pull-60-remote-shortname-gt-60-branch-name-gt-60-local-new-create-branch-gt\" class=\"headerlink\" title=\"git pull &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;\"></a>git pull &#60;remote shortname&gt; &#60;branch name&gt; :&#60;local new create branch&gt;</h4><p>把遠端資料同步到本機上，資料直接合併為一條 branch</p>\n<ul>\n<li>同 fetch</li>\n<li>載下來自動做 merge，所以 HEAD 跟 FETCH_HEAD 會同步</li>\n</ul>\n<hr>\n<h4 id=\"git-push-60-remote-shortname-gt-60-branch-name-gt\"><a href=\"#git-push-60-remote-shortname-gt-60-branch-name-gt\" class=\"headerlink\" title=\"git push  &#60;remote shortname&gt; &#60;branch name&gt;\"></a>git push  &#60;remote shortname&gt; &#60;branch name&gt;</h4><p>把本機上的資料推送到遠端上</p>\n<hr>\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><p>分支管理</p>\n<ul>\n<li>不帶參數，會顯示目前有多少的 branch</li>\n<li>參數<ul>\n<li>git branch &#60;branch name&gt;<blockquote>\n<p>新建</p>\n</blockquote>\n</li>\n<li>git branch -m &#60;origin branch name&gt; &#60;change branch name&gt;<blockquote>\n<p>改名</p>\n</blockquote>\n</li>\n<li>git branch -d &#60;branch name&gt;<blockquote>\n<p>刪除，當未合併時，會提醒說未合併，禁止刪除            </p>\n</blockquote>\n</li>\n<li>git branch -D &#60;branch name&gt;<blockquote>\n<p>強制刪除</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-checkout-60-branch-name-gt\"><a href=\"#git-checkout-60-branch-name-gt\" class=\"headerlink\" title=\"git checkout &#60;branch name&gt;\"></a>git checkout &#60;branch name&gt;</h4><ul>\n<li>切換分支</li>\n<li>沒有指定分支時，切過去會有錯誤</li>\n<li>參數<ul>\n<li>git checkout -b &#60;branch name&gt;<blockquote>\n<p>判斷有無此分支，沒有會新建再切過去</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"git-gc\"><a href=\"#git-gc\" class=\"headerlink\" title=\"git gc\"></a>git gc</h4><p>處理掉不需要的資源</p>\n<hr>\n"},{"title":"Hexo教學","date":"2020-01-24T14:29:20.000Z","categories":["Hexo"],"tags":["Hexo","教學"],"_content":"\n# Hexo\n\n## 說明\n\n- 可以自動建立一個 Blog\n- 可以把生成的 Blog 檔案放在 Git Page 裡\n- 安裝 `(需要先安裝 npm)`\n  > npm install -g hexo-cli\n- 有多種指令可以來對 Blog 作設定\n\n## Hexo 命令\n\n> `[content]` 裡的內容代表可以省略\n\n- > hexo init [project name]\n\n  - 初始化\n    1. **project name** : 這 Blog 專案的名稱\n    2. 有填寫的話，會建立一個 **project name** 的資料夾\n    3. 沒有填寫的話，則會在當下資料夾建立專案 _(非空白會報錯)_\n\n- hexo g[enerate]\n  - 編譯檔案為 **html 文件**\n  - 編譯後會新增 **public 資料夾** 在 `專案根目錄`\n- hexo clean\n  - 清除編譯後的 **public 資料夾**\n- hexo d[eploy]\n  - 部屬到指定的 Server\n  - 要在 \\_confing.yml 的 deploy 選項設定\n- hexo s[erver]\n\n  - 以本機啟動 Server\n  - 默認 Url : `localhost:4000`\n\n- hexo new [layout] < title >\n  - 建立新文章\n  - 內建三種 [layout](#Layout)\n  - 預設為 post **layout**\n\n## \\_config.yml\n\n- 針對這專案 blog 的設定\n- 格式\n  - 以 **key： `[空白]` value**\n  - **value** 跟 **:** 之間一定要空白，不然會報錯\n\n```yml\nurl: https://robyang203.github.io/\nroot: /TestBlog2\n```\n\n- 分類 `目前有用到的`\n  - Site\n    - Blog 資訊\n  ```yml\n  title: TestBlog2 # 部落格名稱\n  subtitle: ''\n  description: '' # 描述\n  keywords:\n  author: Tony #作者\n  language: en #語系\n  timezone: ''\n  ```\n  - URL\n    - Blog 路由設定\n  ```yml\n  url: https://robyang203.github.io/ # Domain\n  root: /TestBlog2 # 此網站的根目錄\n  permalink: :year/:month/:day/:title/ # 文章固定網址\n  permalink_defaults:\n  pretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n  ```\n  - Extension\n    - 額外添加插件，目前用到 theme\n  ```yml\n  theme: Next\n  ```\n  - Deploymemt\n    - 部署到哪個地方 ， 目前使用 **Github-Pages**\n  ```yml\n  deploy:\n    type: git #類型\n    repo: git@github.com:RobYang203/TestBlog2.git #要部署到哪個 repo\n    branch: gh-pages #repo 的分支\n  ```\n\n## Layout\n\n- 預設三種，提供不同的寫作模式\n  - post\n    - 會發佈在主頁 **(Home)** 上\n    - 會在 **source/\\_post** 資料夾下新增 `<title>.md`檔\n  - page\n    - 獨立新增一頁，路徑會是 domain/title\n    - 會在 **source/** 路徑 ，新增 `<title>` 資料夾，裡面會預設放有 `index.md`\n  - draft\n    - 草稿類型，不會顯示在頁面上\n\n# Categories & Tags\n\n- 可提供文章分類的功能\n- **Categories** 每篇文章只能有一個 ， **Tags** 可以有多個\n- 只能在 Post 文章有\n- 新增 **Page** 來保存\n  > hexo new page [ tags | categories ]\n- 再新增文章加入 `type`\n\n```markdown\n    ---\n    title: new Page Namw\n    date: 2017-05-27 13:47:40\n    type: [\"tags\" | \"categories\"]\n    ---\n```\n\n- 之後當新增文章時，在資訊頁面添加上\n\n```md\n    ---\n    title: Page\n    date: 2017-05-26 12:12:57\n    categories:\n    - category1\n    tags:\n    - tag1\n    - tag2\n    - tag3\n    ---\n```\n\n# NexT 主題\n\n- 從 [HexT Github](https://github.com/theme-next/hexo-theme-next/releases)下載\n- 下載後解壓縮，命名資料夾 `Next`\n- 移置 `ProjectName/theme` 資料夾下\n- 設定 \\_config.yml， **theme** 改為 `Next`\n\n```yml\ntheme: Next\n```\n\n## 部屬到 Github 上\n\n- 修改 `_config.yml` **deploy 選項**\n  - type 類型\n  - repo 儲存庫\n  - branch 分支\n\n```\n    deploy:\n        type: git\n        repo: git@github.com:yourusername/yourprojectname.git\n        branch: gh-pages\n```\n\n- 設定完後，輸入 `hexo d` 會自動 push 到指定的 **github branch**\n\n## Q-List\n\n- Q.更新文章後發現內容沒變\n\n  > A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次\n\n- Q.\n","source":"hexo-tech/index.md","raw":"---\ntitle: Hexo教學\ndate: 2020-01-24 22:29:20\ncategories:\n  - Hexo\ntags:\n  - Hexo\n  - 教學\n---\n\n# Hexo\n\n## 說明\n\n- 可以自動建立一個 Blog\n- 可以把生成的 Blog 檔案放在 Git Page 裡\n- 安裝 `(需要先安裝 npm)`\n  > npm install -g hexo-cli\n- 有多種指令可以來對 Blog 作設定\n\n## Hexo 命令\n\n> `[content]` 裡的內容代表可以省略\n\n- > hexo init [project name]\n\n  - 初始化\n    1. **project name** : 這 Blog 專案的名稱\n    2. 有填寫的話，會建立一個 **project name** 的資料夾\n    3. 沒有填寫的話，則會在當下資料夾建立專案 _(非空白會報錯)_\n\n- hexo g[enerate]\n  - 編譯檔案為 **html 文件**\n  - 編譯後會新增 **public 資料夾** 在 `專案根目錄`\n- hexo clean\n  - 清除編譯後的 **public 資料夾**\n- hexo d[eploy]\n  - 部屬到指定的 Server\n  - 要在 \\_confing.yml 的 deploy 選項設定\n- hexo s[erver]\n\n  - 以本機啟動 Server\n  - 默認 Url : `localhost:4000`\n\n- hexo new [layout] < title >\n  - 建立新文章\n  - 內建三種 [layout](#Layout)\n  - 預設為 post **layout**\n\n## \\_config.yml\n\n- 針對這專案 blog 的設定\n- 格式\n  - 以 **key： `[空白]` value**\n  - **value** 跟 **:** 之間一定要空白，不然會報錯\n\n```yml\nurl: https://robyang203.github.io/\nroot: /TestBlog2\n```\n\n- 分類 `目前有用到的`\n  - Site\n    - Blog 資訊\n  ```yml\n  title: TestBlog2 # 部落格名稱\n  subtitle: ''\n  description: '' # 描述\n  keywords:\n  author: Tony #作者\n  language: en #語系\n  timezone: ''\n  ```\n  - URL\n    - Blog 路由設定\n  ```yml\n  url: https://robyang203.github.io/ # Domain\n  root: /TestBlog2 # 此網站的根目錄\n  permalink: :year/:month/:day/:title/ # 文章固定網址\n  permalink_defaults:\n  pretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n  ```\n  - Extension\n    - 額外添加插件，目前用到 theme\n  ```yml\n  theme: Next\n  ```\n  - Deploymemt\n    - 部署到哪個地方 ， 目前使用 **Github-Pages**\n  ```yml\n  deploy:\n    type: git #類型\n    repo: git@github.com:RobYang203/TestBlog2.git #要部署到哪個 repo\n    branch: gh-pages #repo 的分支\n  ```\n\n## Layout\n\n- 預設三種，提供不同的寫作模式\n  - post\n    - 會發佈在主頁 **(Home)** 上\n    - 會在 **source/\\_post** 資料夾下新增 `<title>.md`檔\n  - page\n    - 獨立新增一頁，路徑會是 domain/title\n    - 會在 **source/** 路徑 ，新增 `<title>` 資料夾，裡面會預設放有 `index.md`\n  - draft\n    - 草稿類型，不會顯示在頁面上\n\n# Categories & Tags\n\n- 可提供文章分類的功能\n- **Categories** 每篇文章只能有一個 ， **Tags** 可以有多個\n- 只能在 Post 文章有\n- 新增 **Page** 來保存\n  > hexo new page [ tags | categories ]\n- 再新增文章加入 `type`\n\n```markdown\n    ---\n    title: new Page Namw\n    date: 2017-05-27 13:47:40\n    type: [\"tags\" | \"categories\"]\n    ---\n```\n\n- 之後當新增文章時，在資訊頁面添加上\n\n```md\n    ---\n    title: Page\n    date: 2017-05-26 12:12:57\n    categories:\n    - category1\n    tags:\n    - tag1\n    - tag2\n    - tag3\n    ---\n```\n\n# NexT 主題\n\n- 從 [HexT Github](https://github.com/theme-next/hexo-theme-next/releases)下載\n- 下載後解壓縮，命名資料夾 `Next`\n- 移置 `ProjectName/theme` 資料夾下\n- 設定 \\_config.yml， **theme** 改為 `Next`\n\n```yml\ntheme: Next\n```\n\n## 部屬到 Github 上\n\n- 修改 `_config.yml` **deploy 選項**\n  - type 類型\n  - repo 儲存庫\n  - branch 分支\n\n```\n    deploy:\n        type: git\n        repo: git@github.com:yourusername/yourprojectname.git\n        branch: gh-pages\n```\n\n- 設定完後，輸入 `hexo d` 會自動 push 到指定的 **github branch**\n\n## Q-List\n\n- Q.更新文章後發現內容沒變\n\n  > A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次\n\n- Q.\n","updated":"2021-10-19T11:46:15.534Z","path":"hexo-tech/index.html","comments":1,"layout":"page","_id":"ckuy1kd9700195ojtevei08hn","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h2><ul>\n<li>可以自動建立一個 Blog</li>\n<li>可以把生成的 Blog 檔案放在 Git Page 裡</li>\n<li>安裝 <code>(需要先安裝 npm)</code><blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li>有多種指令可以來對 Blog 作設定</li>\n</ul>\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><blockquote>\n<p><code>[content]</code> 裡的內容代表可以省略</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>hexo init [project name]</p>\n</blockquote>\n<ul>\n<li>初始化<ol>\n<li><strong>project name</strong> : 這 Blog 專案的名稱</li>\n<li>有填寫的話，會建立一個 <strong>project name</strong> 的資料夾</li>\n<li>沒有填寫的話，則會在當下資料夾建立專案 <em>(非空白會報錯)</em></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>hexo g[enerate]</p>\n<ul>\n<li>編譯檔案為 <strong>html 文件</strong></li>\n<li>編譯後會新增 <strong>public 資料夾</strong> 在 <code>專案根目錄</code></li>\n</ul>\n</li>\n<li><p>hexo clean</p>\n<ul>\n<li>清除編譯後的 <strong>public 資料夾</strong></li>\n</ul>\n</li>\n<li><p>hexo d[eploy]</p>\n<ul>\n<li>部屬到指定的 Server</li>\n<li>要在 _confing.yml 的 deploy 選項設定</li>\n</ul>\n</li>\n<li><p>hexo s[erver]</p>\n<ul>\n<li>以本機啟動 Server</li>\n<li>默認 Url : <code>localhost:4000</code></li>\n</ul>\n</li>\n<li><p>hexo new [layout] &lt; title &gt;</p>\n<ul>\n<li>建立新文章</li>\n<li>內建三種 <a href=\"#Layout\">layout</a></li>\n<li>預設為 post <strong>layout</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><ul>\n<li>針對這專案 blog 的設定</li>\n<li>格式<ul>\n<li>以 <strong>key： <code>[空白]</code> value</strong></li>\n<li><strong>value</strong> 跟 <strong>:</strong> 之間一定要空白，不然會報錯</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分類 <code>目前有用到的</code><ul>\n<li>Site<ul>\n<li>Blog 資訊<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">TestBlog2</span> <span class=\"comment\"># 部落格名稱</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">''</span> <span class=\"comment\"># 描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Tony</span> <span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span> <span class=\"comment\">#語系</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>URL<ul>\n<li>Blog 路由設定<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span> <span class=\"comment\"># Domain</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span> <span class=\"comment\"># 此網站的根目錄</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span> <span class=\"comment\"># 文章固定網址</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\"><span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\"><span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Extension<ul>\n<li>額外添加插件，目前用到 theme<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Deploymemt<ul>\n<li>部署到哪個地方 ， 目前使用 <strong>Github-Pages</strong><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">#類型</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:RobYang203/TestBlog2.git</span> <span class=\"comment\">#要部署到哪個 repo</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#repo 的分支</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><ul>\n<li>預設三種，提供不同的寫作模式<ul>\n<li>post<ul>\n<li>會發佈在主頁 <strong>(Home)</strong> 上</li>\n<li>會在 <strong>source/_post</strong> 資料夾下新增 <code>&lt;title&gt;.md</code>檔</li>\n</ul>\n</li>\n<li>page<ul>\n<li>獨立新增一頁，路徑會是 domain/title</li>\n<li>會在 <strong>source/</strong> 路徑 ，新增 <code>&lt;title&gt;</code> 資料夾，裡面會預設放有 <code>index.md</code></li>\n</ul>\n</li>\n<li>draft<ul>\n<li>草稿類型，不會顯示在頁面上</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Categories-amp-Tags\"><a href=\"#Categories-amp-Tags\" class=\"headerlink\" title=\"Categories &amp; Tags\"></a>Categories &amp; Tags</h1><ul>\n<li>可提供文章分類的功能</li>\n<li><strong>Categories</strong> 每篇文章只能有一個 ， <strong>Tags</strong> 可以有多個</li>\n<li>只能在 Post 文章有</li>\n<li>新增 <strong>Page</strong> 來保存<blockquote>\n<p>hexo new page [ tags | categories ]</p>\n</blockquote>\n</li>\n<li>再新增文章加入 <code>type</code></li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new Page Namw</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: [\"tags\" | \"categories\"]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>之後當新增文章時，在資訊頁面添加上</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Page</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">- </span>category1</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag1</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag2</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag3</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"NexT-主題\"><a href=\"#NexT-主題\" class=\"headerlink\" title=\"NexT 主題\"></a>NexT 主題</h1><ul>\n<li>從 <a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">HexT Github</a>下載</li>\n<li>下載後解壓縮，命名資料夾 <code>Next</code></li>\n<li>移置 <code>ProjectName/theme</code> 資料夾下</li>\n<li>設定 _config.yml， <strong>theme</strong> 改為 <code>Next</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部屬到-Github-上\"><a href=\"#部屬到-Github-上\" class=\"headerlink\" title=\"部屬到 Github 上\"></a>部屬到 Github 上</h2><ul>\n<li>修改 <code>_config.yml</code> <strong>deploy 選項</strong><ul>\n<li>type 類型</li>\n<li>repo 儲存庫</li>\n<li>branch 分支</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:yourusername&#x2F;yourprojectname.git</span><br><span class=\"line\">    branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>設定完後，輸入 <code>hexo d</code> 會自動 push 到指定的 <strong>github branch</strong></li>\n</ul>\n<h2 id=\"Q-List\"><a href=\"#Q-List\" class=\"headerlink\" title=\"Q-List\"></a>Q-List</h2><ul>\n<li><p>Q.更新文章後發現內容沒變</p>\n<blockquote>\n<p>A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次</p>\n</blockquote>\n</li>\n<li><p>Q.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h2><ul>\n<li>可以自動建立一個 Blog</li>\n<li>可以把生成的 Blog 檔案放在 Git Page 裡</li>\n<li>安裝 <code>(需要先安裝 npm)</code><blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li>有多種指令可以來對 Blog 作設定</li>\n</ul>\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><blockquote>\n<p><code>[content]</code> 裡的內容代表可以省略</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>hexo init [project name]</p>\n</blockquote>\n<ul>\n<li>初始化<ol>\n<li><strong>project name</strong> : 這 Blog 專案的名稱</li>\n<li>有填寫的話，會建立一個 <strong>project name</strong> 的資料夾</li>\n<li>沒有填寫的話，則會在當下資料夾建立專案 <em>(非空白會報錯)</em></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>hexo g[enerate]</p>\n<ul>\n<li>編譯檔案為 <strong>html 文件</strong></li>\n<li>編譯後會新增 <strong>public 資料夾</strong> 在 <code>專案根目錄</code></li>\n</ul>\n</li>\n<li><p>hexo clean</p>\n<ul>\n<li>清除編譯後的 <strong>public 資料夾</strong></li>\n</ul>\n</li>\n<li><p>hexo d[eploy]</p>\n<ul>\n<li>部屬到指定的 Server</li>\n<li>要在 _confing.yml 的 deploy 選項設定</li>\n</ul>\n</li>\n<li><p>hexo s[erver]</p>\n<ul>\n<li>以本機啟動 Server</li>\n<li>默認 Url : <code>localhost:4000</code></li>\n</ul>\n</li>\n<li><p>hexo new [layout] &lt; title &gt;</p>\n<ul>\n<li>建立新文章</li>\n<li>內建三種 <a href=\"#Layout\">layout</a></li>\n<li>預設為 post <strong>layout</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><ul>\n<li>針對這專案 blog 的設定</li>\n<li>格式<ul>\n<li>以 <strong>key： <code>[空白]</code> value</strong></li>\n<li><strong>value</strong> 跟 <strong>:</strong> 之間一定要空白，不然會報錯</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分類 <code>目前有用到的</code><ul>\n<li>Site<ul>\n<li>Blog 資訊<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">TestBlog2</span> <span class=\"comment\"># 部落格名稱</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">''</span> <span class=\"comment\"># 描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Tony</span> <span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span> <span class=\"comment\">#語系</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>URL<ul>\n<li>Blog 路由設定<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span> <span class=\"comment\"># Domain</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span> <span class=\"comment\"># 此網站的根目錄</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span> <span class=\"comment\"># 文章固定網址</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\"><span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\"><span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Extension<ul>\n<li>額外添加插件，目前用到 theme<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Deploymemt<ul>\n<li>部署到哪個地方 ， 目前使用 <strong>Github-Pages</strong><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">#類型</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:RobYang203/TestBlog2.git</span> <span class=\"comment\">#要部署到哪個 repo</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#repo 的分支</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><ul>\n<li>預設三種，提供不同的寫作模式<ul>\n<li>post<ul>\n<li>會發佈在主頁 <strong>(Home)</strong> 上</li>\n<li>會在 <strong>source/_post</strong> 資料夾下新增 <code>&lt;title&gt;.md</code>檔</li>\n</ul>\n</li>\n<li>page<ul>\n<li>獨立新增一頁，路徑會是 domain/title</li>\n<li>會在 <strong>source/</strong> 路徑 ，新增 <code>&lt;title&gt;</code> 資料夾，裡面會預設放有 <code>index.md</code></li>\n</ul>\n</li>\n<li>draft<ul>\n<li>草稿類型，不會顯示在頁面上</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Categories-amp-Tags\"><a href=\"#Categories-amp-Tags\" class=\"headerlink\" title=\"Categories &amp; Tags\"></a>Categories &amp; Tags</h1><ul>\n<li>可提供文章分類的功能</li>\n<li><strong>Categories</strong> 每篇文章只能有一個 ， <strong>Tags</strong> 可以有多個</li>\n<li>只能在 Post 文章有</li>\n<li>新增 <strong>Page</strong> 來保存<blockquote>\n<p>hexo new page [ tags | categories ]</p>\n</blockquote>\n</li>\n<li>再新增文章加入 <code>type</code></li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new Page Namw</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: [\"tags\" | \"categories\"]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>之後當新增文章時，在資訊頁面添加上</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Page</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">- </span>category1</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag1</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag2</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag3</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"NexT-主題\"><a href=\"#NexT-主題\" class=\"headerlink\" title=\"NexT 主題\"></a>NexT 主題</h1><ul>\n<li>從 <a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">HexT Github</a>下載</li>\n<li>下載後解壓縮，命名資料夾 <code>Next</code></li>\n<li>移置 <code>ProjectName/theme</code> 資料夾下</li>\n<li>設定 _config.yml， <strong>theme</strong> 改為 <code>Next</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部屬到-Github-上\"><a href=\"#部屬到-Github-上\" class=\"headerlink\" title=\"部屬到 Github 上\"></a>部屬到 Github 上</h2><ul>\n<li>修改 <code>_config.yml</code> <strong>deploy 選項</strong><ul>\n<li>type 類型</li>\n<li>repo 儲存庫</li>\n<li>branch 分支</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:yourusername&#x2F;yourprojectname.git</span><br><span class=\"line\">    branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>設定完後，輸入 <code>hexo d</code> 會自動 push 到指定的 <strong>github branch</strong></li>\n</ul>\n<h2 id=\"Q-List\"><a href=\"#Q-List\" class=\"headerlink\" title=\"Q-List\"></a>Q-List</h2><ul>\n<li><p>Q.更新文章後發現內容沒變</p>\n<blockquote>\n<p>A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次</p>\n</blockquote>\n</li>\n<li><p>Q.</p>\n</li>\n</ul>\n"},{"title":"Spring 介紹","date":"2020-01-25T16:43:52.000Z","_content":"## 介紹\n* 一個以 JAVA為基礎的**開源框架(Open Source Framework)**\n* 使用分層架構，可選擇需要用到的 **Model**\n* 不只有 **Ｗeb開發而已**\n\n## 特色\n* 依賴注入 **DI**(Dependency Injection)\n* 反轉控制 **IOC**(Inverion Of Control)\n* 剖面導向程式設計 **AOP**(Aspect-Oriented Programming)\n* 低侵入/低耦合\n\n## Spring Runtime\n![Spring Runtime](https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png)\n* Core Container\n* Data Access/ Integration\n* Web\n* AOP\n* Instrumentation\n* Test","source":"java-spring-intro/index.md","raw":"---\ntitle: Spring 介紹\ndate: 2020-01-26 00:43:52\n---\n## 介紹\n* 一個以 JAVA為基礎的**開源框架(Open Source Framework)**\n* 使用分層架構，可選擇需要用到的 **Model**\n* 不只有 **Ｗeb開發而已**\n\n## 特色\n* 依賴注入 **DI**(Dependency Injection)\n* 反轉控制 **IOC**(Inverion Of Control)\n* 剖面導向程式設計 **AOP**(Aspect-Oriented Programming)\n* 低侵入/低耦合\n\n## Spring Runtime\n![Spring Runtime](https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png)\n* Core Container\n* Data Access/ Integration\n* Web\n* AOP\n* Instrumentation\n* Test","updated":"2020-01-25T18:22:45.664Z","path":"java-spring-intro/index.html","comments":1,"layout":"page","_id":"ckuy1kd98001c5ojt345n3rfa","content":"<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>一個以 JAVA為基礎的<strong>開源框架(Open Source Framework)</strong></li>\n<li>使用分層架構，可選擇需要用到的 <strong>Model</strong></li>\n<li>不只有 <strong>Ｗeb開發而已</strong></li>\n</ul>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>依賴注入 <strong>DI</strong>(Dependency Injection)</li>\n<li>反轉控制 <strong>IOC</strong>(Inverion Of Control)</li>\n<li>剖面導向程式設計 <strong>AOP</strong>(Aspect-Oriented Programming)</li>\n<li>低侵入/低耦合</li>\n</ul>\n<h2 id=\"Spring-Runtime\"><a href=\"#Spring-Runtime\" class=\"headerlink\" title=\"Spring Runtime\"></a>Spring Runtime</h2><p><img src=\"https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png\" alt=\"Spring Runtime\"></p>\n<ul>\n<li>Core Container</li>\n<li>Data Access/ Integration</li>\n<li>Web</li>\n<li>AOP</li>\n<li>Instrumentation</li>\n<li>Test</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>一個以 JAVA為基礎的<strong>開源框架(Open Source Framework)</strong></li>\n<li>使用分層架構，可選擇需要用到的 <strong>Model</strong></li>\n<li>不只有 <strong>Ｗeb開發而已</strong></li>\n</ul>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>依賴注入 <strong>DI</strong>(Dependency Injection)</li>\n<li>反轉控制 <strong>IOC</strong>(Inverion Of Control)</li>\n<li>剖面導向程式設計 <strong>AOP</strong>(Aspect-Oriented Programming)</li>\n<li>低侵入/低耦合</li>\n</ul>\n<h2 id=\"Spring-Runtime\"><a href=\"#Spring-Runtime\" class=\"headerlink\" title=\"Spring Runtime\"></a>Spring Runtime</h2><p><img src=\"https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png\" alt=\"Spring Runtime\"></p>\n<ul>\n<li>Core Container</li>\n<li>Data Access/ Integration</li>\n<li>Web</li>\n<li>AOP</li>\n<li>Instrumentation</li>\n<li>Test</li>\n</ul>\n"},{"title":"JAVA Servlet","date":"2020-01-24T19:54:46.000Z","_content":"# JAVA Servlet ","source":"java-servlet-tech/index.md","raw":"---\ntitle: JAVA Servlet \ndate: 2020-01-25 03:54:46\n---\n# JAVA Servlet ","updated":"2020-01-24T19:55:22.014Z","path":"java-servlet-tech/index.html","comments":1,"layout":"page","_id":"ckuy1kd9b001f5ojtgomle445","content":"<h1 id=\"JAVA-Servlet\"><a href=\"#JAVA-Servlet\" class=\"headerlink\" title=\"JAVA Servlet\"></a>JAVA Servlet</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-Servlet\"><a href=\"#JAVA-Servlet\" class=\"headerlink\" title=\"JAVA Servlet\"></a>JAVA Servlet</h1>"},{"title":"JAVA-Spring WebSite for Eclipse for XML 設定","date":"2020-01-24T15:01:56.000Z","_content":"## JAVA-Spring WebSite for Eclipse for XML 設定\n### Web.xml 設定\n* 在 `<context-param>` 把 `mvc-config.xml` 設定在**contextConfigLocation**\n```xml\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/mvc-config.xml</param-value>\t\t\n\t</context-param>\n```\n* 在設定 `<listener>`\n```xml\n    <listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n```\n> P.S. 有在 `<context-param>` 設定**contextConfigLocation**，就要設定`<listener>`\n\n### For MVC\n* 在 `<servlet>` 設定 **DispatherServlet**，建立**前端控制器(front controller)** \n```xml\n\t<servlet>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value></param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n```\n> 當 `contextConfigLocation` 尚未設定時，預設會讀取 `Servlet名稱- servlet.xml`\n\n* 在 `<servlet-mapping>` 設定 **Controller**條件\n```xml\n    <servlet-mapping>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<url-pattern>*.action</url-pattern>\t\t\n\t</servlet-mapping>\n```\n\n* 流程\n   1. client request \n   2. servlet-mapping 驗證 url，是否有符合\n   3. 連結到 mapping 的 dispatcherServlet  \n   4. 根據 dispatcher-servlet.xml 連接到 Controller\n","source":"java-spring-website-using-xml/index.md","raw":"---\ntitle: JAVA-Spring WebSite for Eclipse for XML 設定\ndate: 2020-01-24 23:01:56\n---\n## JAVA-Spring WebSite for Eclipse for XML 設定\n### Web.xml 設定\n* 在 `<context-param>` 把 `mvc-config.xml` 設定在**contextConfigLocation**\n```xml\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/mvc-config.xml</param-value>\t\t\n\t</context-param>\n```\n* 在設定 `<listener>`\n```xml\n    <listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n```\n> P.S. 有在 `<context-param>` 設定**contextConfigLocation**，就要設定`<listener>`\n\n### For MVC\n* 在 `<servlet>` 設定 **DispatherServlet**，建立**前端控制器(front controller)** \n```xml\n\t<servlet>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value></param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n```\n> 當 `contextConfigLocation` 尚未設定時，預設會讀取 `Servlet名稱- servlet.xml`\n\n* 在 `<servlet-mapping>` 設定 **Controller**條件\n```xml\n    <servlet-mapping>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<url-pattern>*.action</url-pattern>\t\t\n\t</servlet-mapping>\n```\n\n* 流程\n   1. client request \n   2. servlet-mapping 驗證 url，是否有符合\n   3. 連結到 mapping 的 dispatcherServlet  \n   4. 根據 dispatcher-servlet.xml 連接到 Controller\n","updated":"2020-02-10T18:29:08.572Z","path":"java-spring-website-using-xml/index.html","comments":1,"layout":"page","_id":"ckuy1kd9c001g5ojtfj3g41u0","content":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for XML 設定\"></a>JAVA-Spring WebSite for Eclipse for XML 設定</h2><h3 id=\"Web-xml-設定\"><a href=\"#Web-xml-設定\" class=\"headerlink\" title=\"Web.xml 設定\"></a>Web.xml 設定</h3><ul>\n<li>在 <code>&lt;context-param&gt;</code> 把 <code>mvc-config.xml</code> 設定在<strong>contextConfigLocation</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/mvc-config.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在設定 <code>&lt;listener&gt;</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 有在 <code>&lt;context-param&gt;</code> 設定<strong>contextConfigLocation</strong>，就要設定<code>&lt;listener&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"For-MVC\"><a href=\"#For-MVC\" class=\"headerlink\" title=\"For MVC\"></a>For MVC</h3><ul>\n<li><p>在 <code>&lt;servlet&gt;</code> 設定 <strong>DispatherServlet</strong>，建立<strong>前端控制器(front controller)</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>當 <code>contextConfigLocation</code> 尚未設定時，預設會讀取 <code>Servlet名稱- servlet.xml</code></p>\n</blockquote>\n</li>\n<li><p>在 <code>&lt;servlet-mapping&gt;</code> 設定 <strong>Controller</strong>條件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流程</p>\n<ol>\n<li>client request </li>\n<li>servlet-mapping 驗證 url，是否有符合</li>\n<li>連結到 mapping 的 dispatcherServlet  </li>\n<li>根據 dispatcher-servlet.xml 連接到 Controller</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for XML 設定\"></a>JAVA-Spring WebSite for Eclipse for XML 設定</h2><h3 id=\"Web-xml-設定\"><a href=\"#Web-xml-設定\" class=\"headerlink\" title=\"Web.xml 設定\"></a>Web.xml 設定</h3><ul>\n<li>在 <code>&lt;context-param&gt;</code> 把 <code>mvc-config.xml</code> 設定在<strong>contextConfigLocation</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/mvc-config.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在設定 <code>&lt;listener&gt;</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 有在 <code>&lt;context-param&gt;</code> 設定<strong>contextConfigLocation</strong>，就要設定<code>&lt;listener&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"For-MVC\"><a href=\"#For-MVC\" class=\"headerlink\" title=\"For MVC\"></a>For MVC</h3><ul>\n<li><p>在 <code>&lt;servlet&gt;</code> 設定 <strong>DispatherServlet</strong>，建立<strong>前端控制器(front controller)</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>當 <code>contextConfigLocation</code> 尚未設定時，預設會讀取 <code>Servlet名稱- servlet.xml</code></p>\n</blockquote>\n</li>\n<li><p>在 <code>&lt;servlet-mapping&gt;</code> 設定 <strong>Controller</strong>條件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流程</p>\n<ol>\n<li>client request </li>\n<li>servlet-mapping 驗證 url，是否有符合</li>\n<li>連結到 mapping 的 dispatcherServlet  </li>\n<li>根據 dispatcher-servlet.xml 連接到 Controller</li>\n</ol>\n</li>\n</ul>\n"},{"title":"JAVA-Spring-QList","date":"2020-01-29T17:21:11.000Z","_content":"* 關於`Inversion Of Control (IOC)`\n    * 控制(流程)反轉\n    * 程式整體的架構流程由開發者轉移到第三方來做控制\n* 什麼是`依賴 (Dependency)`\n    * 當一個類別需要實作其他類別時，就是**依賴(Dependency)** 關係\n* 什麼是`Dependency Injection`\n    * 可使類別之間的耦合不那麼緊密\n    * 對於在類別要使用另外的類別採取**注入**的方式\n    * **注入**方式可以是用setter取得...等，採取由外部供應\n        * 建構子注入\n        * setter注入\n        * interface注入\n    * 類別裡不主動實作其他類別\n* 什麼是`POJO`\n* 什麼是`bean`\n* 什麼是`JSP`\n* 什麼是`JPA`\n* 什麼是`hibernate`\n* 什麼是`contextConfigLocation`\n* `context-param` & `init-param` 區別\n* `dispather-servlet.xml` & `applcationContext.xml` 差別\n* 在儲存 `web.xml`loading會很久\n* 關於在 `Maven Project` 找不到 **Run Server**\n* 關於 `The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application`\n    > 指定 uri: [http://java.sun.com/jsp/jstl/core] 有重複無法解析，刪除多餘的就可以了\n* 關於 Error org.springframework.beans.factory.BeanDefinitionStoreException ...ASM ClassReader failed to parse class\n    > JRE 版本跟 Spring版本對不上\n* 關於 Java compiler level does not match \n    > 到專案根目錄找`.setting`資料夾(隱藏)，找 `org.eclipse.wst.common.project.facet.core.xml` 修改 java版本\n\n* 關於 Bean property 'name' is not readable or has an invalid getter method\n    > 沒有設定變數 `name`的 getter | setter\n* 關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer\n    > 找不到 WebApplicationInitializer ，是因為用 Maven\n    * 解決辦法\n        * 在管理資源，在專案右鍵 -> properties -> Deployment Assembly -> 按下Add \n        * 選擇 Java Build Path Entries\n        * 選擇 Maven Dependencies  \n        * Apply\n    * 參考資料\n        * https://dotblogs.com.tw/raylee/2019/04/22/104236\n\n* 關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named\n    > 因為沒讀到 persistence.xml ，要放在 `META-INF`資料夾下，資料夾要在`Java Build Path` > `Source`下新增\n\n* 關於 WebAppInitializer class 在 Server 啟動時，沒有被實作\n    * Servlet Container 要支援 **Servlet 3.0**\n    * 實作 `SpringServletContainerInitializer`\n    ``` Java\n    @HandlesTypes({WebApplicationInitializer.class})  \n    public class SpringServletContainerInitializer implements ServletContainerInitializer{\n        @Override\n        public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n\n            \n        }\n    }\n    ```\n    * 在 `src`底下新增 `resources` > `META-INF` > `services`\n        * 新建檔案 `javax.servlet.ServletContainerInitializer`\n        * 內容輸入完整的 `SpringServletContainerInitializer`\n   \n\n* Q. Server Tomcat v9.0 Server at localhost failed to start.\n    > A. 發現是專案出現 **More than one fragment with the name [spring_web] was found. This is not legal ...”**\n\n* Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal ...”\n    > A. 在 web.xml 的 `web-app`加上 `<absolute-ordering />`\n\n* Q. 什麼是 `<absolute-ordering />`\n    > A. 請參考 https://openhome.cc/Gossip/ServletJSP/Pluggability.html\n\n\n    \n","source":"java-spring-q-list/index.md","raw":"---\ntitle: JAVA-Spring-QList\ndate: 2020-01-30 01:21:11\n---\n* 關於`Inversion Of Control (IOC)`\n    * 控制(流程)反轉\n    * 程式整體的架構流程由開發者轉移到第三方來做控制\n* 什麼是`依賴 (Dependency)`\n    * 當一個類別需要實作其他類別時，就是**依賴(Dependency)** 關係\n* 什麼是`Dependency Injection`\n    * 可使類別之間的耦合不那麼緊密\n    * 對於在類別要使用另外的類別採取**注入**的方式\n    * **注入**方式可以是用setter取得...等，採取由外部供應\n        * 建構子注入\n        * setter注入\n        * interface注入\n    * 類別裡不主動實作其他類別\n* 什麼是`POJO`\n* 什麼是`bean`\n* 什麼是`JSP`\n* 什麼是`JPA`\n* 什麼是`hibernate`\n* 什麼是`contextConfigLocation`\n* `context-param` & `init-param` 區別\n* `dispather-servlet.xml` & `applcationContext.xml` 差別\n* 在儲存 `web.xml`loading會很久\n* 關於在 `Maven Project` 找不到 **Run Server**\n* 關於 `The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application`\n    > 指定 uri: [http://java.sun.com/jsp/jstl/core] 有重複無法解析，刪除多餘的就可以了\n* 關於 Error org.springframework.beans.factory.BeanDefinitionStoreException ...ASM ClassReader failed to parse class\n    > JRE 版本跟 Spring版本對不上\n* 關於 Java compiler level does not match \n    > 到專案根目錄找`.setting`資料夾(隱藏)，找 `org.eclipse.wst.common.project.facet.core.xml` 修改 java版本\n\n* 關於 Bean property 'name' is not readable or has an invalid getter method\n    > 沒有設定變數 `name`的 getter | setter\n* 關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer\n    > 找不到 WebApplicationInitializer ，是因為用 Maven\n    * 解決辦法\n        * 在管理資源，在專案右鍵 -> properties -> Deployment Assembly -> 按下Add \n        * 選擇 Java Build Path Entries\n        * 選擇 Maven Dependencies  \n        * Apply\n    * 參考資料\n        * https://dotblogs.com.tw/raylee/2019/04/22/104236\n\n* 關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named\n    > 因為沒讀到 persistence.xml ，要放在 `META-INF`資料夾下，資料夾要在`Java Build Path` > `Source`下新增\n\n* 關於 WebAppInitializer class 在 Server 啟動時，沒有被實作\n    * Servlet Container 要支援 **Servlet 3.0**\n    * 實作 `SpringServletContainerInitializer`\n    ``` Java\n    @HandlesTypes({WebApplicationInitializer.class})  \n    public class SpringServletContainerInitializer implements ServletContainerInitializer{\n        @Override\n        public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n\n            \n        }\n    }\n    ```\n    * 在 `src`底下新增 `resources` > `META-INF` > `services`\n        * 新建檔案 `javax.servlet.ServletContainerInitializer`\n        * 內容輸入完整的 `SpringServletContainerInitializer`\n   \n\n* Q. Server Tomcat v9.0 Server at localhost failed to start.\n    > A. 發現是專案出現 **More than one fragment with the name [spring_web] was found. This is not legal ...”**\n\n* Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal ...”\n    > A. 在 web.xml 的 `web-app`加上 `<absolute-ordering />`\n\n* Q. 什麼是 `<absolute-ordering />`\n    > A. 請參考 https://openhome.cc/Gossip/ServletJSP/Pluggability.html\n\n\n    \n","updated":"2020-02-05T19:59:52.770Z","path":"java-spring-q-list/index.html","comments":1,"layout":"page","_id":"ckuy1kd9d001l5ojt5g88guuv","content":"<ul>\n<li><p>關於<code>Inversion Of Control (IOC)</code></p>\n<ul>\n<li>控制(流程)反轉</li>\n<li>程式整體的架構流程由開發者轉移到第三方來做控制</li>\n</ul>\n</li>\n<li><p>什麼是<code>依賴 (Dependency)</code></p>\n<ul>\n<li>當一個類別需要實作其他類別時，就是<strong>依賴(Dependency)</strong> 關係</li>\n</ul>\n</li>\n<li><p>什麼是<code>Dependency Injection</code></p>\n<ul>\n<li>可使類別之間的耦合不那麼緊密</li>\n<li>對於在類別要使用另外的類別採取<strong>注入</strong>的方式</li>\n<li><strong>注入</strong>方式可以是用setter取得…等，採取由外部供應<ul>\n<li>建構子注入</li>\n<li>setter注入</li>\n<li>interface注入</li>\n</ul>\n</li>\n<li>類別裡不主動實作其他類別</li>\n</ul>\n</li>\n<li><p>什麼是<code>POJO</code></p>\n</li>\n<li><p>什麼是<code>bean</code></p>\n</li>\n<li><p>什麼是<code>JSP</code></p>\n</li>\n<li><p>什麼是<code>JPA</code></p>\n</li>\n<li><p>什麼是<code>hibernate</code></p>\n</li>\n<li><p>什麼是<code>contextConfigLocation</code></p>\n</li>\n<li><p><code>context-param</code> &amp; <code>init-param</code> 區別</p>\n</li>\n<li><p><code>dispather-servlet.xml</code> &amp; <code>applcationContext.xml</code> 差別</p>\n</li>\n<li><p>在儲存 <code>web.xml</code>loading會很久</p>\n</li>\n<li><p>關於在 <code>Maven Project</code> 找不到 <strong>Run Server</strong></p>\n</li>\n<li><p>關於 <code>The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application</code></p>\n<blockquote>\n<p>指定 uri: [<a href=\"http://java.sun.com/jsp/jstl/core]\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core]</a> 有重複無法解析，刪除多餘的就可以了</p>\n</blockquote>\n</li>\n<li><p>關於 Error org.springframework.beans.factory.BeanDefinitionStoreException …ASM ClassReader failed to parse class</p>\n<blockquote>\n<p>JRE 版本跟 Spring版本對不上</p>\n</blockquote>\n</li>\n<li><p>關於 Java compiler level does not match </p>\n<blockquote>\n<p>到專案根目錄找<code>.setting</code>資料夾(隱藏)，找 <code>org.eclipse.wst.common.project.facet.core.xml</code> 修改 java版本</p>\n</blockquote>\n</li>\n<li><p>關於 Bean property ‘name’ is not readable or has an invalid getter method</p>\n<blockquote>\n<p>沒有設定變數 <code>name</code>的 getter | setter</p>\n</blockquote>\n</li>\n<li><p>關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer</p>\n<blockquote>\n<p>找不到 WebApplicationInitializer ，是因為用 Maven</p>\n</blockquote>\n<ul>\n<li>解決辦法<ul>\n<li>在管理資源，在專案右鍵 -&gt; properties -&gt; Deployment Assembly -&gt; 按下Add </li>\n<li>選擇 Java Build Path Entries</li>\n<li>選擇 Maven Dependencies  </li>\n<li>Apply</li>\n</ul>\n</li>\n<li>參考資料<ul>\n<li><a href=\"https://dotblogs.com.tw/raylee/2019/04/22/104236\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/raylee/2019/04/22/104236</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named</p>\n<blockquote>\n<p>因為沒讀到 persistence.xml ，要放在 <code>META-INF</code>資料夾下，資料夾要在<code>Java Build Path</code> &gt; <code>Source</code>下新增</p>\n</blockquote>\n</li>\n<li><p>關於 WebAppInitializer class 在 Server 啟動時，沒有被實作</p>\n<ul>\n<li>Servlet Container 要支援 <strong>Servlet 3.0</strong></li>\n<li>實作 <code>SpringServletContainerInitializer</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>src</code>底下新增 <code>resources</code> &gt; <code>META-INF</code> &gt; <code>services</code><ul>\n<li>新建檔案 <code>javax.servlet.ServletContainerInitializer</code></li>\n<li>內容輸入完整的 <code>SpringServletContainerInitializer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Q. Server Tomcat v9.0 Server at localhost failed to start.</p>\n<blockquote>\n<p>A. 發現是專案出現 <strong>More than one fragment with the name [spring_web] was found. This is not legal …”</strong></p>\n</blockquote>\n</li>\n<li><p>Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal …”</p>\n<blockquote>\n<p>A. 在 web.xml 的 <code>web-app</code>加上 <code>&lt;absolute-ordering /&gt;</code></p>\n</blockquote>\n</li>\n<li><p>Q. 什麼是 <code>&lt;absolute-ordering /&gt;</code></p>\n<blockquote>\n<p>A. 請參考 <a href=\"https://openhome.cc/Gossip/ServletJSP/Pluggability.html\" target=\"_blank\" rel=\"noopener\">https://openhome.cc/Gossip/ServletJSP/Pluggability.html</a></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>關於<code>Inversion Of Control (IOC)</code></p>\n<ul>\n<li>控制(流程)反轉</li>\n<li>程式整體的架構流程由開發者轉移到第三方來做控制</li>\n</ul>\n</li>\n<li><p>什麼是<code>依賴 (Dependency)</code></p>\n<ul>\n<li>當一個類別需要實作其他類別時，就是<strong>依賴(Dependency)</strong> 關係</li>\n</ul>\n</li>\n<li><p>什麼是<code>Dependency Injection</code></p>\n<ul>\n<li>可使類別之間的耦合不那麼緊密</li>\n<li>對於在類別要使用另外的類別採取<strong>注入</strong>的方式</li>\n<li><strong>注入</strong>方式可以是用setter取得…等，採取由外部供應<ul>\n<li>建構子注入</li>\n<li>setter注入</li>\n<li>interface注入</li>\n</ul>\n</li>\n<li>類別裡不主動實作其他類別</li>\n</ul>\n</li>\n<li><p>什麼是<code>POJO</code></p>\n</li>\n<li><p>什麼是<code>bean</code></p>\n</li>\n<li><p>什麼是<code>JSP</code></p>\n</li>\n<li><p>什麼是<code>JPA</code></p>\n</li>\n<li><p>什麼是<code>hibernate</code></p>\n</li>\n<li><p>什麼是<code>contextConfigLocation</code></p>\n</li>\n<li><p><code>context-param</code> &amp; <code>init-param</code> 區別</p>\n</li>\n<li><p><code>dispather-servlet.xml</code> &amp; <code>applcationContext.xml</code> 差別</p>\n</li>\n<li><p>在儲存 <code>web.xml</code>loading會很久</p>\n</li>\n<li><p>關於在 <code>Maven Project</code> 找不到 <strong>Run Server</strong></p>\n</li>\n<li><p>關於 <code>The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application</code></p>\n<blockquote>\n<p>指定 uri: [<a href=\"http://java.sun.com/jsp/jstl/core]\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core]</a> 有重複無法解析，刪除多餘的就可以了</p>\n</blockquote>\n</li>\n<li><p>關於 Error org.springframework.beans.factory.BeanDefinitionStoreException …ASM ClassReader failed to parse class</p>\n<blockquote>\n<p>JRE 版本跟 Spring版本對不上</p>\n</blockquote>\n</li>\n<li><p>關於 Java compiler level does not match </p>\n<blockquote>\n<p>到專案根目錄找<code>.setting</code>資料夾(隱藏)，找 <code>org.eclipse.wst.common.project.facet.core.xml</code> 修改 java版本</p>\n</blockquote>\n</li>\n<li><p>關於 Bean property ‘name’ is not readable or has an invalid getter method</p>\n<blockquote>\n<p>沒有設定變數 <code>name</code>的 getter | setter</p>\n</blockquote>\n</li>\n<li><p>關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer</p>\n<blockquote>\n<p>找不到 WebApplicationInitializer ，是因為用 Maven</p>\n</blockquote>\n<ul>\n<li>解決辦法<ul>\n<li>在管理資源，在專案右鍵 -&gt; properties -&gt; Deployment Assembly -&gt; 按下Add </li>\n<li>選擇 Java Build Path Entries</li>\n<li>選擇 Maven Dependencies  </li>\n<li>Apply</li>\n</ul>\n</li>\n<li>參考資料<ul>\n<li><a href=\"https://dotblogs.com.tw/raylee/2019/04/22/104236\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/raylee/2019/04/22/104236</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named</p>\n<blockquote>\n<p>因為沒讀到 persistence.xml ，要放在 <code>META-INF</code>資料夾下，資料夾要在<code>Java Build Path</code> &gt; <code>Source</code>下新增</p>\n</blockquote>\n</li>\n<li><p>關於 WebAppInitializer class 在 Server 啟動時，沒有被實作</p>\n<ul>\n<li>Servlet Container 要支援 <strong>Servlet 3.0</strong></li>\n<li>實作 <code>SpringServletContainerInitializer</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>src</code>底下新增 <code>resources</code> &gt; <code>META-INF</code> &gt; <code>services</code><ul>\n<li>新建檔案 <code>javax.servlet.ServletContainerInitializer</code></li>\n<li>內容輸入完整的 <code>SpringServletContainerInitializer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Q. Server Tomcat v9.0 Server at localhost failed to start.</p>\n<blockquote>\n<p>A. 發現是專案出現 <strong>More than one fragment with the name [spring_web] was found. This is not legal …”</strong></p>\n</blockquote>\n</li>\n<li><p>Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal …”</p>\n<blockquote>\n<p>A. 在 web.xml 的 <code>web-app</code>加上 <code>&lt;absolute-ordering /&gt;</code></p>\n</blockquote>\n</li>\n<li><p>Q. 什麼是 <code>&lt;absolute-ordering /&gt;</code></p>\n<blockquote>\n<p>A. 請參考 <a href=\"https://openhome.cc/Gossip/ServletJSP/Pluggability.html\" target=\"_blank\" rel=\"noopener\">https://openhome.cc/Gossip/ServletJSP/Pluggability.html</a></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"JAVA-Spring Simple Test","date":"2020-01-26T08:20:11.000Z","_content":"## Spring 簡單測試專案\n* 新增 **Java Project**\n* 建立測試物件\n    * 建立 IGun 介面，設定 Gun 系列標準\n    * 以 IGun 為基礎，建立 FireGun & IceGun\n* 建立 POJO\n    * 建立 Role class \n        * 參數\n            * name\n            * Gun\n    * 實作 getter & setter 對 Gun & name\n* 建立 Bean.xml 描述物件\n    * Role\n    * FireGun\n    * IceGun\n* 在 `main class` 讀取 **Bean.xml** ，建立 Role物件，並呼叫 ","source":"java-spring-sample-project-intro/index.md","raw":"---\ntitle: JAVA-Spring Simple Test\ndate: 2020-01-26 16:20:11\n---\n## Spring 簡單測試專案\n* 新增 **Java Project**\n* 建立測試物件\n    * 建立 IGun 介面，設定 Gun 系列標準\n    * 以 IGun 為基礎，建立 FireGun & IceGun\n* 建立 POJO\n    * 建立 Role class \n        * 參數\n            * name\n            * Gun\n    * 實作 getter & setter 對 Gun & name\n* 建立 Bean.xml 描述物件\n    * Role\n    * FireGun\n    * IceGun\n* 在 `main class` 讀取 **Bean.xml** ，建立 Role物件，並呼叫 ","updated":"2020-01-26T09:43:05.802Z","path":"java-spring-sample-project-intro/index.html","comments":1,"layout":"page","_id":"ckuy1kd9e001n5ojt437new8a","content":"<h2 id=\"Spring-簡單測試專案\"><a href=\"#Spring-簡單測試專案\" class=\"headerlink\" title=\"Spring 簡單測試專案\"></a>Spring 簡單測試專案</h2><ul>\n<li>新增 <strong>Java Project</strong></li>\n<li>建立測試物件<ul>\n<li>建立 IGun 介面，設定 Gun 系列標準</li>\n<li>以 IGun 為基礎，建立 FireGun &amp; IceGun</li>\n</ul>\n</li>\n<li>建立 POJO<ul>\n<li>建立 Role class <ul>\n<li>參數<ul>\n<li>name</li>\n<li>Gun</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 getter &amp; setter 對 Gun &amp; name</li>\n</ul>\n</li>\n<li>建立 Bean.xml 描述物件<ul>\n<li>Role</li>\n<li>FireGun</li>\n<li>IceGun</li>\n</ul>\n</li>\n<li>在 <code>main class</code> 讀取 <strong>Bean.xml</strong> ，建立 Role物件，並呼叫 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-簡單測試專案\"><a href=\"#Spring-簡單測試專案\" class=\"headerlink\" title=\"Spring 簡單測試專案\"></a>Spring 簡單測試專案</h2><ul>\n<li>新增 <strong>Java Project</strong></li>\n<li>建立測試物件<ul>\n<li>建立 IGun 介面，設定 Gun 系列標準</li>\n<li>以 IGun 為基礎，建立 FireGun &amp; IceGun</li>\n</ul>\n</li>\n<li>建立 POJO<ul>\n<li>建立 Role class <ul>\n<li>參數<ul>\n<li>name</li>\n<li>Gun</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 getter &amp; setter 對 Gun &amp; name</li>\n</ul>\n</li>\n<li>建立 Bean.xml 描述物件<ul>\n<li>Role</li>\n<li>FireGun</li>\n<li>IceGun</li>\n</ul>\n</li>\n<li>在 <code>main class</code> 讀取 <strong>Bean.xml</strong> ，建立 Role物件，並呼叫 </li>\n</ul>\n"},{"title":"JAVA-Spring-WebSite-for-Eclipse2","date":"2020-02-13T16:46:21.000Z","_content":"\n## JAVA-Spring WebSite for Eclipse for JavaConfig 設定\n\n### Web <-> Server \n\n* 設定 WebInitializer.java\n    * 設定 `DispatcherServlet`\n\n        ``` java\n        @Configuration\n        public class WebAppInitializer implements WebApplicationInitializer{\n\n            @Override\n            public void onStartup(ServletContext servletContext) throws ServletException{\n                System.out.println(\"MVC WebAppInitializer StartUp!\");\n                AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext();\n                appContext.register(WebMvcConfig.class);\n                \n                ServletRegistration.Dynamic dispather =servletContext.addServlet(\n                        \"SpringDispatcher\", new DispatcherServlet(appContext));\n                dispather.setLoadOnStartup(1);\n                dispather.addMapping(\"/\");\n                \n            }\n            \n        }\n\n        ```\n* 設定 WebConfig\n    * 加上 `annotation`\n\n        ``` java\n        @Configuration\n        @EnableWebMvc\n        @ComponentScan(\"com.test \")//設定要掃描的 Component package\n        public class WebMvcConfig extends WebMvcConfigurerAdapter{\n        ```\n    * 設定將要載入的`bean`\n\n        ``` java\n        //設定從 Controller 返回 String or ModelAndView 提取 view 的解析器\n        @Bean(name = \"viewResolver\")\n        public InternalResourceViewResolver getViewResolver() {\n            InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n            viewResolver.setPrefix(\"/WEB-INF/views/\");\n            viewResolver.setSuffix(\".jsp\");\n            return viewResolver;\n        }\n\n\n        ```\n    * 有需要接收 json 格式 ，需加載`mappingJackson2HttpMessageConverter`，否則會出現 ERROR:`Completed 415 UNSUPPORTED_MEDIA_TYPE`\n\n        ```java\n        @Bean\n        public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter(\n                @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,\n                @Autowired ContentNegotiationManager mvcContentNegotiationManager) {\n            RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();\n            requestMappingHandlerAdapter\n                    .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));\n            requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);\n            return requestMappingHandlerAdapter;\n        }\n\n        @Bean\n        public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {\n            return new MappingJackson2HttpMessageConverter();\n        }\n        ```\n* 設定 Controller\n    * 建立 Controller.java\n        ```java\n        @Controller\n        public class Controller {\n        \n        ```\n    * 針對 url 設定 `RequestMapping`\n        * 由頁面初始化時觸發\n        * 前端接資料由 **jsp** 方式去接\n        * 回傳 string，代表指定頁面\n        * 需要帶值傳遞，回傳 **ModelAndView class**\n        * 有參數要帶入加上 `@RequestParam` annotation\n\n        ```java\n        @RequestMapping(\"/edit\")\n        public ModelAndView editCustomerForm(@RequestParam Long id) {\n            System.out.println(\"action edit\");\n            Customer customer = customerService.get(id);\n            ModelAndView mv = new ModelAndView(\"edit_customer\");\n            mv.addObject(\"customer\", customer);\n            return mv;\n        }\n        ```\n    * 以 api 方式呼叫，設定\n        * `RequestMapping`需帶入\n            * value : api url\n            * method : 回傳方式 POST or GET\n        * 回傳自定格式需加上 `@ResponseBody` annotation\n        \n        ```java\n        @RequestMapping(value = \"/hello.action\",method = RequestMethod.POST)\n        @ResponseBody\n        public User jsontest(@RequestBody UseInfo use) {\n            System.out.println(\"received jsontest\");\n            \n            Date dNow = new Date( );\n            SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n            User u= new User(use.getName() ,ft.format(dNow) ,use.getPrice());\n            return u;\n            \n        }\n  \n      ```\n* 要讓 `Tomcat Server`在啟動時，自動的讀取 `WebInitializer`\n    * 設定 `SpringServletContainerInitializer.java`\n\n        ```java\n        //設定 onStartup要啟動的 class\n        @HandlesTypes({WebApplicationInitializer.class})\n        public class SpringServletContainerInitializer implements ServletContainerInitializer{\n            public  SpringServletContainerInitializer() {\n                \n            }\n            \n            @Override\n            public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n                System.out.println(\"MVC StartUp!\");\n\n\n            \n            }\n\n        }\n\n        ```\n    * 建立 `javax.servlet.ServletContainerInitializer` \n        * 在專案按右鍵 \b> Build Path > Configure Build Path \n        * 選擇 Source\n        * 在 src底下建立 /resources/META-INF/services/ 資料夾\n        * 新增檔案 `javax.servlet.ServletContainerInitializer`(無附檔名)\n            * 加入內容\n\n                ```\n                com.test.config.SpringServletContainerInitializer\n                ```\n    * 不建立 `javax.servlet.ServletContainerInitializer` 會無法啟動  **SpringServletContainerInitializer**   \n\n    \n\n\n\n","source":"java-spring-website-for-javaconfig/index.md","raw":"---\ntitle: JAVA-Spring-WebSite-for-Eclipse2\ndate: 2020-02-14 00:46:21\n---\n\n## JAVA-Spring WebSite for Eclipse for JavaConfig 設定\n\n### Web <-> Server \n\n* 設定 WebInitializer.java\n    * 設定 `DispatcherServlet`\n\n        ``` java\n        @Configuration\n        public class WebAppInitializer implements WebApplicationInitializer{\n\n            @Override\n            public void onStartup(ServletContext servletContext) throws ServletException{\n                System.out.println(\"MVC WebAppInitializer StartUp!\");\n                AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext();\n                appContext.register(WebMvcConfig.class);\n                \n                ServletRegistration.Dynamic dispather =servletContext.addServlet(\n                        \"SpringDispatcher\", new DispatcherServlet(appContext));\n                dispather.setLoadOnStartup(1);\n                dispather.addMapping(\"/\");\n                \n            }\n            \n        }\n\n        ```\n* 設定 WebConfig\n    * 加上 `annotation`\n\n        ``` java\n        @Configuration\n        @EnableWebMvc\n        @ComponentScan(\"com.test \")//設定要掃描的 Component package\n        public class WebMvcConfig extends WebMvcConfigurerAdapter{\n        ```\n    * 設定將要載入的`bean`\n\n        ``` java\n        //設定從 Controller 返回 String or ModelAndView 提取 view 的解析器\n        @Bean(name = \"viewResolver\")\n        public InternalResourceViewResolver getViewResolver() {\n            InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n            viewResolver.setPrefix(\"/WEB-INF/views/\");\n            viewResolver.setSuffix(\".jsp\");\n            return viewResolver;\n        }\n\n\n        ```\n    * 有需要接收 json 格式 ，需加載`mappingJackson2HttpMessageConverter`，否則會出現 ERROR:`Completed 415 UNSUPPORTED_MEDIA_TYPE`\n\n        ```java\n        @Bean\n        public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter(\n                @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,\n                @Autowired ContentNegotiationManager mvcContentNegotiationManager) {\n            RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();\n            requestMappingHandlerAdapter\n                    .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));\n            requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);\n            return requestMappingHandlerAdapter;\n        }\n\n        @Bean\n        public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {\n            return new MappingJackson2HttpMessageConverter();\n        }\n        ```\n* 設定 Controller\n    * 建立 Controller.java\n        ```java\n        @Controller\n        public class Controller {\n        \n        ```\n    * 針對 url 設定 `RequestMapping`\n        * 由頁面初始化時觸發\n        * 前端接資料由 **jsp** 方式去接\n        * 回傳 string，代表指定頁面\n        * 需要帶值傳遞，回傳 **ModelAndView class**\n        * 有參數要帶入加上 `@RequestParam` annotation\n\n        ```java\n        @RequestMapping(\"/edit\")\n        public ModelAndView editCustomerForm(@RequestParam Long id) {\n            System.out.println(\"action edit\");\n            Customer customer = customerService.get(id);\n            ModelAndView mv = new ModelAndView(\"edit_customer\");\n            mv.addObject(\"customer\", customer);\n            return mv;\n        }\n        ```\n    * 以 api 方式呼叫，設定\n        * `RequestMapping`需帶入\n            * value : api url\n            * method : 回傳方式 POST or GET\n        * 回傳自定格式需加上 `@ResponseBody` annotation\n        \n        ```java\n        @RequestMapping(value = \"/hello.action\",method = RequestMethod.POST)\n        @ResponseBody\n        public User jsontest(@RequestBody UseInfo use) {\n            System.out.println(\"received jsontest\");\n            \n            Date dNow = new Date( );\n            SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n            User u= new User(use.getName() ,ft.format(dNow) ,use.getPrice());\n            return u;\n            \n        }\n  \n      ```\n* 要讓 `Tomcat Server`在啟動時，自動的讀取 `WebInitializer`\n    * 設定 `SpringServletContainerInitializer.java`\n\n        ```java\n        //設定 onStartup要啟動的 class\n        @HandlesTypes({WebApplicationInitializer.class})\n        public class SpringServletContainerInitializer implements ServletContainerInitializer{\n            public  SpringServletContainerInitializer() {\n                \n            }\n            \n            @Override\n            public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n                System.out.println(\"MVC StartUp!\");\n\n\n            \n            }\n\n        }\n\n        ```\n    * 建立 `javax.servlet.ServletContainerInitializer` \n        * 在專案按右鍵 \b> Build Path > Configure Build Path \n        * 選擇 Source\n        * 在 src底下建立 /resources/META-INF/services/ 資料夾\n        * 新增檔案 `javax.servlet.ServletContainerInitializer`(無附檔名)\n            * 加入內容\n\n                ```\n                com.test.config.SpringServletContainerInitializer\n                ```\n    * 不建立 `javax.servlet.ServletContainerInitializer` 會無法啟動  **SpringServletContainerInitializer**   \n\n    \n\n\n\n","updated":"2020-02-25T17:38:16.062Z","path":"java-spring-website-for-javaconfig/index.html","comments":1,"layout":"page","_id":"ckuy1kd9f001r5ojthnnogojo","content":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for JavaConfig 設定\"></a>JAVA-Spring WebSite for Eclipse for JavaConfig 設定</h2><h3 id=\"Web-lt-gt-Server\"><a href=\"#Web-lt-gt-Server\" class=\"headerlink\" title=\"Web &lt;-&gt; Server\"></a>Web &lt;-&gt; Server</h3><ul>\n<li><p>設定 WebInitializer.java</p>\n<ul>\n<li><p>設定 <code>DispatcherServlet</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebApplicationInitializer</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(ServletContext servletContext)</span> <span class=\"keyword\">throws</span> ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC WebAppInitializer StartUp!\"</span>);</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext appContext = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        appContext.register(WebMvcConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ServletRegistration.Dynamic dispather =servletContext.addServlet(</span><br><span class=\"line\">                <span class=\"string\">\"SpringDispatcher\"</span>, <span class=\"keyword\">new</span> DispatcherServlet(appContext));</span><br><span class=\"line\">        dispather.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        dispather.addMapping(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 WebConfig</p>\n<ul>\n<li><p>加上 <code>annotation</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.test \"</span>)<span class=\"comment\">//設定要掃描的 Component package</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>設定將要載入的<code>bean</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定從 Controller 返回 String or ModelAndView 提取 view 的解析器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"viewResolver\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InternalResourceViewResolver <span class=\"title\">getViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    InternalResourceViewResolver viewResolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">    viewResolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">    viewResolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> viewResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要接收 json 格式 ，需加載<code>mappingJackson2HttpMessageConverter</code>，否則會出現 ERROR:<code>Completed 415 UNSUPPORTED_MEDIA_TYPE</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerAdapter <span class=\"title\">getRequestMappingHandlerAdapter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingHandlerAdapter requestMappingHandlerAdapter = <span class=\"keyword\">new</span> RequestMappingHandlerAdapter();</span><br><span class=\"line\">    requestMappingHandlerAdapter</span><br><span class=\"line\">            .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));</span><br><span class=\"line\">    requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestMappingHandlerAdapter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 Controller</p>\n<ul>\n<li><p>建立 Controller.java</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>針對 url 設定 <code>RequestMapping</code></p>\n<ul>\n<li><p>由頁面初始化時觸發</p>\n</li>\n<li><p>前端接資料由 <strong>jsp</strong> 方式去接</p>\n</li>\n<li><p>回傳 string，代表指定頁面</p>\n</li>\n<li><p>需要帶值傳遞，回傳 <strong>ModelAndView class</strong></p>\n</li>\n<li><p>有參數要帶入加上 <code>@RequestParam</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/edit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editCustomerForm</span><span class=\"params\">(@RequestParam Long id)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"action edit\"</span>);</span><br><span class=\"line\">    Customer customer = customerService.get(id);</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"edit_customer\"</span>);</span><br><span class=\"line\">    mv.addObject(<span class=\"string\">\"customer\"</span>, customer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>以 api 方式呼叫，設定</p>\n<ul>\n<li><p><code>RequestMapping</code>需帶入</p>\n<ul>\n<li>value : api url</li>\n<li>method : 回傳方式 POST or GET</li>\n</ul>\n</li>\n<li><p>回傳自定格式需加上 <code>@ResponseBody</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello.action\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">jsontest</span><span class=\"params\">(@RequestBody UseInfo use)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"received jsontest\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Date dNow = <span class=\"keyword\">new</span> Date( );</span><br><span class=\"line\">    SimpleDateFormat ft = <span class=\"keyword\">new</span> SimpleDateFormat (<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</span><br><span class=\"line\">    User u= <span class=\"keyword\">new</span> User(use.getName() ,ft.format(dNow) ,use.getPrice());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要讓 <code>Tomcat Server</code>在啟動時，自動的讀取 <code>WebInitializer</code></p>\n<ul>\n<li><p>設定 <code>SpringServletContainerInitializer.java</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定 onStartup要啟動的 class</span></span><br><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">SpringServletContainerInitializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC StartUp!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>javax.servlet.ServletContainerInitializer</code> </p>\n<ul>\n<li><p>在專案按右鍵 \b&gt; Build Path &gt; Configure Build Path </p>\n</li>\n<li><p>選擇 Source</p>\n</li>\n<li><p>在 src底下建立 /resources/META-INF/services/ 資料夾</p>\n</li>\n<li><p>新增檔案 <code>javax.servlet.ServletContainerInitializer</code>(無附檔名)</p>\n<ul>\n<li><p>加入內容</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.test.config.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>不建立 <code>javax.servlet.ServletContainerInitializer</code> 會無法啟動  <strong>SpringServletContainerInitializer</strong>   </p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for JavaConfig 設定\"></a>JAVA-Spring WebSite for Eclipse for JavaConfig 設定</h2><h3 id=\"Web-lt-gt-Server\"><a href=\"#Web-lt-gt-Server\" class=\"headerlink\" title=\"Web &lt;-&gt; Server\"></a>Web &lt;-&gt; Server</h3><ul>\n<li><p>設定 WebInitializer.java</p>\n<ul>\n<li><p>設定 <code>DispatcherServlet</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebApplicationInitializer</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(ServletContext servletContext)</span> <span class=\"keyword\">throws</span> ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC WebAppInitializer StartUp!\"</span>);</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext appContext = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        appContext.register(WebMvcConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ServletRegistration.Dynamic dispather =servletContext.addServlet(</span><br><span class=\"line\">                <span class=\"string\">\"SpringDispatcher\"</span>, <span class=\"keyword\">new</span> DispatcherServlet(appContext));</span><br><span class=\"line\">        dispather.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        dispather.addMapping(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 WebConfig</p>\n<ul>\n<li><p>加上 <code>annotation</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.test \"</span>)<span class=\"comment\">//設定要掃描的 Component package</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>設定將要載入的<code>bean</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定從 Controller 返回 String or ModelAndView 提取 view 的解析器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"viewResolver\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InternalResourceViewResolver <span class=\"title\">getViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    InternalResourceViewResolver viewResolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">    viewResolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">    viewResolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> viewResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要接收 json 格式 ，需加載<code>mappingJackson2HttpMessageConverter</code>，否則會出現 ERROR:<code>Completed 415 UNSUPPORTED_MEDIA_TYPE</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerAdapter <span class=\"title\">getRequestMappingHandlerAdapter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingHandlerAdapter requestMappingHandlerAdapter = <span class=\"keyword\">new</span> RequestMappingHandlerAdapter();</span><br><span class=\"line\">    requestMappingHandlerAdapter</span><br><span class=\"line\">            .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));</span><br><span class=\"line\">    requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestMappingHandlerAdapter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 Controller</p>\n<ul>\n<li><p>建立 Controller.java</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>針對 url 設定 <code>RequestMapping</code></p>\n<ul>\n<li><p>由頁面初始化時觸發</p>\n</li>\n<li><p>前端接資料由 <strong>jsp</strong> 方式去接</p>\n</li>\n<li><p>回傳 string，代表指定頁面</p>\n</li>\n<li><p>需要帶值傳遞，回傳 <strong>ModelAndView class</strong></p>\n</li>\n<li><p>有參數要帶入加上 <code>@RequestParam</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/edit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editCustomerForm</span><span class=\"params\">(@RequestParam Long id)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"action edit\"</span>);</span><br><span class=\"line\">    Customer customer = customerService.get(id);</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"edit_customer\"</span>);</span><br><span class=\"line\">    mv.addObject(<span class=\"string\">\"customer\"</span>, customer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>以 api 方式呼叫，設定</p>\n<ul>\n<li><p><code>RequestMapping</code>需帶入</p>\n<ul>\n<li>value : api url</li>\n<li>method : 回傳方式 POST or GET</li>\n</ul>\n</li>\n<li><p>回傳自定格式需加上 <code>@ResponseBody</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello.action\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">jsontest</span><span class=\"params\">(@RequestBody UseInfo use)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"received jsontest\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Date dNow = <span class=\"keyword\">new</span> Date( );</span><br><span class=\"line\">    SimpleDateFormat ft = <span class=\"keyword\">new</span> SimpleDateFormat (<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</span><br><span class=\"line\">    User u= <span class=\"keyword\">new</span> User(use.getName() ,ft.format(dNow) ,use.getPrice());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要讓 <code>Tomcat Server</code>在啟動時，自動的讀取 <code>WebInitializer</code></p>\n<ul>\n<li><p>設定 <code>SpringServletContainerInitializer.java</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定 onStartup要啟動的 class</span></span><br><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">SpringServletContainerInitializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC StartUp!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>javax.servlet.ServletContainerInitializer</code> </p>\n<ul>\n<li><p>在專案按右鍵 \b&gt; Build Path &gt; Configure Build Path </p>\n</li>\n<li><p>選擇 Source</p>\n</li>\n<li><p>在 src底下建立 /resources/META-INF/services/ 資料夾</p>\n</li>\n<li><p>新增檔案 <code>javax.servlet.ServletContainerInitializer</code>(無附檔名)</p>\n<ul>\n<li><p>加入內容</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.test.config.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>不建立 <code>javax.servlet.ServletContainerInitializer</code> 會無法啟動  <strong>SpringServletContainerInitializer</strong>   </p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Jave Learning","date":"2020-01-28T20:13:13.000Z","_content":"\n* @ 符號\n    * 註解 **annotation**\n    * 使用範圍\n        * 給**編譯器**檢視\n        * 給**開發者**做設定\n    * 類型\n        * 系統定義\n            * @Override\n        * 元註解\n            * @Target\n            * @Retention\n            * @Documented\n            * @Inherited\n        * 自定義註解\n            * 宣告 `Interface` 前面加上 `@`\n        ```java\n        public @interface MyAnnotation1 {\n        }\n        ```\n\n\n","source":"jave-learning/index.md","raw":"---\ntitle: Jave Learning\ndate: 2020-01-29 04:13:13\n---\n\n* @ 符號\n    * 註解 **annotation**\n    * 使用範圍\n        * 給**編譯器**檢視\n        * 給**開發者**做設定\n    * 類型\n        * 系統定義\n            * @Override\n        * 元註解\n            * @Target\n            * @Retention\n            * @Documented\n            * @Inherited\n        * 自定義註解\n            * 宣告 `Interface` 前面加上 `@`\n        ```java\n        public @interface MyAnnotation1 {\n        }\n        ```\n\n\n","updated":"2020-01-29T17:17:58.783Z","path":"jave-learning/index.html","comments":1,"layout":"page","_id":"ckuy1kd9g001s5ojt4pjod2ii","content":"<ul>\n<li>@ 符號<ul>\n<li>註解 <strong>annotation</strong></li>\n<li>使用範圍<ul>\n<li>給<strong>編譯器</strong>檢視</li>\n<li>給<strong>開發者</strong>做設定</li>\n</ul>\n</li>\n<li>類型<ul>\n<li>系統定義<ul>\n<li>@Override</li>\n</ul>\n</li>\n<li>元註解<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Documented</li>\n<li>@Inherited</li>\n</ul>\n</li>\n<li>自定義註解<ul>\n<li>宣告 <code>Interface</code> 前面加上 <code>@</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation1 &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>@ 符號<ul>\n<li>註解 <strong>annotation</strong></li>\n<li>使用範圍<ul>\n<li>給<strong>編譯器</strong>檢視</li>\n<li>給<strong>開發者</strong>做設定</li>\n</ul>\n</li>\n<li>類型<ul>\n<li>系統定義<ul>\n<li>@Override</li>\n</ul>\n</li>\n<li>元註解<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Documented</li>\n<li>@Inherited</li>\n</ul>\n</li>\n<li>自定義註解<ul>\n<li>宣告 <code>Interface</code> 前面加上 <code>@</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation1 &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-10","date":"2020-03-02T15:56:14.000Z","_content":"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\n\n### 關於 || 運算子\n* 用於判斷左右兩側值是否存在\n    * 其中一方存在，回傳已存在一方\n    * 兩方都存在，回傳左邊的值\n* 不存在的定義為\n   * null | undefined | false | 0 | \"\"\n```js\nconst v1 = true;\nconst v2 = false;\nconsole.log(v1 || v2);// true\n\nconst v3 = \"\";\nconst v4 = \"goood day~\";\nconsole.log(v3 || v4);// goood day~\n\nconst v5 = 0;\nconst v6 = 10;\nconsole.log(v5 || v6);// 10\n\nconst v7 = {};\nconst v8 = null;\nconsole.log(v7 || v8);// {}\n```\n\n### 關於 Object\n* 有關連的變數 or 方法 的集合體 \n* **基礎型別**之一   \n* 建立物件\n   ```js\n   var obj1 = {};\n   var obj2 = new Object();\n   ```\n* 在集合體內的`屬性(property)`為**物件成員**\n* \b\b\b\b\b`屬性`以 `key ＝ value `的形式保存\n   * 放入**number\b or string** 是以 `call by value` ， 放入 **function** or **object**則是 `call by reference`\n   * 建立物件屬性方式有 **dot notation** `.` & **bracket notation**`[]`\n   ```js\n   //變數(call by value)\n   obj1[\"arg\"] = 1;\n   obj2.arg = 2;\n\n   //function (call by reference)\n   obj1[\"func\"] =func1\n   obj2.func = func1;\n\n   //因為 function 會提升，所以可以放在後面\n   function func1(v){\n      console.log(\"this is func \"+ v);\n   };\n   ```\n\n* 呼叫 \n   ```js\n   //1\n   console.log(obj1[\"arg\"]);\n   //2\n   console.log(obj2.arg);\n   //this is func 1\n   console.log(obj1[\"func\"](1));\n   //this is func 2\n   console.log(obj2.func(2));\n   ```\n\n### Operator \".\"\n>  ObjectName.PropertyName\n* `Member Access`\n* 由左至右\n* 可以訪問物件的屬性內容\n* 優先度 19 \n* 當右邊有等號時，會把右邊值給予該屬性\n```js\nvar obj = {};\nobj.arg = 2;\n```\n\n### JSON\n* JavaScript Object Notation\n* 結構化資料(Structured Data)\n* 用於傳輸資料\n   * 傳輸資料的 MIME Type 是 `application/json`\n* 以 JavaScript 物件格式儲存資料\n* 只包含基本資料結構，不會有 **function**\n* 單筆資料以`{}`包住，多筆資料以`[]`包住單筆資料\n* 屬性資料格式是 `\"key\":value`，key值必須要有**雙引號(\")**包住\n```json\n{\n   \"human\":[//array\n      {\n         \"name\":\"Tony\",\n         \"age\" :29,\n         \"single\": true,\n         \"height\": 176,\n         \"weight\":  70\n      },\n      {//objecy\n         \"name\":\"Ross\",\n         \"age\" :19,\n         \"single\": false,\n         \"height\": 166,\n         \"weight\":  50,\n         \"sex\":\"female\"\n      }\n   ],\n   \"car\":[\n      \"Toyota\",\n      \"Mazda\",\n      \"Honda\"\n   ],\n   \"acount\":1000,//number\n   \"local\":\"Taipei\"//string\n}\n```\n\n### Statement(陳述句) ＆ Expression(表達示)\n* 程式碼一段功能的單位\n* Statement 執行其程式碼**不會有返回值**\n```js\ntry{\n   //do something\n}catch(e){\n   //\n}\n\nfor(var i = 0 ; i < 10 ;i++){\n   //do something\n}\n\nif(a > b){\n   //do something\n}\n\nfunction StatementFunc(){\n   console.log(\"function Statement\");\n}\n```\n* Expression 執行其程式碼**會有返回值**\n```js\nvar i = 10;\n//Function Expression\nvar fExp = function(){\n   console.log(\"function Expression\");\n}\n```","source":"js-learning-note-2019-12-10/index.md","raw":"---\ntitle: JSLearningNote_2019-12-10\ndate: 2020-03-02 23:56:14\n---\nhttps://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\n\n### 關於 || 運算子\n* 用於判斷左右兩側值是否存在\n    * 其中一方存在，回傳已存在一方\n    * 兩方都存在，回傳左邊的值\n* 不存在的定義為\n   * null | undefined | false | 0 | \"\"\n```js\nconst v1 = true;\nconst v2 = false;\nconsole.log(v1 || v2);// true\n\nconst v3 = \"\";\nconst v4 = \"goood day~\";\nconsole.log(v3 || v4);// goood day~\n\nconst v5 = 0;\nconst v6 = 10;\nconsole.log(v5 || v6);// 10\n\nconst v7 = {};\nconst v8 = null;\nconsole.log(v7 || v8);// {}\n```\n\n### 關於 Object\n* 有關連的變數 or 方法 的集合體 \n* **基礎型別**之一   \n* 建立物件\n   ```js\n   var obj1 = {};\n   var obj2 = new Object();\n   ```\n* 在集合體內的`屬性(property)`為**物件成員**\n* \b\b\b\b\b`屬性`以 `key ＝ value `的形式保存\n   * 放入**number\b or string** 是以 `call by value` ， 放入 **function** or **object**則是 `call by reference`\n   * 建立物件屬性方式有 **dot notation** `.` & **bracket notation**`[]`\n   ```js\n   //變數(call by value)\n   obj1[\"arg\"] = 1;\n   obj2.arg = 2;\n\n   //function (call by reference)\n   obj1[\"func\"] =func1\n   obj2.func = func1;\n\n   //因為 function 會提升，所以可以放在後面\n   function func1(v){\n      console.log(\"this is func \"+ v);\n   };\n   ```\n\n* 呼叫 \n   ```js\n   //1\n   console.log(obj1[\"arg\"]);\n   //2\n   console.log(obj2.arg);\n   //this is func 1\n   console.log(obj1[\"func\"](1));\n   //this is func 2\n   console.log(obj2.func(2));\n   ```\n\n### Operator \".\"\n>  ObjectName.PropertyName\n* `Member Access`\n* 由左至右\n* 可以訪問物件的屬性內容\n* 優先度 19 \n* 當右邊有等號時，會把右邊值給予該屬性\n```js\nvar obj = {};\nobj.arg = 2;\n```\n\n### JSON\n* JavaScript Object Notation\n* 結構化資料(Structured Data)\n* 用於傳輸資料\n   * 傳輸資料的 MIME Type 是 `application/json`\n* 以 JavaScript 物件格式儲存資料\n* 只包含基本資料結構，不會有 **function**\n* 單筆資料以`{}`包住，多筆資料以`[]`包住單筆資料\n* 屬性資料格式是 `\"key\":value`，key值必須要有**雙引號(\")**包住\n```json\n{\n   \"human\":[//array\n      {\n         \"name\":\"Tony\",\n         \"age\" :29,\n         \"single\": true,\n         \"height\": 176,\n         \"weight\":  70\n      },\n      {//objecy\n         \"name\":\"Ross\",\n         \"age\" :19,\n         \"single\": false,\n         \"height\": 166,\n         \"weight\":  50,\n         \"sex\":\"female\"\n      }\n   ],\n   \"car\":[\n      \"Toyota\",\n      \"Mazda\",\n      \"Honda\"\n   ],\n   \"acount\":1000,//number\n   \"local\":\"Taipei\"//string\n}\n```\n\n### Statement(陳述句) ＆ Expression(表達示)\n* 程式碼一段功能的單位\n* Statement 執行其程式碼**不會有返回值**\n```js\ntry{\n   //do something\n}catch(e){\n   //\n}\n\nfor(var i = 0 ; i < 10 ;i++){\n   //do something\n}\n\nif(a > b){\n   //do something\n}\n\nfunction StatementFunc(){\n   console.log(\"function Statement\");\n}\n```\n* Expression 執行其程式碼**會有返回值**\n```js\nvar i = 10;\n//Function Expression\nvar fExp = function(){\n   console.log(\"function Expression\");\n}\n```","updated":"2020-03-19T15:54:55.996Z","path":"js-learning-note-2019-12-10/index.html","comments":1,"layout":"page","_id":"ckuy1kd9h001w5ojt19l34xt4","content":"<p><a href=\"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view</a></p>\n<h3 id=\"關於-運算子\"><a href=\"#關於-運算子\" class=\"headerlink\" title=\"關於 || 運算子\"></a>關於 || 運算子</h3><ul>\n<li>用於判斷左右兩側值是否存在<ul>\n<li>其中一方存在，回傳已存在一方</li>\n<li>兩方都存在，回傳左邊的值</li>\n</ul>\n</li>\n<li>不存在的定義為<ul>\n<li>null | undefined | false | 0 | “”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1 || v2);<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v4 = <span class=\"string\">\"goood day~\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v3 || v4);<span class=\"comment\">// goood day~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v6 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v5 || v6);<span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v7 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v8 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v7 || v8);<span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"關於-Object\"><a href=\"#關於-Object\" class=\"headerlink\" title=\"關於 Object\"></a>關於 Object</h3><ul>\n<li><p>有關連的變數 or 方法 的集合體 </p>\n</li>\n<li><p><strong>基礎型別</strong>之一   </p>\n</li>\n<li><p>建立物件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure></li>\n<li><p>在集合體內的<code>屬性(property)</code>為<strong>物件成員</strong></p>\n</li>\n<li><p>\b\b\b\b\b<code>屬性</code>以 <code>key ＝ value</code>的形式保存</p>\n<ul>\n<li>放入<strong>number\b or string</strong> 是以 <code>call by value</code> ， 放入 <strong>function</strong> or <strong>object</strong>則是 <code>call by reference</code></li>\n<li>建立物件屬性方式有 <strong>dot notation</strong> <code>.</code> &amp; <strong>bracket notation</strong><code>[]</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//變數(call by value)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"arg\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj2.arg = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function (call by reference)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"func\"</span>] =func1</span><br><span class=\"line\">obj2.func = func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因為 function 會提升，所以可以放在後面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is func \"</span>+ v);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>呼叫 </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"arg\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.arg);</span><br><span class=\"line\"><span class=\"comment\">//this is func 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"func\"</span>](<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//this is func 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.func(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Operator-“-”\"><a href=\"#Operator-“-”\" class=\"headerlink\" title=\"Operator “.”\"></a>Operator “.”</h3><blockquote>\n<p> ObjectName.PropertyName</p>\n</blockquote>\n<ul>\n<li><code>Member Access</code></li>\n<li>由左至右</li>\n<li>可以訪問物件的屬性內容</li>\n<li>優先度 19 </li>\n<li>當右邊有等號時，會把右邊值給予該屬性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.arg = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>JavaScript Object Notation</li>\n<li>結構化資料(Structured Data)</li>\n<li>用於傳輸資料<ul>\n<li>傳輸資料的 MIME Type 是 <code>application/json</code></li>\n</ul>\n</li>\n<li>以 JavaScript 物件格式儲存資料</li>\n<li>只包含基本資料結構，不會有 <strong>function</strong></li>\n<li>單筆資料以<code>{}</code>包住，多筆資料以<code>[]</code>包住單筆資料</li>\n<li>屬性資料格式是 <code>&quot;key&quot;:value</code>，key值必須要有<strong>雙引號(“)</strong>包住<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"human\"</span>:[<span class=\"comment\">//array</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">29</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">176</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">70</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;<span class=\"comment\">//objecy</span></span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ross\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">19</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">166</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">50</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"female\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"car\"</span>:[</span><br><span class=\"line\">      <span class=\"string\">\"Toyota\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Mazda\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Honda\"</span></span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"acount\"</span>:<span class=\"number\">1000</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">   <span class=\"attr\">\"local\"</span>:<span class=\"string\">\"Taipei\"</span><span class=\"comment\">//string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Statement-陳述句-＆-Expression-表達示\"><a href=\"#Statement-陳述句-＆-Expression-表達示\" class=\"headerlink\" title=\"Statement(陳述句) ＆ Expression(表達示)\"></a>Statement(陳述句) ＆ Expression(表達示)</h3><ul>\n<li>程式碼一段功能的單位</li>\n<li>Statement 執行其程式碼<strong>不會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StatementFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Statement\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Expression 執行其程式碼<strong>會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fExp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Expression\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view</a></p>\n<h3 id=\"關於-運算子\"><a href=\"#關於-運算子\" class=\"headerlink\" title=\"關於 || 運算子\"></a>關於 || 運算子</h3><ul>\n<li>用於判斷左右兩側值是否存在<ul>\n<li>其中一方存在，回傳已存在一方</li>\n<li>兩方都存在，回傳左邊的值</li>\n</ul>\n</li>\n<li>不存在的定義為<ul>\n<li>null | undefined | false | 0 | “”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1 || v2);<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v4 = <span class=\"string\">\"goood day~\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v3 || v4);<span class=\"comment\">// goood day~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v6 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v5 || v6);<span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v7 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v8 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v7 || v8);<span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"關於-Object\"><a href=\"#關於-Object\" class=\"headerlink\" title=\"關於 Object\"></a>關於 Object</h3><ul>\n<li><p>有關連的變數 or 方法 的集合體 </p>\n</li>\n<li><p><strong>基礎型別</strong>之一   </p>\n</li>\n<li><p>建立物件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure></li>\n<li><p>在集合體內的<code>屬性(property)</code>為<strong>物件成員</strong></p>\n</li>\n<li><p>\b\b\b\b\b<code>屬性</code>以 <code>key ＝ value</code>的形式保存</p>\n<ul>\n<li>放入<strong>number\b or string</strong> 是以 <code>call by value</code> ， 放入 <strong>function</strong> or <strong>object</strong>則是 <code>call by reference</code></li>\n<li>建立物件屬性方式有 <strong>dot notation</strong> <code>.</code> &amp; <strong>bracket notation</strong><code>[]</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//變數(call by value)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"arg\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj2.arg = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function (call by reference)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"func\"</span>] =func1</span><br><span class=\"line\">obj2.func = func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因為 function 會提升，所以可以放在後面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is func \"</span>+ v);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>呼叫 </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"arg\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.arg);</span><br><span class=\"line\"><span class=\"comment\">//this is func 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"func\"</span>](<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//this is func 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.func(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Operator-“-”\"><a href=\"#Operator-“-”\" class=\"headerlink\" title=\"Operator “.”\"></a>Operator “.”</h3><blockquote>\n<p> ObjectName.PropertyName</p>\n</blockquote>\n<ul>\n<li><code>Member Access</code></li>\n<li>由左至右</li>\n<li>可以訪問物件的屬性內容</li>\n<li>優先度 19 </li>\n<li>當右邊有等號時，會把右邊值給予該屬性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.arg = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>JavaScript Object Notation</li>\n<li>結構化資料(Structured Data)</li>\n<li>用於傳輸資料<ul>\n<li>傳輸資料的 MIME Type 是 <code>application/json</code></li>\n</ul>\n</li>\n<li>以 JavaScript 物件格式儲存資料</li>\n<li>只包含基本資料結構，不會有 <strong>function</strong></li>\n<li>單筆資料以<code>{}</code>包住，多筆資料以<code>[]</code>包住單筆資料</li>\n<li>屬性資料格式是 <code>&quot;key&quot;:value</code>，key值必須要有<strong>雙引號(“)</strong>包住<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"human\"</span>:[<span class=\"comment\">//array</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">29</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">176</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">70</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;<span class=\"comment\">//objecy</span></span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ross\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">19</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">166</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">50</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"female\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"car\"</span>:[</span><br><span class=\"line\">      <span class=\"string\">\"Toyota\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Mazda\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Honda\"</span></span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"acount\"</span>:<span class=\"number\">1000</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">   <span class=\"attr\">\"local\"</span>:<span class=\"string\">\"Taipei\"</span><span class=\"comment\">//string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Statement-陳述句-＆-Expression-表達示\"><a href=\"#Statement-陳述句-＆-Expression-表達示\" class=\"headerlink\" title=\"Statement(陳述句) ＆ Expression(表達示)\"></a>Statement(陳述句) ＆ Expression(表達示)</h3><ul>\n<li>程式碼一段功能的單位</li>\n<li>Statement 執行其程式碼<strong>不會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StatementFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Statement\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Expression 執行其程式碼<strong>會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fExp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Expression\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-17","date":"2020-03-02T15:56:34.000Z","_content":"\nhttps://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\n\n### Primitive type & Object type\n* 在賦值給變數時會決定好是什麼type\n* 賦值給變數\n    * 會把數據放在一個記憶體位置，再把記憶體位置丟給變數\n* **Primitive type** 原始型別\n    * 唯一值，不會被其他變數參考`call by value`\n    * 型別\n        * Number\n        * String\n        * Boolean\n        * Null\n        * Undefined\n\n* **non-Primitive type** 非原始型別\n    * 非唯一值，所有變數可共同參考`call by referance`\n    * 型別\n        * Object\n        * Array\n        * Regx\n        * Function\n        * Date\n\n### call by value\n* 賦值給變數時，會新建數據\n\n### call by referance\n* 賦值給變數時，會直接把記憶體位置丟給變數\n\n```js\n//call by value\nvar i = 1;\nvar b = i;\ni = 4;\n\n//i=4,b=1\nconsole.log(\"i=\"+ i + \",b=\"+ b);\n\n//call by referance\nvar g = {\n    age:10,\n    sex:\"man\"\n};\n\nvar h = g;\n\ng.age = 20;\ng.sex = \"woman\";\n\n\nconsole.log(\"this is g object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(g);\nconsole.log(\"this is h object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(h);\n```\n\n### deep copy\n* 深拷貝\n* 把**變數a**的值經過特殊處理丟給**變數b**\n    * 建立全新的物件\n* 兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連\n* 使用 `Object.assign`\n    ```js\n    //只能複製一層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = Object.assign({} , a);\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//20\n    ```\n* 使用 `JSON.stringify` & `JSON.parse`\n    *  不過無法拷貝 Function、Set、Map…等型態\n    ```js\n    // 轉成 JSON string 在轉成全新的物件，可深拷貝所有層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = JSON.parse(JSON.stringify(a));\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n    ```\n\n### shallow copy\n* 淺拷貝\n* 把**變數a**的值直接丟給**變數b**，不做額外處理\n    * 僅只會把**變數a**的記憶體位置丟給**變數b**\n* 參考到的會是同一個物件，動a會連b的值一起變\n```js\nvar a = {\n    age:10,\n    sex:\"man\"\n};\n\nvar b = a;\nconsole.log(\"b value is \");\nconsole.log(b);\n\na.age = 20;\nconsole.log(\"after change a age , b value is \");\nconsole.log(b);\n```\n\n### this\n* js 的關鍵字\n* 代表物件本身\n* 最外層的 **this** 即是 `global object`\n* 有建立新物件 **this**的參考指向才會轉成該物件\n* 當function 沒有綁定物件時，內部 **this**會直接參考 `global object`\n```js\nconsole.log(this);//global object\nfunction gFunc(){\n    console.log(this);//global object\n}\ngFunc();\n\nthis.name = \"Mr.w\";\nvar a = {\n    name : \"Mr.A\",\n    callName:function(w){\n        console.log(\"a name is \" + this.name);//Mr.A\n        console.log(\"w name is \" + w.name);//Mr.A\n        function changeName(){\n            console.log(\"Start change name\");\n            console.log(this);//global object\n            this.name = \"Mr.Change\";\n        }\n        changeName();\n        console.log(\"w name is \" + w.name);//Mr.A\n        console.log(\"a change name is \" + this.name);//Mr.A\n    }\n\n};\n//a.callName(this);\nconsole.log(\"===========================\");\nvar c = {\n    name : \"Mr.C\",\n    callName:function(){\n        console.log(\"c name is \" + this.name);//Mr.A\n        a.callName(this);\n        \n    }\n\n};\nc.callName();\n```","source":"js-learning-note-2019-12-17/index.md","raw":"---\ntitle: JSLearningNote_2019-12-17\ndate: 2020-03-02 23:56:34\n---\n\nhttps://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\n\n### Primitive type & Object type\n* 在賦值給變數時會決定好是什麼type\n* 賦值給變數\n    * 會把數據放在一個記憶體位置，再把記憶體位置丟給變數\n* **Primitive type** 原始型別\n    * 唯一值，不會被其他變數參考`call by value`\n    * 型別\n        * Number\n        * String\n        * Boolean\n        * Null\n        * Undefined\n\n* **non-Primitive type** 非原始型別\n    * 非唯一值，所有變數可共同參考`call by referance`\n    * 型別\n        * Object\n        * Array\n        * Regx\n        * Function\n        * Date\n\n### call by value\n* 賦值給變數時，會新建數據\n\n### call by referance\n* 賦值給變數時，會直接把記憶體位置丟給變數\n\n```js\n//call by value\nvar i = 1;\nvar b = i;\ni = 4;\n\n//i=4,b=1\nconsole.log(\"i=\"+ i + \",b=\"+ b);\n\n//call by referance\nvar g = {\n    age:10,\n    sex:\"man\"\n};\n\nvar h = g;\n\ng.age = 20;\ng.sex = \"woman\";\n\n\nconsole.log(\"this is g object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(g);\nconsole.log(\"this is h object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(h);\n```\n\n### deep copy\n* 深拷貝\n* 把**變數a**的值經過特殊處理丟給**變數b**\n    * 建立全新的物件\n* 兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連\n* 使用 `Object.assign`\n    ```js\n    //只能複製一層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = Object.assign({} , a);\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//20\n    ```\n* 使用 `JSON.stringify` & `JSON.parse`\n    *  不過無法拷貝 Function、Set、Map…等型態\n    ```js\n    // 轉成 JSON string 在轉成全新的物件，可深拷貝所有層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = JSON.parse(JSON.stringify(a));\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n    ```\n\n### shallow copy\n* 淺拷貝\n* 把**變數a**的值直接丟給**變數b**，不做額外處理\n    * 僅只會把**變數a**的記憶體位置丟給**變數b**\n* 參考到的會是同一個物件，動a會連b的值一起變\n```js\nvar a = {\n    age:10,\n    sex:\"man\"\n};\n\nvar b = a;\nconsole.log(\"b value is \");\nconsole.log(b);\n\na.age = 20;\nconsole.log(\"after change a age , b value is \");\nconsole.log(b);\n```\n\n### this\n* js 的關鍵字\n* 代表物件本身\n* 最外層的 **this** 即是 `global object`\n* 有建立新物件 **this**的參考指向才會轉成該物件\n* 當function 沒有綁定物件時，內部 **this**會直接參考 `global object`\n```js\nconsole.log(this);//global object\nfunction gFunc(){\n    console.log(this);//global object\n}\ngFunc();\n\nthis.name = \"Mr.w\";\nvar a = {\n    name : \"Mr.A\",\n    callName:function(w){\n        console.log(\"a name is \" + this.name);//Mr.A\n        console.log(\"w name is \" + w.name);//Mr.A\n        function changeName(){\n            console.log(\"Start change name\");\n            console.log(this);//global object\n            this.name = \"Mr.Change\";\n        }\n        changeName();\n        console.log(\"w name is \" + w.name);//Mr.A\n        console.log(\"a change name is \" + this.name);//Mr.A\n    }\n\n};\n//a.callName(this);\nconsole.log(\"===========================\");\nvar c = {\n    name : \"Mr.C\",\n    callName:function(){\n        console.log(\"c name is \" + this.name);//Mr.A\n        a.callName(this);\n        \n    }\n\n};\nc.callName();\n```","updated":"2020-03-19T15:55:11.342Z","path":"js-learning-note-2019-12-17/index.html","comments":1,"layout":"page","_id":"ckuy1kd9h001y5ojtf8io516c","content":"<p><a href=\"https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw</a></p>\n<h3 id=\"Primitive-type-amp-Object-type\"><a href=\"#Primitive-type-amp-Object-type\" class=\"headerlink\" title=\"Primitive type &amp; Object type\"></a>Primitive type &amp; Object type</h3><ul>\n<li><p>在賦值給變數時會決定好是什麼type</p>\n</li>\n<li><p>賦值給變數</p>\n<ul>\n<li>會把數據放在一個記憶體位置，再把記憶體位置丟給變數</li>\n</ul>\n</li>\n<li><p><strong>Primitive type</strong> 原始型別</p>\n<ul>\n<li>唯一值，不會被其他變數參考<code>call by value</code></li>\n<li>型別<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>non-Primitive type</strong> 非原始型別</p>\n<ul>\n<li>非唯一值，所有變數可共同參考<code>call by referance</code></li>\n<li>型別<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Regx</li>\n<li>Function</li>\n<li>Date</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"call-by-value\"><a href=\"#call-by-value\" class=\"headerlink\" title=\"call by value\"></a>call by value</h3><ul>\n<li>賦值給變數時，會新建數據</li>\n</ul>\n<h3 id=\"call-by-referance\"><a href=\"#call-by-referance\" class=\"headerlink\" title=\"call by referance\"></a>call by referance</h3><ul>\n<li>賦值給變數時，會直接把記憶體位置丟給變數</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//call by value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">i = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i=4,b=1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"i=\"</span>+ i + <span class=\"string\">\",b=\"</span>+ b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call by referance</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> h = g;</span><br><span class=\"line\"></span><br><span class=\"line\">g.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">g.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is g object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is h object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy\"><a href=\"#deep-copy\" class=\"headerlink\" title=\"deep copy\"></a>deep copy</h3><ul>\n<li>深拷貝</li>\n<li>把<strong>變數a</strong>的值經過特殊處理丟給<strong>變數b</strong><ul>\n<li>建立全新的物件</li>\n</ul>\n</li>\n<li>兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連</li>\n<li>使用 <code>Object.assign</code>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能複製一層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125; , a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JSON.stringify</code> &amp; <code>JSON.parse</code><ul>\n<li>不過無法拷貝 Function、Set、Map…等型態<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 轉成 JSON string 在轉成全新的物件，可深拷貝所有層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"shallow-copy\"><a href=\"#shallow-copy\" class=\"headerlink\" title=\"shallow copy\"></a>shallow copy</h3><ul>\n<li>淺拷貝</li>\n<li>把<strong>變數a</strong>的值直接丟給<strong>變數b</strong>，不做額外處理<ul>\n<li>僅只會把<strong>變數a</strong>的記憶體位置丟給<strong>變數b</strong></li>\n</ul>\n</li>\n<li>參考到的會是同一個物件，動a會連b的值一起變<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ul>\n<li>js 的關鍵字</li>\n<li>代表物件本身</li>\n<li>最外層的 <strong>this</strong> 即是 <code>global object</code></li>\n<li>有建立新物件 <strong>this</strong>的參考指向才會轉成該物件</li>\n<li>當function 沒有綁定物件時，內部 <strong>this</strong>會直接參考 <code>global object</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.w\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.A\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Start change name\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.Change\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        changeName();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a change name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a.callName(this);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"===========================\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.C\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        a.callName(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">c.callName();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw</a></p>\n<h3 id=\"Primitive-type-amp-Object-type\"><a href=\"#Primitive-type-amp-Object-type\" class=\"headerlink\" title=\"Primitive type &amp; Object type\"></a>Primitive type &amp; Object type</h3><ul>\n<li><p>在賦值給變數時會決定好是什麼type</p>\n</li>\n<li><p>賦值給變數</p>\n<ul>\n<li>會把數據放在一個記憶體位置，再把記憶體位置丟給變數</li>\n</ul>\n</li>\n<li><p><strong>Primitive type</strong> 原始型別</p>\n<ul>\n<li>唯一值，不會被其他變數參考<code>call by value</code></li>\n<li>型別<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>non-Primitive type</strong> 非原始型別</p>\n<ul>\n<li>非唯一值，所有變數可共同參考<code>call by referance</code></li>\n<li>型別<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Regx</li>\n<li>Function</li>\n<li>Date</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"call-by-value\"><a href=\"#call-by-value\" class=\"headerlink\" title=\"call by value\"></a>call by value</h3><ul>\n<li>賦值給變數時，會新建數據</li>\n</ul>\n<h3 id=\"call-by-referance\"><a href=\"#call-by-referance\" class=\"headerlink\" title=\"call by referance\"></a>call by referance</h3><ul>\n<li>賦值給變數時，會直接把記憶體位置丟給變數</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//call by value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">i = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i=4,b=1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"i=\"</span>+ i + <span class=\"string\">\",b=\"</span>+ b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call by referance</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> h = g;</span><br><span class=\"line\"></span><br><span class=\"line\">g.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">g.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is g object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is h object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy\"><a href=\"#deep-copy\" class=\"headerlink\" title=\"deep copy\"></a>deep copy</h3><ul>\n<li>深拷貝</li>\n<li>把<strong>變數a</strong>的值經過特殊處理丟給<strong>變數b</strong><ul>\n<li>建立全新的物件</li>\n</ul>\n</li>\n<li>兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連</li>\n<li>使用 <code>Object.assign</code>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能複製一層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125; , a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JSON.stringify</code> &amp; <code>JSON.parse</code><ul>\n<li>不過無法拷貝 Function、Set、Map…等型態<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 轉成 JSON string 在轉成全新的物件，可深拷貝所有層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"shallow-copy\"><a href=\"#shallow-copy\" class=\"headerlink\" title=\"shallow copy\"></a>shallow copy</h3><ul>\n<li>淺拷貝</li>\n<li>把<strong>變數a</strong>的值直接丟給<strong>變數b</strong>，不做額外處理<ul>\n<li>僅只會把<strong>變數a</strong>的記憶體位置丟給<strong>變數b</strong></li>\n</ul>\n</li>\n<li>參考到的會是同一個物件，動a會連b的值一起變<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ul>\n<li>js 的關鍵字</li>\n<li>代表物件本身</li>\n<li>最外層的 <strong>this</strong> 即是 <code>global object</code></li>\n<li>有建立新物件 <strong>this</strong>的參考指向才會轉成該物件</li>\n<li>當function 沒有綁定物件時，內部 <strong>this</strong>會直接參考 <code>global object</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.w\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.A\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Start change name\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.Change\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        changeName();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a change name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a.callName(this);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"===========================\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.C\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        a.callName(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">c.callName();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"JSLearningNote_2020-01-02","date":"2020-03-02T15:57:04.000Z","_content":"### Scope\n* 程式執行的一個範圍\n* 圈定宣告的變數以及函式存取範圍\n* 分 `global scope (全域範圍)` & `local scope (區域範圍)` \n* 存取變數由 `內 -> 外`\n    * 稱為 `巢狀範疇 (Nested Scope)`\n    * 先判斷這變數是否是**在本區域建立的**\n    * 不是 **local scope** 則會往一層一層往外層找\n    * 最外層是 **global scope**\n    * 找到變數時立即停止動作，稱為**shadowing**  \n    * 外層無法調用內層的資訊\n\n### Lexical Scope\n* 稱為 `語彙範疇`\n* 在建立`執行環境(excution context)`時，會去判別哪些變數是 **global(外部)** 或是 **local(本身)**\n\n    ```js\n    var va = 'globalA';\n    var vg = 'globalG';\n\n    //local:  vb,va\n    //global: vg\n    function testScope(){\n        console.log(\"===== outter func start======\");\n        var vb = 'outterB';\n        var va = '@@clone globalA@@';\n        console.log(va,vb,vg);\n\n        testScope2();\n        //local:  vc\n        //global: va,vb,vg\n        function testScope2(){\n            console.log(\"===== inner func start======\");\n            var vc = 'innerC';\n            vb = '@@outterB change in testScope2@@';\n            vg = '@@globalG change in testScope2@@';\n            console.log(va,vb,vc,vg);\n            console.log(\"===== inner func end======\");\n        }\n        console.log(\"===== outter func end======\");\n    }\n\n    testScope();\n\n    console.log(va,vg);\n    ```\n\n### 閉包(Closure)\n* 當建立好 **excution context**，會把`scope`需要的參數都整理好\n* 變數是從 **外部** 引入時，數據會保存在此 `scope`\n* 把**非local variables**，拉進**excution context**\n* 確保數據的隱密性\n* 減少外部影響\n* 作為一個區域內的公用參數使用\n    ```js\n\n    function testClosure(message) {\n        setTimeout(function timer() {\n            console.log(message);\n        }, 1000);\n    }\n    \n    testClosure('Hello, 閉包!');\n\n    function testClosure2(a){\n\n        return function(){\n            console.log(\"closure = \" , a);\n        };\n    }\n    var ans = testClosure2(10);\n    ans();//closure = 10\n    ```\n\n### 柯里化(Currying)\n* 將 n 個參數的 function ， 拆解成 1 個參數 n 個 function \n* 即一個步驟，一個 function\n* 假如不是結尾，function return next function ，以 **closure** 帶入需要此階段的結果\n    ```js\n    // x + y\n    function normalFn(x,y){\n        console.log(\"normalFn x+y : \",x+y);\n    }\n    function curryingFn(x){\n        console.log(\"curryingStep1 x: \",x); \n        return function(y){\n            console.log(\"curryingStep2 x+y : \",x+y); \n        };\n    }\n\n    normalFn(2,3);\n    var step1 = curryingFn(2);\n\n    step1(3);//5\n    step1(4);//6\n    ```\n\n### Pure function\n* 相同的輸入，相同的輸出\n* 不會有額外的**副作用(Side Effect)**\n* 可移植、可測試\n* 不會因為外在環境的變化而改變**function**邏輯\n\n    ```js\n\n    var a = 10;\n    function impureFnc(b){\n        return a + b;\n    }\n    impureFnc(5);//15\n\n    function pureFnc(a,b){\n        retrun a + b;\n    }\n    pureFnc(5,10);//15\n    ```","source":"js-learning-note-2020-01-02/index.md","raw":"---\ntitle: JSLearningNote_2020-01-02\ndate: 2020-03-02 23:57:04\n---\n### Scope\n* 程式執行的一個範圍\n* 圈定宣告的變數以及函式存取範圍\n* 分 `global scope (全域範圍)` & `local scope (區域範圍)` \n* 存取變數由 `內 -> 外`\n    * 稱為 `巢狀範疇 (Nested Scope)`\n    * 先判斷這變數是否是**在本區域建立的**\n    * 不是 **local scope** 則會往一層一層往外層找\n    * 最外層是 **global scope**\n    * 找到變數時立即停止動作，稱為**shadowing**  \n    * 外層無法調用內層的資訊\n\n### Lexical Scope\n* 稱為 `語彙範疇`\n* 在建立`執行環境(excution context)`時，會去判別哪些變數是 **global(外部)** 或是 **local(本身)**\n\n    ```js\n    var va = 'globalA';\n    var vg = 'globalG';\n\n    //local:  vb,va\n    //global: vg\n    function testScope(){\n        console.log(\"===== outter func start======\");\n        var vb = 'outterB';\n        var va = '@@clone globalA@@';\n        console.log(va,vb,vg);\n\n        testScope2();\n        //local:  vc\n        //global: va,vb,vg\n        function testScope2(){\n            console.log(\"===== inner func start======\");\n            var vc = 'innerC';\n            vb = '@@outterB change in testScope2@@';\n            vg = '@@globalG change in testScope2@@';\n            console.log(va,vb,vc,vg);\n            console.log(\"===== inner func end======\");\n        }\n        console.log(\"===== outter func end======\");\n    }\n\n    testScope();\n\n    console.log(va,vg);\n    ```\n\n### 閉包(Closure)\n* 當建立好 **excution context**，會把`scope`需要的參數都整理好\n* 變數是從 **外部** 引入時，數據會保存在此 `scope`\n* 把**非local variables**，拉進**excution context**\n* 確保數據的隱密性\n* 減少外部影響\n* 作為一個區域內的公用參數使用\n    ```js\n\n    function testClosure(message) {\n        setTimeout(function timer() {\n            console.log(message);\n        }, 1000);\n    }\n    \n    testClosure('Hello, 閉包!');\n\n    function testClosure2(a){\n\n        return function(){\n            console.log(\"closure = \" , a);\n        };\n    }\n    var ans = testClosure2(10);\n    ans();//closure = 10\n    ```\n\n### 柯里化(Currying)\n* 將 n 個參數的 function ， 拆解成 1 個參數 n 個 function \n* 即一個步驟，一個 function\n* 假如不是結尾，function return next function ，以 **closure** 帶入需要此階段的結果\n    ```js\n    // x + y\n    function normalFn(x,y){\n        console.log(\"normalFn x+y : \",x+y);\n    }\n    function curryingFn(x){\n        console.log(\"curryingStep1 x: \",x); \n        return function(y){\n            console.log(\"curryingStep2 x+y : \",x+y); \n        };\n    }\n\n    normalFn(2,3);\n    var step1 = curryingFn(2);\n\n    step1(3);//5\n    step1(4);//6\n    ```\n\n### Pure function\n* 相同的輸入，相同的輸出\n* 不會有額外的**副作用(Side Effect)**\n* 可移植、可測試\n* 不會因為外在環境的變化而改變**function**邏輯\n\n    ```js\n\n    var a = 10;\n    function impureFnc(b){\n        return a + b;\n    }\n    impureFnc(5);//15\n\n    function pureFnc(a,b){\n        retrun a + b;\n    }\n    pureFnc(5,10);//15\n    ```","updated":"2020-03-24T20:03:50.060Z","path":"js-learning-note-2020-01-02/index.html","comments":1,"layout":"page","_id":"ckuy1kd9i00225ojt4vy93ms9","content":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><ul>\n<li>程式執行的一個範圍</li>\n<li>圈定宣告的變數以及函式存取範圍</li>\n<li>分 <code>global scope (全域範圍)</code> &amp; <code>local scope (區域範圍)</code> </li>\n<li>存取變數由 <code>內 -&gt; 外</code><ul>\n<li>稱為 <code>巢狀範疇 (Nested Scope)</code></li>\n<li>先判斷這變數是否是<strong>在本區域建立的</strong></li>\n<li>不是 <strong>local scope</strong> 則會往一層一層往外層找</li>\n<li>最外層是 <strong>global scope</strong></li>\n<li>找到變數時立即停止動作，稱為<strong>shadowing</strong>  </li>\n<li>外層無法調用內層的資訊</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lexical-Scope\"><a href=\"#Lexical-Scope\" class=\"headerlink\" title=\"Lexical Scope\"></a>Lexical Scope</h3><ul>\n<li><p>稱為 <code>語彙範疇</code></p>\n</li>\n<li><p>在建立<code>執行環境(excution context)</code>時，會去判別哪些變數是 <strong>global(外部)</strong> 或是 <strong>local(本身)</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> va = <span class=\"string\">'globalA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vg = <span class=\"string\">'globalG'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//local:  vb,va</span></span><br><span class=\"line\"><span class=\"comment\">//global: vg</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func start======\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vb = <span class=\"string\">'outterB'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> va = <span class=\"string\">'@@clone globalA@@'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(va,vb,vg);</span><br><span class=\"line\"></span><br><span class=\"line\">    testScope2();</span><br><span class=\"line\">    <span class=\"comment\">//local:  vc</span></span><br><span class=\"line\">    <span class=\"comment\">//global: va,vb,vg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func start======\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vc = <span class=\"string\">'innerC'</span>;</span><br><span class=\"line\">        vb = <span class=\"string\">'@@outterB change in testScope2@@'</span>;</span><br><span class=\"line\">        vg = <span class=\"string\">'@@globalG change in testScope2@@'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(va,vb,vc,vg);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func end======\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func end======\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScope();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(va,vg);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"閉包-Closure\"><a href=\"#閉包-Closure\" class=\"headerlink\" title=\"閉包(Closure)\"></a>閉包(Closure)</h3><ul>\n<li>當建立好 <strong>excution context</strong>，會把<code>scope</code>需要的參數都整理好</li>\n<li>變數是從 <strong>外部</strong> 引入時，數據會保存在此 <code>scope</code></li>\n<li>把<strong>非local variables</strong>，拉進<strong>excution context</strong></li>\n<li>確保數據的隱密性</li>\n<li>減少外部影響</li>\n<li>作為一個區域內的公用參數使用  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testClosure(<span class=\"string\">'Hello, 閉包!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure2</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"closure = \"</span> , a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = testClosure2(<span class=\"number\">10</span>);</span><br><span class=\"line\">ans();<span class=\"comment\">//closure = 10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><ul>\n<li>將 n 個參數的 function ， 拆解成 1 個參數 n 個 function </li>\n<li>即一個步驟，一個 function</li>\n<li>假如不是結尾，function return next function ，以 <strong>closure</strong> 帶入需要此階段的結果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x + y</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalFn</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"normalFn x+y : \"</span>,x+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingFn</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep1 x: \"</span>,x); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep2 x+y : \"</span>,x+y); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">normalFn(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = curryingFn(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">step1(<span class=\"number\">3</span>);<span class=\"comment\">//5</span></span><br><span class=\"line\">step1(<span class=\"number\">4</span>);<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Pure-function\"><a href=\"#Pure-function\" class=\"headerlink\" title=\"Pure function\"></a>Pure function</h3><ul>\n<li><p>相同的輸入，相同的輸出</p>\n</li>\n<li><p>不會有額外的<strong>副作用(Side Effect)</strong></p>\n</li>\n<li><p>可移植、可測試</p>\n</li>\n<li><p>不會因為外在環境的變化而改變<strong>function</strong>邏輯</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impureFnc</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">impureFnc(<span class=\"number\">5</span>);<span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFnc</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    retrun a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pureFnc(<span class=\"number\">5</span>,<span class=\"number\">10</span>);<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><ul>\n<li>程式執行的一個範圍</li>\n<li>圈定宣告的變數以及函式存取範圍</li>\n<li>分 <code>global scope (全域範圍)</code> &amp; <code>local scope (區域範圍)</code> </li>\n<li>存取變數由 <code>內 -&gt; 外</code><ul>\n<li>稱為 <code>巢狀範疇 (Nested Scope)</code></li>\n<li>先判斷這變數是否是<strong>在本區域建立的</strong></li>\n<li>不是 <strong>local scope</strong> 則會往一層一層往外層找</li>\n<li>最外層是 <strong>global scope</strong></li>\n<li>找到變數時立即停止動作，稱為<strong>shadowing</strong>  </li>\n<li>外層無法調用內層的資訊</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lexical-Scope\"><a href=\"#Lexical-Scope\" class=\"headerlink\" title=\"Lexical Scope\"></a>Lexical Scope</h3><ul>\n<li><p>稱為 <code>語彙範疇</code></p>\n</li>\n<li><p>在建立<code>執行環境(excution context)</code>時，會去判別哪些變數是 <strong>global(外部)</strong> 或是 <strong>local(本身)</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> va = <span class=\"string\">'globalA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vg = <span class=\"string\">'globalG'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//local:  vb,va</span></span><br><span class=\"line\"><span class=\"comment\">//global: vg</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func start======\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vb = <span class=\"string\">'outterB'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> va = <span class=\"string\">'@@clone globalA@@'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(va,vb,vg);</span><br><span class=\"line\"></span><br><span class=\"line\">    testScope2();</span><br><span class=\"line\">    <span class=\"comment\">//local:  vc</span></span><br><span class=\"line\">    <span class=\"comment\">//global: va,vb,vg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func start======\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vc = <span class=\"string\">'innerC'</span>;</span><br><span class=\"line\">        vb = <span class=\"string\">'@@outterB change in testScope2@@'</span>;</span><br><span class=\"line\">        vg = <span class=\"string\">'@@globalG change in testScope2@@'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(va,vb,vc,vg);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func end======\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func end======\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScope();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(va,vg);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"閉包-Closure\"><a href=\"#閉包-Closure\" class=\"headerlink\" title=\"閉包(Closure)\"></a>閉包(Closure)</h3><ul>\n<li>當建立好 <strong>excution context</strong>，會把<code>scope</code>需要的參數都整理好</li>\n<li>變數是從 <strong>外部</strong> 引入時，數據會保存在此 <code>scope</code></li>\n<li>把<strong>非local variables</strong>，拉進<strong>excution context</strong></li>\n<li>確保數據的隱密性</li>\n<li>減少外部影響</li>\n<li>作為一個區域內的公用參數使用  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testClosure(<span class=\"string\">'Hello, 閉包!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure2</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"closure = \"</span> , a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = testClosure2(<span class=\"number\">10</span>);</span><br><span class=\"line\">ans();<span class=\"comment\">//closure = 10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><ul>\n<li>將 n 個參數的 function ， 拆解成 1 個參數 n 個 function </li>\n<li>即一個步驟，一個 function</li>\n<li>假如不是結尾，function return next function ，以 <strong>closure</strong> 帶入需要此階段的結果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x + y</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalFn</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"normalFn x+y : \"</span>,x+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingFn</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep1 x: \"</span>,x); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep2 x+y : \"</span>,x+y); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">normalFn(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = curryingFn(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">step1(<span class=\"number\">3</span>);<span class=\"comment\">//5</span></span><br><span class=\"line\">step1(<span class=\"number\">4</span>);<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Pure-function\"><a href=\"#Pure-function\" class=\"headerlink\" title=\"Pure function\"></a>Pure function</h3><ul>\n<li><p>相同的輸入，相同的輸出</p>\n</li>\n<li><p>不會有額外的<strong>副作用(Side Effect)</strong></p>\n</li>\n<li><p>可移植、可測試</p>\n</li>\n<li><p>不會因為外在環境的變化而改變<strong>function</strong>邏輯</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impureFnc</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">impureFnc(<span class=\"number\">5</span>);<span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFnc</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    retrun a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pureFnc(<span class=\"number\">5</span>,<span class=\"number\">10</span>);<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"kotlin-note","date":"2020-04-25T15:30:13.000Z","_content":"\n### var & val\n* var  \n    * 變數，內容可更改\n* val\n    * 常數，給值時定型，就不可在更改了，改了會出錯\n* 宣告時 `val | var name[:Type] = value`\n    * 給定宣告類型\n        * 可以不用給初始值\n        * 必須要設定好類型\n        * 還未給值時無法使用\n        * 說明\n            ```kt\n            var i:Int\n            i = 10\n            ```\n    * 自動轉換類型\n        * 一定要設定好初始值\n        * 變數類型由值來決定\n        * 說明\n            ```kt\n            var i ＝ 10\n            ```\n    * PS. 類型決定好後不能再用**自動轉換**來更改\n### 關於變數 ？ & !!\n* 普通設定時，變數是不會有 **null值**，\n<br/> 有需要的話，需要變數類型後面加上 `？`，\n<br/> 而因為有 **null值**，導致變數不確定是`有`還是`無`，出於安全考量，編譯器會出現錯誤，\n<br/> 當使用者堅持變數不會有 **null值**，可在變數後面加上 `!!`\n```kt\nclass RecentUseComparator:Comparator<UsageStats> {\n    override fun compare(lhs: UsageStats?, rhs: UsageStats?): Int {\n        return if(lhs!!.lastTimeUsed > rhs!!.lastTimeUsed){\n            -1\n        }else if(lhs!!.lastTimeUsed == rhs!!.lastTimeUsed){\n            0\n        }else{\n            1\n        }\n    }\n}\n```\n\n### 基本類型\n* Number Type\n    * 整數\n        * Long : -2^63-1 ~ 2^63\n        * Uint : 2^32\n        * Int : -2^31-1 ~ 2^31\n        * Short : -2^15-1 ~ 2^15\n        * Byte : -2^7-1 ~ 2^7\n    * 浮點數\n        * Float : -2^31-1 ~ 2^31\n        * Double : -2^63-1 ~ 2^63\n    \n* String Type\n    * char\n        * 字元\n        * 只能容納一個符號\n        * 以 **'** 包起來\n    * String\n        * 字串\n        * 字元的集合體\n        * 以 **\"** 包起來\n    * Template Literals\n        * 字串板模\n        * 以一個字串為模型，把變數塞進來\n        * 要塞進來的變數前面要帶 **$** name\n        * 如要做運算需加 **{arg...}**\n\n    ```kt\n    var c:Char = 'F'\n    var s1:String = \"Hello\"\n    var s2 = \"World\"\n    var i = 10;\n    var j = 20;\n\n    println(\"$s1 $s2 , i + j = ${i+j}\")\n    ```\n### Function\n* 函式 `fun為關鍵字`\n* 宣告為 `fun name(arg1:Type...)[:ReturnType]{ .... }`\n* 可重複使用的邏輯\n* 需呼叫才會啟用，呼叫為 `name(arg1,arg2)`\n* 可設定外部變數帶入，在()裡面設定\n    * 多個參數以 **,** 隔開\n    * 帶入參數需要設定帶入類型 `arg:Type`\n* 非全域變數，無法直接使用\n* 由 **{** 開始 ， **}** 結束\n* 做完即結束，返回呼叫的地方\n* 可有或沒有返回值\n    * 有返回值需設定 **Return Type**\n* 只有返回值可以用等號 = 把動作寫完\n```kt\nfun testFn(arg:Int):Int{\n    return 10\n}\n\n//return this is xxx\nfun testFn2(v:Int) = println(\"this is ${v}\")\n```\n\n### 存取修飾 Access Modifier\n* public - 完全公開\n* internal - 只有此 ＊.kt 可看到\n* protected - 自己 ＋ 繼承者可看到\n* private - 只有自己\n> PS.預設為 public\n\n### oject \n* class 關鍵字\n* 物件的草圖\n* 聲明為 `class name {}`\n* 建構子分主、副\n    * 主建構子\n        * 只能有一個，為建立物件默認選項\n        * 寫在 `class name[constructor(arg:Type ....)]`\n        * 實作部分寫在 class 內部，加上`init{}`\n    * 副建構子\n        * 可以根據不同條件分配多個建構子\n        * 寫在 class 內部，加上`constructor(){}`\n        * 若要繼承主建構子的動作 ，`constructor():this(arg){}`\n* proterty\n    * 包含 getter & setter\n    * 無設定有是單存變數存取\n    * 有設定在變數下方做設定\n        * set(value)\n            * 以 function 的方式，帶入設定值\n            * `set(value){ }`\n        * get()\n            * 以 function 的方式，將變數丟出去\n            * `get(){ retrun name }`\n        * field\n            * 指向變數自己本身\n            * 使用此欄位，變數需要初始值\n* 繼承 inherit \n    * 關鍵字 **open**，寫在 class 前面\n    * 有關鍵字才允許繼承\n    * 繼承者要在聲明最後加上 `class sub constructor():FatherClass`\n    * override\n        * 關鍵字 **open**，寫在 fun 前面\n        * 有關鍵字才允許 override\n        * 關鍵字 **override**，當繼承者想要使用時，寫在 fun 前\n```kt\nopen class human(){\n    var sex:String = \"man\"\n        set(value) {\n            field = value\n        }\n        get() = field\n    var age:Int = 0\n\n    init{\n\n    }\n\n    open fun speak(v:String) = println(v)\n    open fun see(v: String) = println(v)\n}\nclass User:human() {\n    var name = \"\"\n    var userName\n        get() = \"~$name~\"\n        set(v){\n            name = v\n        }\n\n    override fun speak(v: String) {\n        println(\"I'm speaking....\")\n        super.speak(v)\n\n    }\n\n    override fun see(v: String) {\n        println(\"I'm seeing....\")\n        super.see(v)\n\n    }\n}\n```\n\n### companion object\n* 伴生物件\n* 有聲明的話，物件不需宣告，在系統啟動時會自動建立\n* 從開始到結束只會有這一份物件\n* 相當於 java 的 **static**\n* 可把要設定為靜態的變數跟函式都放在裡面\n\n```js\nclass User {\n    companion object {\n        var instance = User()\n    }\n\n    fun printlnUser() {\n    }\n}\nUser.instance.printlnUser()\n```\n### if...else\n* 是 Statement(陳述句) 也是 Expression(表達式)\n* 作為表達式時，一定要有 else\n```kt\n    var ifi = 20\n    var ifj = 3\n    //Statement\n    if (ifi == 10){\n        ifj = 20\n    }\n    else{\n        ifj = 40\n    }\n    println(\"ifi = $ifi so ifj=$ifj\")\n\n    //Expression\n    var if2i = 20\n    var if2j = if(if2i == 20){\n        60\n    }else{\n        70\n    }\n\n    println(\"if2i = $if2i so if2j=$if2j\")\n```\n\n#### when\n* 是 Statement(陳述句) 也是 Expression(表達式)\n* 類似 switch ... case\n* 作為表達式時，一定要有 else\n```kt\n    var wi = 10;\n    var wj = 0;\n\n    when(wi){\n        0 ->{\n            wj = 4\n        }\n        10 ->{\n            wj=10\n        }\n        else ->{\n            wj = 20\n        }\n    }\n    println(\"Statement when: wi = $wi so wj=$wj\")\n\n    var w2i = 10\n    var w2j = when(wi){\n        0 ->{\n                14\n        }\n        10 ->{\n            1\n        }\n        else ->{\n            30\n        }\n    }\n    println(\"Expression when: w2i = $w2i so w2j=$w2j\")\n```\n\n\n\n### in \n* 在 Control Flow 裡代表判斷指定項目是否存在於目標裡\n* 返回 true | false\n\n### as\n* 把變數轉成指定類型\n* 無法轉會出錯\n\n### is\n* 判斷變數類型是否與指定相似\n* 返回 true | false","source":"kotlin-note/index.md","raw":"---\ntitle: kotlin-note\ndate: 2020-04-25 23:30:13\n---\n\n### var & val\n* var  \n    * 變數，內容可更改\n* val\n    * 常數，給值時定型，就不可在更改了，改了會出錯\n* 宣告時 `val | var name[:Type] = value`\n    * 給定宣告類型\n        * 可以不用給初始值\n        * 必須要設定好類型\n        * 還未給值時無法使用\n        * 說明\n            ```kt\n            var i:Int\n            i = 10\n            ```\n    * 自動轉換類型\n        * 一定要設定好初始值\n        * 變數類型由值來決定\n        * 說明\n            ```kt\n            var i ＝ 10\n            ```\n    * PS. 類型決定好後不能再用**自動轉換**來更改\n### 關於變數 ？ & !!\n* 普通設定時，變數是不會有 **null值**，\n<br/> 有需要的話，需要變數類型後面加上 `？`，\n<br/> 而因為有 **null值**，導致變數不確定是`有`還是`無`，出於安全考量，編譯器會出現錯誤，\n<br/> 當使用者堅持變數不會有 **null值**，可在變數後面加上 `!!`\n```kt\nclass RecentUseComparator:Comparator<UsageStats> {\n    override fun compare(lhs: UsageStats?, rhs: UsageStats?): Int {\n        return if(lhs!!.lastTimeUsed > rhs!!.lastTimeUsed){\n            -1\n        }else if(lhs!!.lastTimeUsed == rhs!!.lastTimeUsed){\n            0\n        }else{\n            1\n        }\n    }\n}\n```\n\n### 基本類型\n* Number Type\n    * 整數\n        * Long : -2^63-1 ~ 2^63\n        * Uint : 2^32\n        * Int : -2^31-1 ~ 2^31\n        * Short : -2^15-1 ~ 2^15\n        * Byte : -2^7-1 ~ 2^7\n    * 浮點數\n        * Float : -2^31-1 ~ 2^31\n        * Double : -2^63-1 ~ 2^63\n    \n* String Type\n    * char\n        * 字元\n        * 只能容納一個符號\n        * 以 **'** 包起來\n    * String\n        * 字串\n        * 字元的集合體\n        * 以 **\"** 包起來\n    * Template Literals\n        * 字串板模\n        * 以一個字串為模型，把變數塞進來\n        * 要塞進來的變數前面要帶 **$** name\n        * 如要做運算需加 **{arg...}**\n\n    ```kt\n    var c:Char = 'F'\n    var s1:String = \"Hello\"\n    var s2 = \"World\"\n    var i = 10;\n    var j = 20;\n\n    println(\"$s1 $s2 , i + j = ${i+j}\")\n    ```\n### Function\n* 函式 `fun為關鍵字`\n* 宣告為 `fun name(arg1:Type...)[:ReturnType]{ .... }`\n* 可重複使用的邏輯\n* 需呼叫才會啟用，呼叫為 `name(arg1,arg2)`\n* 可設定外部變數帶入，在()裡面設定\n    * 多個參數以 **,** 隔開\n    * 帶入參數需要設定帶入類型 `arg:Type`\n* 非全域變數，無法直接使用\n* 由 **{** 開始 ， **}** 結束\n* 做完即結束，返回呼叫的地方\n* 可有或沒有返回值\n    * 有返回值需設定 **Return Type**\n* 只有返回值可以用等號 = 把動作寫完\n```kt\nfun testFn(arg:Int):Int{\n    return 10\n}\n\n//return this is xxx\nfun testFn2(v:Int) = println(\"this is ${v}\")\n```\n\n### 存取修飾 Access Modifier\n* public - 完全公開\n* internal - 只有此 ＊.kt 可看到\n* protected - 自己 ＋ 繼承者可看到\n* private - 只有自己\n> PS.預設為 public\n\n### oject \n* class 關鍵字\n* 物件的草圖\n* 聲明為 `class name {}`\n* 建構子分主、副\n    * 主建構子\n        * 只能有一個，為建立物件默認選項\n        * 寫在 `class name[constructor(arg:Type ....)]`\n        * 實作部分寫在 class 內部，加上`init{}`\n    * 副建構子\n        * 可以根據不同條件分配多個建構子\n        * 寫在 class 內部，加上`constructor(){}`\n        * 若要繼承主建構子的動作 ，`constructor():this(arg){}`\n* proterty\n    * 包含 getter & setter\n    * 無設定有是單存變數存取\n    * 有設定在變數下方做設定\n        * set(value)\n            * 以 function 的方式，帶入設定值\n            * `set(value){ }`\n        * get()\n            * 以 function 的方式，將變數丟出去\n            * `get(){ retrun name }`\n        * field\n            * 指向變數自己本身\n            * 使用此欄位，變數需要初始值\n* 繼承 inherit \n    * 關鍵字 **open**，寫在 class 前面\n    * 有關鍵字才允許繼承\n    * 繼承者要在聲明最後加上 `class sub constructor():FatherClass`\n    * override\n        * 關鍵字 **open**，寫在 fun 前面\n        * 有關鍵字才允許 override\n        * 關鍵字 **override**，當繼承者想要使用時，寫在 fun 前\n```kt\nopen class human(){\n    var sex:String = \"man\"\n        set(value) {\n            field = value\n        }\n        get() = field\n    var age:Int = 0\n\n    init{\n\n    }\n\n    open fun speak(v:String) = println(v)\n    open fun see(v: String) = println(v)\n}\nclass User:human() {\n    var name = \"\"\n    var userName\n        get() = \"~$name~\"\n        set(v){\n            name = v\n        }\n\n    override fun speak(v: String) {\n        println(\"I'm speaking....\")\n        super.speak(v)\n\n    }\n\n    override fun see(v: String) {\n        println(\"I'm seeing....\")\n        super.see(v)\n\n    }\n}\n```\n\n### companion object\n* 伴生物件\n* 有聲明的話，物件不需宣告，在系統啟動時會自動建立\n* 從開始到結束只會有這一份物件\n* 相當於 java 的 **static**\n* 可把要設定為靜態的變數跟函式都放在裡面\n\n```js\nclass User {\n    companion object {\n        var instance = User()\n    }\n\n    fun printlnUser() {\n    }\n}\nUser.instance.printlnUser()\n```\n### if...else\n* 是 Statement(陳述句) 也是 Expression(表達式)\n* 作為表達式時，一定要有 else\n```kt\n    var ifi = 20\n    var ifj = 3\n    //Statement\n    if (ifi == 10){\n        ifj = 20\n    }\n    else{\n        ifj = 40\n    }\n    println(\"ifi = $ifi so ifj=$ifj\")\n\n    //Expression\n    var if2i = 20\n    var if2j = if(if2i == 20){\n        60\n    }else{\n        70\n    }\n\n    println(\"if2i = $if2i so if2j=$if2j\")\n```\n\n#### when\n* 是 Statement(陳述句) 也是 Expression(表達式)\n* 類似 switch ... case\n* 作為表達式時，一定要有 else\n```kt\n    var wi = 10;\n    var wj = 0;\n\n    when(wi){\n        0 ->{\n            wj = 4\n        }\n        10 ->{\n            wj=10\n        }\n        else ->{\n            wj = 20\n        }\n    }\n    println(\"Statement when: wi = $wi so wj=$wj\")\n\n    var w2i = 10\n    var w2j = when(wi){\n        0 ->{\n                14\n        }\n        10 ->{\n            1\n        }\n        else ->{\n            30\n        }\n    }\n    println(\"Expression when: w2i = $w2i so w2j=$w2j\")\n```\n\n\n\n### in \n* 在 Control Flow 裡代表判斷指定項目是否存在於目標裡\n* 返回 true | false\n\n### as\n* 把變數轉成指定類型\n* 無法轉會出錯\n\n### is\n* 判斷變數類型是否與指定相似\n* 返回 true | false","updated":"2020-04-29T17:01:11.924Z","path":"kotlin-note/index.html","comments":1,"layout":"page","_id":"ckuy1kd9j00235ojt2crw6rg9","content":"<h3 id=\"var-amp-val\"><a href=\"#var-amp-val\" class=\"headerlink\" title=\"var &amp; val\"></a>var &amp; val</h3><ul>\n<li>var  <ul>\n<li>變數，內容可更改</li>\n</ul>\n</li>\n<li>val<ul>\n<li>常數，給值時定型，就不可在更改了，改了會出錯</li>\n</ul>\n</li>\n<li>宣告時 <code>val | var name[:Type] = value</code><ul>\n<li>給定宣告類型<ul>\n<li>可以不用給初始值</li>\n<li>必須要設定好類型</li>\n<li>還未給值時無法使用</li>\n<li>說明  <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"built_in\">Int</span></span><br><span class=\"line\">i = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>自動轉換類型<ul>\n<li>一定要設定好初始值</li>\n<li>變數類型由值來決定</li>\n<li>說明  <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i ＝ <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>PS. 類型決定好後不能再用<strong>自動轉換</strong>來更改<h3 id=\"關於變數-？-amp\"><a href=\"#關於變數-？-amp\" class=\"headerlink\" title=\"關於變數 ？ &amp; !!\"></a>關於變數 ？ &amp; !!</h3></li>\n</ul>\n</li>\n<li>普通設定時，變數是不會有 <strong>null值</strong>，<br><br/> 有需要的話，需要變數類型後面加上 <code>？</code>，<br><br/> 而因為有 <strong>null值</strong>，導致變數不確定是<code>有</code>還是<code>無</code>，出於安全考量，編譯器會出現錯誤，<br><br/> 當使用者堅持變數不會有 <strong>null值</strong>，可在變數後面加上 <code>!!</code><figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecentUseComparator</span>:<span class=\"type\">Comparator</span>&lt;<span class=\"type\">UsageStats</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compare</span><span class=\"params\">(lhs: <span class=\"type\">UsageStats</span>?, rhs: <span class=\"type\">UsageStats</span>?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(lhs!!.lastTimeUsed &gt; rhs!!.lastTimeUsed)&#123;</span><br><span class=\"line\">            -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(lhs!!.lastTimeUsed == rhs!!.lastTimeUsed)&#123;</span><br><span class=\"line\">            <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"基本類型\"><a href=\"#基本類型\" class=\"headerlink\" title=\"基本類型\"></a>基本類型</h3><ul>\n<li><p>Number Type</p>\n<ul>\n<li>整數<ul>\n<li>Long : -2^63-1 ~ 2^63</li>\n<li>Uint : 2^32</li>\n<li>Int : -2^31-1 ~ 2^31</li>\n<li>Short : -2^15-1 ~ 2^15</li>\n<li>Byte : -2^7-1 ~ 2^7</li>\n</ul>\n</li>\n<li>浮點數<ul>\n<li>Float : -2^31-1 ~ 2^31</li>\n<li>Double : -2^63-1 ~ 2^63</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>String Type</p>\n<ul>\n<li><p>char</p>\n<ul>\n<li>字元</li>\n<li>只能容納一個符號</li>\n<li>以 <strong>‘</strong> 包起來</li>\n</ul>\n</li>\n<li><p>String</p>\n<ul>\n<li>字串</li>\n<li>字元的集合體</li>\n<li>以 <strong>“</strong> 包起來</li>\n</ul>\n</li>\n<li><p>Template Literals</p>\n<ul>\n<li>字串板模</li>\n<li>以一個字串為模型，把變數塞進來</li>\n<li>要塞進來的變數前面要帶 <strong>$</strong> name</li>\n<li>如要做運算需加 <strong>{arg…}</strong></li>\n</ul>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c:<span class=\"built_in\">Char</span> = <span class=\"string\">'F'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1:String = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">\"<span class=\"variable\">$s1</span> <span class=\"variable\">$s2</span> , i + j = <span class=\"subst\">$&#123;i+j&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3></li>\n</ul>\n</li>\n<li><p>函式 <code>fun為關鍵字</code></p>\n</li>\n<li><p>宣告為 <code>fun name(arg1:Type...)[:ReturnType]{ .... }</code></p>\n</li>\n<li><p>可重複使用的邏輯</p>\n</li>\n<li><p>需呼叫才會啟用，呼叫為 <code>name(arg1,arg2)</code></p>\n</li>\n<li><p>可設定外部變數帶入，在()裡面設定</p>\n<ul>\n<li>多個參數以 <strong>,</strong> 隔開</li>\n<li>帶入參數需要設定帶入類型 <code>arg:Type</code></li>\n</ul>\n</li>\n<li><p>非全域變數，無法直接使用</p>\n</li>\n<li><p>由 <strong>{</strong> 開始 ， <strong>}</strong> 結束</p>\n</li>\n<li><p>做完即結束，返回呼叫的地方</p>\n</li>\n<li><p>可有或沒有返回值</p>\n<ul>\n<li>有返回值需設定 <strong>Return Type</strong></li>\n</ul>\n</li>\n<li><p>只有返回值可以用等號 = 把動作寫完</p>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">testFn</span><span class=\"params\">(arg:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//return this is xxx</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">testFn2</span><span class=\"params\">(v:<span class=\"type\">Int</span>)</span></span> = println(<span class=\"string\">\"this is <span class=\"subst\">$&#123;v&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"存取修飾-Access-Modifier\"><a href=\"#存取修飾-Access-Modifier\" class=\"headerlink\" title=\"存取修飾 Access Modifier\"></a>存取修飾 Access Modifier</h3><ul>\n<li>public - 完全公開</li>\n<li>internal - 只有此 ＊.kt 可看到</li>\n<li>protected - 自己 ＋ 繼承者可看到</li>\n<li>private - 只有自己<blockquote>\n<p>PS.預設為 public</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"oject\"><a href=\"#oject\" class=\"headerlink\" title=\"oject\"></a>oject</h3><ul>\n<li>class 關鍵字</li>\n<li>物件的草圖</li>\n<li>聲明為 <code>class name {}</code></li>\n<li>建構子分主、副<ul>\n<li>主建構子<ul>\n<li>只能有一個，為建立物件默認選項</li>\n<li>寫在 <code>class name[constructor(arg:Type ....)]</code></li>\n<li>實作部分寫在 class 內部，加上<code>init{}</code></li>\n</ul>\n</li>\n<li>副建構子<ul>\n<li>可以根據不同條件分配多個建構子</li>\n<li>寫在 class 內部，加上<code>constructor(){}</code></li>\n<li>若要繼承主建構子的動作 ，<code>constructor():this(arg){}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>proterty<ul>\n<li>包含 getter &amp; setter</li>\n<li>無設定有是單存變數存取</li>\n<li>有設定在變數下方做設定<ul>\n<li>set(value)<ul>\n<li>以 function 的方式，帶入設定值</li>\n<li><code>set(value){ }</code></li>\n</ul>\n</li>\n<li>get()<ul>\n<li>以 function 的方式，將變數丟出去</li>\n<li><code>get(){ retrun name }</code></li>\n</ul>\n</li>\n<li>field<ul>\n<li>指向變數自己本身</li>\n<li>使用此欄位，變數需要初始值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>繼承 inherit <ul>\n<li>關鍵字 <strong>open</strong>，寫在 class 前面</li>\n<li>有關鍵字才允許繼承</li>\n<li>繼承者要在聲明最後加上 <code>class sub constructor():FatherClass</code></li>\n<li>override<ul>\n<li>關鍵字 <strong>open</strong>，寫在 fun 前面</li>\n<li>有關鍵字才允許 override</li>\n<li>關鍵字 <strong>override</strong>，當繼承者想要使用時，寫在 fun 前<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">human</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex:String = <span class=\"string\">\"man\"</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            field = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">(v:<span class=\"type\">String</span>)</span></span> = println(v)</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">see</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> = println(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>:<span class=\"type\">human</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userName</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"string\">\"~<span class=\"variable\">$name</span>~\"</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(v)&#123;</span><br><span class=\"line\">            name = v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"I'm speaking....\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.speak(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">see</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"I'm seeing....\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.see(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"companion-object\"><a href=\"#companion-object\" class=\"headerlink\" title=\"companion object\"></a>companion object</h3><ul>\n<li>伴生物件</li>\n<li>有聲明的話，物件不需宣告，在系統啟動時會自動建立</li>\n<li>從開始到結束只會有這一份物件</li>\n<li>相當於 java 的 <strong>static</strong></li>\n<li>可把要設定為靜態的變數跟函式都放在裡面</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    companion object &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> instance = User()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun printlnUser() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.instance.printlnUser()</span><br></pre></td></tr></table></figure>\n<h3 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h3><ul>\n<li>是 Statement(陳述句) 也是 Expression(表達式)</li>\n<li>作為表達式時，一定要有 else<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ifi = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ifj = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//Statement</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ifi == <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    ifj = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    ifj = <span class=\"number\">40</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"ifi = <span class=\"variable\">$ifi</span> so ifj=<span class=\"variable\">$ifj</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> if2i = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> if2j = <span class=\"keyword\">if</span>(if2i == <span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">60</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">70</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">\"if2i = <span class=\"variable\">$if2i</span> so if2j=<span class=\"variable\">$if2j</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h4><ul>\n<li>是 Statement(陳述句) 也是 Expression(表達式)</li>\n<li>類似 switch … case</li>\n<li>作為表達式時，一定要有 else<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wi = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wj = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">when</span>(wi)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> -&gt;&#123;</span><br><span class=\"line\">        wj = <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">10</span> -&gt;&#123;</span><br><span class=\"line\">        wj=<span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt;&#123;</span><br><span class=\"line\">        wj = <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"Statement when: wi = <span class=\"variable\">$wi</span> so wj=<span class=\"variable\">$wj</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w2i = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> w2j = <span class=\"keyword\">when</span>(wi)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> -&gt;&#123;</span><br><span class=\"line\">            <span class=\"number\">14</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">10</span> -&gt;&#123;</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt;&#123;</span><br><span class=\"line\">        <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"Expression when: w2i = <span class=\"variable\">$w2i</span> so w2j=<span class=\"variable\">$w2j</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><ul>\n<li>在 Control Flow 裡代表判斷指定項目是否存在於目標裡</li>\n<li>返回 true | false</li>\n</ul>\n<h3 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h3><ul>\n<li>把變數轉成指定類型</li>\n<li>無法轉會出錯</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li>判斷變數類型是否與指定相似</li>\n<li>返回 true | false</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"var-amp-val\"><a href=\"#var-amp-val\" class=\"headerlink\" title=\"var &amp; val\"></a>var &amp; val</h3><ul>\n<li>var  <ul>\n<li>變數，內容可更改</li>\n</ul>\n</li>\n<li>val<ul>\n<li>常數，給值時定型，就不可在更改了，改了會出錯</li>\n</ul>\n</li>\n<li>宣告時 <code>val | var name[:Type] = value</code><ul>\n<li>給定宣告類型<ul>\n<li>可以不用給初始值</li>\n<li>必須要設定好類型</li>\n<li>還未給值時無法使用</li>\n<li>說明  <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"built_in\">Int</span></span><br><span class=\"line\">i = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>自動轉換類型<ul>\n<li>一定要設定好初始值</li>\n<li>變數類型由值來決定</li>\n<li>說明  <figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i ＝ <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>PS. 類型決定好後不能再用<strong>自動轉換</strong>來更改<h3 id=\"關於變數-？-amp\"><a href=\"#關於變數-？-amp\" class=\"headerlink\" title=\"關於變數 ？ &amp; !!\"></a>關於變數 ？ &amp; !!</h3></li>\n</ul>\n</li>\n<li>普通設定時，變數是不會有 <strong>null值</strong>，<br><br/> 有需要的話，需要變數類型後面加上 <code>？</code>，<br><br/> 而因為有 <strong>null值</strong>，導致變數不確定是<code>有</code>還是<code>無</code>，出於安全考量，編譯器會出現錯誤，<br><br/> 當使用者堅持變數不會有 <strong>null值</strong>，可在變數後面加上 <code>!!</code><figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecentUseComparator</span>:<span class=\"type\">Comparator</span>&lt;<span class=\"type\">UsageStats</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compare</span><span class=\"params\">(lhs: <span class=\"type\">UsageStats</span>?, rhs: <span class=\"type\">UsageStats</span>?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(lhs!!.lastTimeUsed &gt; rhs!!.lastTimeUsed)&#123;</span><br><span class=\"line\">            -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(lhs!!.lastTimeUsed == rhs!!.lastTimeUsed)&#123;</span><br><span class=\"line\">            <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"基本類型\"><a href=\"#基本類型\" class=\"headerlink\" title=\"基本類型\"></a>基本類型</h3><ul>\n<li><p>Number Type</p>\n<ul>\n<li>整數<ul>\n<li>Long : -2^63-1 ~ 2^63</li>\n<li>Uint : 2^32</li>\n<li>Int : -2^31-1 ~ 2^31</li>\n<li>Short : -2^15-1 ~ 2^15</li>\n<li>Byte : -2^7-1 ~ 2^7</li>\n</ul>\n</li>\n<li>浮點數<ul>\n<li>Float : -2^31-1 ~ 2^31</li>\n<li>Double : -2^63-1 ~ 2^63</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>String Type</p>\n<ul>\n<li><p>char</p>\n<ul>\n<li>字元</li>\n<li>只能容納一個符號</li>\n<li>以 <strong>‘</strong> 包起來</li>\n</ul>\n</li>\n<li><p>String</p>\n<ul>\n<li>字串</li>\n<li>字元的集合體</li>\n<li>以 <strong>“</strong> 包起來</li>\n</ul>\n</li>\n<li><p>Template Literals</p>\n<ul>\n<li>字串板模</li>\n<li>以一個字串為模型，把變數塞進來</li>\n<li>要塞進來的變數前面要帶 <strong>$</strong> name</li>\n<li>如要做運算需加 <strong>{arg…}</strong></li>\n</ul>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c:<span class=\"built_in\">Char</span> = <span class=\"string\">'F'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1:String = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">\"<span class=\"variable\">$s1</span> <span class=\"variable\">$s2</span> , i + j = <span class=\"subst\">$&#123;i+j&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3></li>\n</ul>\n</li>\n<li><p>函式 <code>fun為關鍵字</code></p>\n</li>\n<li><p>宣告為 <code>fun name(arg1:Type...)[:ReturnType]{ .... }</code></p>\n</li>\n<li><p>可重複使用的邏輯</p>\n</li>\n<li><p>需呼叫才會啟用，呼叫為 <code>name(arg1,arg2)</code></p>\n</li>\n<li><p>可設定外部變數帶入，在()裡面設定</p>\n<ul>\n<li>多個參數以 <strong>,</strong> 隔開</li>\n<li>帶入參數需要設定帶入類型 <code>arg:Type</code></li>\n</ul>\n</li>\n<li><p>非全域變數，無法直接使用</p>\n</li>\n<li><p>由 <strong>{</strong> 開始 ， <strong>}</strong> 結束</p>\n</li>\n<li><p>做完即結束，返回呼叫的地方</p>\n</li>\n<li><p>可有或沒有返回值</p>\n<ul>\n<li>有返回值需設定 <strong>Return Type</strong></li>\n</ul>\n</li>\n<li><p>只有返回值可以用等號 = 把動作寫完</p>\n<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">testFn</span><span class=\"params\">(arg:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//return this is xxx</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">testFn2</span><span class=\"params\">(v:<span class=\"type\">Int</span>)</span></span> = println(<span class=\"string\">\"this is <span class=\"subst\">$&#123;v&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"存取修飾-Access-Modifier\"><a href=\"#存取修飾-Access-Modifier\" class=\"headerlink\" title=\"存取修飾 Access Modifier\"></a>存取修飾 Access Modifier</h3><ul>\n<li>public - 完全公開</li>\n<li>internal - 只有此 ＊.kt 可看到</li>\n<li>protected - 自己 ＋ 繼承者可看到</li>\n<li>private - 只有自己<blockquote>\n<p>PS.預設為 public</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"oject\"><a href=\"#oject\" class=\"headerlink\" title=\"oject\"></a>oject</h3><ul>\n<li>class 關鍵字</li>\n<li>物件的草圖</li>\n<li>聲明為 <code>class name {}</code></li>\n<li>建構子分主、副<ul>\n<li>主建構子<ul>\n<li>只能有一個，為建立物件默認選項</li>\n<li>寫在 <code>class name[constructor(arg:Type ....)]</code></li>\n<li>實作部分寫在 class 內部，加上<code>init{}</code></li>\n</ul>\n</li>\n<li>副建構子<ul>\n<li>可以根據不同條件分配多個建構子</li>\n<li>寫在 class 內部，加上<code>constructor(){}</code></li>\n<li>若要繼承主建構子的動作 ，<code>constructor():this(arg){}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>proterty<ul>\n<li>包含 getter &amp; setter</li>\n<li>無設定有是單存變數存取</li>\n<li>有設定在變數下方做設定<ul>\n<li>set(value)<ul>\n<li>以 function 的方式，帶入設定值</li>\n<li><code>set(value){ }</code></li>\n</ul>\n</li>\n<li>get()<ul>\n<li>以 function 的方式，將變數丟出去</li>\n<li><code>get(){ retrun name }</code></li>\n</ul>\n</li>\n<li>field<ul>\n<li>指向變數自己本身</li>\n<li>使用此欄位，變數需要初始值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>繼承 inherit <ul>\n<li>關鍵字 <strong>open</strong>，寫在 class 前面</li>\n<li>有關鍵字才允許繼承</li>\n<li>繼承者要在聲明最後加上 <code>class sub constructor():FatherClass</code></li>\n<li>override<ul>\n<li>關鍵字 <strong>open</strong>，寫在 fun 前面</li>\n<li>有關鍵字才允許 override</li>\n<li>關鍵字 <strong>override</strong>，當繼承者想要使用時，寫在 fun 前<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">human</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex:String = <span class=\"string\">\"man\"</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            field = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">(v:<span class=\"type\">String</span>)</span></span> = println(v)</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">see</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> = println(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>:<span class=\"type\">human</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userName</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"string\">\"~<span class=\"variable\">$name</span>~\"</span></span><br><span class=\"line\">        <span class=\"keyword\">set</span>(v)&#123;</span><br><span class=\"line\">            name = v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"I'm speaking....\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.speak(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">see</span><span class=\"params\">(v: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"I'm seeing....\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.see(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"companion-object\"><a href=\"#companion-object\" class=\"headerlink\" title=\"companion object\"></a>companion object</h3><ul>\n<li>伴生物件</li>\n<li>有聲明的話，物件不需宣告，在系統啟動時會自動建立</li>\n<li>從開始到結束只會有這一份物件</li>\n<li>相當於 java 的 <strong>static</strong></li>\n<li>可把要設定為靜態的變數跟函式都放在裡面</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    companion object &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> instance = User()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun printlnUser() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.instance.printlnUser()</span><br></pre></td></tr></table></figure>\n<h3 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h3><ul>\n<li>是 Statement(陳述句) 也是 Expression(表達式)</li>\n<li>作為表達式時，一定要有 else<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ifi = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ifj = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//Statement</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ifi == <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    ifj = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    ifj = <span class=\"number\">40</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"ifi = <span class=\"variable\">$ifi</span> so ifj=<span class=\"variable\">$ifj</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> if2i = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> if2j = <span class=\"keyword\">if</span>(if2i == <span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">60</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">70</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">\"if2i = <span class=\"variable\">$if2i</span> so if2j=<span class=\"variable\">$if2j</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h4><ul>\n<li>是 Statement(陳述句) 也是 Expression(表達式)</li>\n<li>類似 switch … case</li>\n<li>作為表達式時，一定要有 else<figure class=\"highlight kt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wi = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wj = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">when</span>(wi)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> -&gt;&#123;</span><br><span class=\"line\">        wj = <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">10</span> -&gt;&#123;</span><br><span class=\"line\">        wj=<span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt;&#123;</span><br><span class=\"line\">        wj = <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"Statement when: wi = <span class=\"variable\">$wi</span> so wj=<span class=\"variable\">$wj</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w2i = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> w2j = <span class=\"keyword\">when</span>(wi)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> -&gt;&#123;</span><br><span class=\"line\">            <span class=\"number\">14</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">10</span> -&gt;&#123;</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt;&#123;</span><br><span class=\"line\">        <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"Expression when: w2i = <span class=\"variable\">$w2i</span> so w2j=<span class=\"variable\">$w2j</span>\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><ul>\n<li>在 Control Flow 裡代表判斷指定項目是否存在於目標裡</li>\n<li>返回 true | false</li>\n</ul>\n<h3 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h3><ul>\n<li>把變數轉成指定類型</li>\n<li>無法轉會出錯</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li>判斷變數類型是否與指定相似</li>\n<li>返回 true | false</li>\n</ul>\n"},{"title":"otherLearning","date":"2020-01-29T12:48:28.000Z","_content":"\n* 什麼是 `meta`?  \n    * 中文翻譯 **`後設資料`**\n    * 對資料內容的描述檔\n    > [wiki](https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE)\n\n      ","source":"other-learning/index.md","raw":"---\ntitle: otherLearning\ndate: 2020-01-29 20:48:28\n---\n\n* 什麼是 `meta`?  \n    * 中文翻譯 **`後設資料`**\n    * 對資料內容的描述檔\n    > [wiki](https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE)\n\n      ","updated":"2020-01-29T14:31:22.293Z","path":"other-learning/index.html","comments":1,"layout":"page","_id":"ckuy1kd9k00265ojt2uerh8q8","content":"<ul>\n<li>什麼是 <code>meta</code>?  <ul>\n<li>中文翻譯 <strong><code>後設資料</code></strong></li>\n<li>對資料內容的描述檔<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>什麼是 <code>meta</code>?  <ul>\n<li>中文翻譯 <strong><code>後設資料</code></strong></li>\n<li>對資料內容的描述檔<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-24","date":"2020-03-02T15:56:45.000Z","_content":"\nhttps://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\n\n# 2019-12-24  Learning\n\n### array\n* 以 `[]` 為空陣列\n* 是一種`似列表(list-like)`的物件\n* 具有**長度(length)**\n* 每格位置可存放資訊\n    * 資訊包括 \n        * 物件 **(object)**\n        * 基礎類型 **(number 、 string 、 boolean )**\n        * 陣列 **(array)**\n        * 函式 **(function)**\n* 一個陣列裡可以存放不同的資訊\n\n``` javascript\n    var i = [\n        0,//number\n        'greeting',//string\n        false,//boolean\n        {\n            name : \"tony\"\n        },//object\n        [1,2,3,4],//array\n        function(){\n            console.log(\"Hello JS!\")\n        }//function\n    ];\n\n    //印出陣列\n    console.log(i);\n\n    //遍歷陣列資訊\n    i.map((item)=>{\n        console.log(item);\n    });\n```\n\n### arguments \n* 在 `function` 裡，自帶的參數\n* 在 `function` 範圍內輸入 **arguments**，就可以讀取呼叫此函數所帶入的參數\n* Arguments object\n    * 屬於`偽陣列`\n    * 以 object 模仿 array\n    * 有自帶的 length\n    * 可以用 `array.prototype.slice.call(argument)`轉成 array\n    * 帶入多少參數 `arguments.length` 就有多長\n```js\nfunction testArgFnc(a,b,c){\n    console.log(arguments);\n    var argList = Array.prototype.slice.call(arguments);\n    console.log(argList);    \n}\n\n//arguments.length = 2\ntestArgFnc(1,2);\n//arguments.length = 5\ntestArgFnc(1,2,4,5,3);\n```\n\n### spread `...`\n* 展開語法\n* 能使 `array , object , string`，展開為單個數值\n    * 能把展開的數值分配給 array or object\n    * array 是一個`array[index]`為單位\n    * object 是以 `key:value`為單位\n    * string 是`一個字`為單位\n* 在建立 `function`時，設定參數時可用 `...Arags` 接住參數\n    * 會以**陣列**方式呈現\n* 在呼叫`function`時可用 `...args`，展開分配給 `function`\n    >`p.s object 不行，會報錯`\n```js\n\nvar a = [1,2,3,4,5];\nconsole.log(\"this is a\");\nconsole.log(a);\nvar clone_a = [...a];\nconsole.log(\"clone_a\");\nconsole.log(clone_a);\n\n\nvar b= {a:1,b:\"test\"};\nconsole.log(\"this is b\");\nconsole.log(b);\nvar clone_b = {...b};\nconsole.log(\"clone_b\");\nconsole.log(clone_b);\n\n\nvar c = \"testString\";\nconsole.log(\"this is c\");\nconsole.log(c);\nvar cloneArray_c = [...c];\nconsole.log(\"cloneArray_c\");\nconsole.log(cloneArray_c);\nvar cloneObject_c = {...c};\nconsole.log(\"cloneObject_c\");\nconsole.log(cloneObject_c);\n\n\nfunction funcSpread(...args){\n    console.log(args);\n}\nfunction funcCallSpread(args){\n    console.log(args);\n    console.log(arguments);\n}\n/*\n    [Array(5)]\n        0: (5) [1, 2, 3, 4, 5]\n        length: 1\n        __proto__: Array(0)\n*/\nfunSpread(a);\n//1\nfuncCallSpread(...a);\n```\n### syntax parsers\n* 語法分析\n* js 的編譯是`直譯式(Interpreted)`，解析語法是逐字讀取\n* 如果該字元沒有相對意義的時候會產生錯誤\n* js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號\n\n### function overloading\n* js 沒有真正意義上的 overloading\n* 因為是`直譯式`兩個相同 `function name `宣告時，後面會蓋掉前面的\n* js呼叫 `function`，給的參數數量可以不用給到全部\n* 以上述特性可以去模擬 overloading\n```js\nfunction funcOverloading(a,b,c){\n    if(arguments.length === 0)\n        return \"no arg\";\n    if(arguments.length === 1)\n        return a;\n    if(arguments.length === 2)\n        return a + \"-\"+ b;\n    if(arguments.length === 3)\n        return a + \"-\"+ b + \"-\"+ c;\n\n}\n//no arg\nfuncOverloading();\n//1\nfuncOverloading(1);\n//1-2\nfuncOverloading(1,2);\n// 1-2-3\nfuncOverloading(1,2,3);\n\n```\n### Execution Context\n* `直譯式語言`則是必須依賴`執行環境 (execution context)`\n* 單執行序\n* 以堆疊的方式保存所有的`執行環境`\n    * 後面建立的會在上面\n    * 當程式結束後`執行環境`就會被移除\n* 會有很多個`執行環境 `\n* 一開始會自動建立一個`global context (全域執行環境)`\n    * `global context`只會有一個\n    * `global context` 會一直存在\n* 每個`函式(function)`會建立一個`function context(執行環境)`\n* 生成`執行環境`時會有兩階段\n    * 建立階段\n        * 建立 `scope chain`\n        * 宣告變數\b & 函式 = **hoisting**\n        * 綁定 **this**\n        * 建立 `Outer Environment`\n    * 執行階段\n        * 賦值給變數\n![](https://i.imgur.com/pPuFspr.png)\n\n### hoisting\n* 提昇\n* 在`執行環境(Execution Context)`進入`執行階段(Execution Phase)`前，對此環境的`變數 ＆ 函數`先進行宣告\n* 相當於把`變數 ＆ 函數`往上拉到程式碼最上層一樣\n* `變數`提昇只單純做宣告動作，不會進行賦值，所以初始值會是**undefined**\n```js\n//success\ntestHoisting();\nfunction testHoisting(){\n    //undefined\n    console.log(a);\n\n    var a = 10;\n}\n\n//undefined\nconsole.log(testVarFuncHoisting);\n//error Uncaught TypeError: testVarFuncHoisting is not a function\ntestVarFuncHoisting();\nvar testVarFuncHoisting = function(){\n    //undefined\n    console.log(a);\n    var a = 10;\n};\n\n```\n### Immediatelty Invoked Function Expression `(IIFE)S` \n* 定義完馬上就執行的`JavaScript function`\n```js\n//Function Statement\nfunction testIIFES(){\n    console.log(\"test IIFEs\");\n}();\n\n//Function Expression\nvar testIIFES2 = function(){\n    console.log(\"test IIFEs2\");\n}();\n\n\n```\n### Operator ()\n* Function declaration\n    * 定義函式\n* Function Call\n    * 呼叫 Function時 \n    * `()`裡面可以帶入函式參數(arguments)\n* Grouping\n    * 在一個 **Experssion**有多個**Operator**，對`()`裡的內容會優先執行\n\n###  () + IIFES\n* 在程式執行時就可以執行`匿名函式`\n* 宣告`匿名函式`無變數承接是會出錯的\n* 在`匿名函式`外面加上 **()**，可防止出錯\n* 函式執行完後直接釋放記憶體\n* 可以想像 `()` 就是在執行一個 空 function 只會 **return**參數\n```js \nfunction testParentheses(a){\n    return a;\n}\nvar t = 1 + testParentheses(2+8) * 2 ;\nconsole.log(t);//22\n\n```\n```js\n(function(){\n    console.log(\"test IIFEs3\");\n}());\n```","source":"js-learning-note-2019-12-24/index.md","raw":"---\ntitle: JSLearningNote_2019-12-24\ndate: 2020-03-02 23:56:45\n---\n\nhttps://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\n\n# 2019-12-24  Learning\n\n### array\n* 以 `[]` 為空陣列\n* 是一種`似列表(list-like)`的物件\n* 具有**長度(length)**\n* 每格位置可存放資訊\n    * 資訊包括 \n        * 物件 **(object)**\n        * 基礎類型 **(number 、 string 、 boolean )**\n        * 陣列 **(array)**\n        * 函式 **(function)**\n* 一個陣列裡可以存放不同的資訊\n\n``` javascript\n    var i = [\n        0,//number\n        'greeting',//string\n        false,//boolean\n        {\n            name : \"tony\"\n        },//object\n        [1,2,3,4],//array\n        function(){\n            console.log(\"Hello JS!\")\n        }//function\n    ];\n\n    //印出陣列\n    console.log(i);\n\n    //遍歷陣列資訊\n    i.map((item)=>{\n        console.log(item);\n    });\n```\n\n### arguments \n* 在 `function` 裡，自帶的參數\n* 在 `function` 範圍內輸入 **arguments**，就可以讀取呼叫此函數所帶入的參數\n* Arguments object\n    * 屬於`偽陣列`\n    * 以 object 模仿 array\n    * 有自帶的 length\n    * 可以用 `array.prototype.slice.call(argument)`轉成 array\n    * 帶入多少參數 `arguments.length` 就有多長\n```js\nfunction testArgFnc(a,b,c){\n    console.log(arguments);\n    var argList = Array.prototype.slice.call(arguments);\n    console.log(argList);    \n}\n\n//arguments.length = 2\ntestArgFnc(1,2);\n//arguments.length = 5\ntestArgFnc(1,2,4,5,3);\n```\n\n### spread `...`\n* 展開語法\n* 能使 `array , object , string`，展開為單個數值\n    * 能把展開的數值分配給 array or object\n    * array 是一個`array[index]`為單位\n    * object 是以 `key:value`為單位\n    * string 是`一個字`為單位\n* 在建立 `function`時，設定參數時可用 `...Arags` 接住參數\n    * 會以**陣列**方式呈現\n* 在呼叫`function`時可用 `...args`，展開分配給 `function`\n    >`p.s object 不行，會報錯`\n```js\n\nvar a = [1,2,3,4,5];\nconsole.log(\"this is a\");\nconsole.log(a);\nvar clone_a = [...a];\nconsole.log(\"clone_a\");\nconsole.log(clone_a);\n\n\nvar b= {a:1,b:\"test\"};\nconsole.log(\"this is b\");\nconsole.log(b);\nvar clone_b = {...b};\nconsole.log(\"clone_b\");\nconsole.log(clone_b);\n\n\nvar c = \"testString\";\nconsole.log(\"this is c\");\nconsole.log(c);\nvar cloneArray_c = [...c];\nconsole.log(\"cloneArray_c\");\nconsole.log(cloneArray_c);\nvar cloneObject_c = {...c};\nconsole.log(\"cloneObject_c\");\nconsole.log(cloneObject_c);\n\n\nfunction funcSpread(...args){\n    console.log(args);\n}\nfunction funcCallSpread(args){\n    console.log(args);\n    console.log(arguments);\n}\n/*\n    [Array(5)]\n        0: (5) [1, 2, 3, 4, 5]\n        length: 1\n        __proto__: Array(0)\n*/\nfunSpread(a);\n//1\nfuncCallSpread(...a);\n```\n### syntax parsers\n* 語法分析\n* js 的編譯是`直譯式(Interpreted)`，解析語法是逐字讀取\n* 如果該字元沒有相對意義的時候會產生錯誤\n* js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號\n\n### function overloading\n* js 沒有真正意義上的 overloading\n* 因為是`直譯式`兩個相同 `function name `宣告時，後面會蓋掉前面的\n* js呼叫 `function`，給的參數數量可以不用給到全部\n* 以上述特性可以去模擬 overloading\n```js\nfunction funcOverloading(a,b,c){\n    if(arguments.length === 0)\n        return \"no arg\";\n    if(arguments.length === 1)\n        return a;\n    if(arguments.length === 2)\n        return a + \"-\"+ b;\n    if(arguments.length === 3)\n        return a + \"-\"+ b + \"-\"+ c;\n\n}\n//no arg\nfuncOverloading();\n//1\nfuncOverloading(1);\n//1-2\nfuncOverloading(1,2);\n// 1-2-3\nfuncOverloading(1,2,3);\n\n```\n### Execution Context\n* `直譯式語言`則是必須依賴`執行環境 (execution context)`\n* 單執行序\n* 以堆疊的方式保存所有的`執行環境`\n    * 後面建立的會在上面\n    * 當程式結束後`執行環境`就會被移除\n* 會有很多個`執行環境 `\n* 一開始會自動建立一個`global context (全域執行環境)`\n    * `global context`只會有一個\n    * `global context` 會一直存在\n* 每個`函式(function)`會建立一個`function context(執行環境)`\n* 生成`執行環境`時會有兩階段\n    * 建立階段\n        * 建立 `scope chain`\n        * 宣告變數\b & 函式 = **hoisting**\n        * 綁定 **this**\n        * 建立 `Outer Environment`\n    * 執行階段\n        * 賦值給變數\n![](https://i.imgur.com/pPuFspr.png)\n\n### hoisting\n* 提昇\n* 在`執行環境(Execution Context)`進入`執行階段(Execution Phase)`前，對此環境的`變數 ＆ 函數`先進行宣告\n* 相當於把`變數 ＆ 函數`往上拉到程式碼最上層一樣\n* `變數`提昇只單純做宣告動作，不會進行賦值，所以初始值會是**undefined**\n```js\n//success\ntestHoisting();\nfunction testHoisting(){\n    //undefined\n    console.log(a);\n\n    var a = 10;\n}\n\n//undefined\nconsole.log(testVarFuncHoisting);\n//error Uncaught TypeError: testVarFuncHoisting is not a function\ntestVarFuncHoisting();\nvar testVarFuncHoisting = function(){\n    //undefined\n    console.log(a);\n    var a = 10;\n};\n\n```\n### Immediatelty Invoked Function Expression `(IIFE)S` \n* 定義完馬上就執行的`JavaScript function`\n```js\n//Function Statement\nfunction testIIFES(){\n    console.log(\"test IIFEs\");\n}();\n\n//Function Expression\nvar testIIFES2 = function(){\n    console.log(\"test IIFEs2\");\n}();\n\n\n```\n### Operator ()\n* Function declaration\n    * 定義函式\n* Function Call\n    * 呼叫 Function時 \n    * `()`裡面可以帶入函式參數(arguments)\n* Grouping\n    * 在一個 **Experssion**有多個**Operator**，對`()`裡的內容會優先執行\n\n###  () + IIFES\n* 在程式執行時就可以執行`匿名函式`\n* 宣告`匿名函式`無變數承接是會出錯的\n* 在`匿名函式`外面加上 **()**，可防止出錯\n* 函式執行完後直接釋放記憶體\n* 可以想像 `()` 就是在執行一個 空 function 只會 **return**參數\n```js \nfunction testParentheses(a){\n    return a;\n}\nvar t = 1 + testParentheses(2+8) * 2 ;\nconsole.log(t);//22\n\n```\n```js\n(function(){\n    console.log(\"test IIFEs3\");\n}());\n```","updated":"2020-03-19T15:55:29.512Z","path":"js-learning-note-2019-12-24/index.html","comments":1,"layout":"page","_id":"ckuy1kd9l00285ojt8lmwal00","content":"<p><a href=\"https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both</a></p>\n<h1 id=\"2019-12-24-Learning\"><a href=\"#2019-12-24-Learning\" class=\"headerlink\" title=\"2019-12-24  Learning\"></a>2019-12-24  Learning</h1><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><ul>\n<li>以 <code>[]</code> 為空陣列</li>\n<li>是一種<code>似列表(list-like)</code>的物件</li>\n<li>具有<strong>長度(length)</strong></li>\n<li>每格位置可存放資訊<ul>\n<li>資訊包括 <ul>\n<li>物件 <strong>(object)</strong></li>\n<li>基礎類型 <strong>(number 、 string 、 boolean )</strong></li>\n<li>陣列 <strong>(array)</strong></li>\n<li>函式 <strong>(function)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個陣列裡可以存放不同的資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = [</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">    <span class=\"string\">'greeting'</span>,<span class=\"comment\">//string</span></span><br><span class=\"line\">    <span class=\"literal\">false</span>,<span class=\"comment\">//boolean</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name : <span class=\"string\">\"tony\"</span></span><br><span class=\"line\">    &#125;,<span class=\"comment\">//object</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"comment\">//array</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello JS!\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"comment\">//function</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//印出陣列</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍歷陣列資訊</span></span><br><span class=\"line\">i.map(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><ul>\n<li>在 <code>function</code> 裡，自帶的參數</li>\n<li>在 <code>function</code> 範圍內輸入 <strong>arguments</strong>，就可以讀取呼叫此函數所帶入的參數</li>\n<li>Arguments object<ul>\n<li>屬於<code>偽陣列</code></li>\n<li>以 object 模仿 array</li>\n<li>有自帶的 length</li>\n<li>可以用 <code>array.prototype.slice.call(argument)</code>轉成 array</li>\n<li>帶入多少參數 <code>arguments.length</code> 就有多長<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArgFnc</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argList = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argList);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 2</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 5</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spread\"><a href=\"#spread\" class=\"headerlink\" title=\"spread ...\"></a>spread <code>...</code></h3><ul>\n<li>展開語法</li>\n<li>能使 <code>array , object , string</code>，展開為單個數值<ul>\n<li>能把展開的數值分配給 array or object</li>\n<li>array 是一個<code>array[index]</code>為單位</li>\n<li>object 是以 <code>key:value</code>為單位</li>\n<li>string 是<code>一個字</code>為單位</li>\n</ul>\n</li>\n<li>在建立 <code>function</code>時，設定參數時可用 <code>...Arags</code> 接住參數<ul>\n<li>會以<strong>陣列</strong>方式呈現</li>\n</ul>\n</li>\n<li>在呼叫<code>function</code>時可用 <code>...args</code>，展開分配給 <code>function</code><blockquote>\n<p><code>p.s object 不行，會報錯</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_a = [...a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b= &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_b = &#123;...b&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">\"testString\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneArray_c = [...c];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneArray_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneArray_c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObject_c = &#123;...c&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneObject_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneObject_c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcSpread</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcCallSpread</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    [Array(5)]</span></span><br><span class=\"line\"><span class=\"comment\">        0: (5) [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">        length: 1</span></span><br><span class=\"line\"><span class=\"comment\">        __proto__: Array(0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">funSpread(a);</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcCallSpread(...a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"syntax-parsers\"><a href=\"#syntax-parsers\" class=\"headerlink\" title=\"syntax parsers\"></a>syntax parsers</h3></li>\n<li>語法分析</li>\n<li>js 的編譯是<code>直譯式(Interpreted)</code>，解析語法是逐字讀取</li>\n<li>如果該字元沒有相對意義的時候會產生錯誤</li>\n<li>js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號</li>\n</ul>\n<h3 id=\"function-overloading\"><a href=\"#function-overloading\" class=\"headerlink\" title=\"function overloading\"></a>function overloading</h3><ul>\n<li>js 沒有真正意義上的 overloading</li>\n<li>因為是<code>直譯式</code>兩個相同 <code>function name</code>宣告時，後面會蓋掉前面的</li>\n<li>js呼叫 <code>function</code>，給的參數數量可以不用給到全部</li>\n<li>以上述特性可以去模擬 overloading<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOverloading</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"no arg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b + <span class=\"string\">\"-\"</span>+ c;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//no arg</span></span><br><span class=\"line\">funcOverloading();</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//1-2</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Execution-Context\"><a href=\"#Execution-Context\" class=\"headerlink\" title=\"Execution Context\"></a>Execution Context</h3></li>\n<li><code>直譯式語言</code>則是必須依賴<code>執行環境 (execution context)</code></li>\n<li>單執行序</li>\n<li>以堆疊的方式保存所有的<code>執行環境</code><ul>\n<li>後面建立的會在上面</li>\n<li>當程式結束後<code>執行環境</code>就會被移除</li>\n</ul>\n</li>\n<li>會有很多個<code>執行環境</code></li>\n<li>一開始會自動建立一個<code>global context (全域執行環境)</code><ul>\n<li><code>global context</code>只會有一個</li>\n<li><code>global context</code> 會一直存在</li>\n</ul>\n</li>\n<li>每個<code>函式(function)</code>會建立一個<code>function context(執行環境)</code></li>\n<li>生成<code>執行環境</code>時會有兩階段<ul>\n<li>建立階段<ul>\n<li>建立 <code>scope chain</code></li>\n<li>宣告變數\b &amp; 函式 = <strong>hoisting</strong></li>\n<li>綁定 <strong>this</strong></li>\n<li>建立 <code>Outer Environment</code></li>\n</ul>\n</li>\n<li>執行階段<ul>\n<li>賦值給變數<br><img src=\"https://i.imgur.com/pPuFspr.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hoisting\"><a href=\"#hoisting\" class=\"headerlink\" title=\"hoisting\"></a>hoisting</h3><ul>\n<li>提昇</li>\n<li>在<code>執行環境(Execution Context)</code>進入<code>執行階段(Execution Phase)</code>前，對此環境的<code>變數 ＆ 函數</code>先進行宣告</li>\n<li>相當於把<code>變數 ＆ 函數</code>往上拉到程式碼最上層一樣</li>\n<li><code>變數</code>提昇只單純做宣告動作，不會進行賦值，所以初始值會是<strong>undefined</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//success</span></span><br><span class=\"line\">testHoisting();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testHoisting</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testVarFuncHoisting);</span><br><span class=\"line\"><span class=\"comment\">//error Uncaught TypeError: testVarFuncHoisting is not a function</span></span><br><span class=\"line\">testVarFuncHoisting();</span><br><span class=\"line\"><span class=\"keyword\">var</span> testVarFuncHoisting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Immediatelty-Invoked-Function-Expression-IIFE-S\"><a href=\"#Immediatelty-Invoked-Function-Expression-IIFE-S\" class=\"headerlink\" title=\"Immediatelty Invoked Function Expression (IIFE)S\"></a>Immediatelty Invoked Function Expression <code>(IIFE)S</code></h3></li>\n<li>定義完馬上就執行的<code>JavaScript function</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function Statement</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testIIFES</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs\"</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testIIFES2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs2\"</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator ()\"></a>Operator ()</h3></li>\n<li>Function declaration<ul>\n<li>定義函式</li>\n</ul>\n</li>\n<li>Function Call<ul>\n<li>呼叫 Function時 </li>\n<li><code>()</code>裡面可以帶入函式參數(arguments)</li>\n</ul>\n</li>\n<li>Grouping<ul>\n<li>在一個 <strong>Experssion</strong>有多個<strong>Operator</strong>，對<code>()</code>裡的內容會優先執行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IIFES\"><a href=\"#IIFES\" class=\"headerlink\" title=\"() + IIFES\"></a>() + IIFES</h3><ul>\n<li>在程式執行時就可以執行<code>匿名函式</code></li>\n<li>宣告<code>匿名函式</code>無變數承接是會出錯的</li>\n<li>在<code>匿名函式</code>外面加上 <strong>()</strong>，可防止出錯</li>\n<li>函式執行完後直接釋放記憶體</li>\n<li>可以想像 <code>()</code> 就是在執行一個 空 function 只會 <strong>return</strong>參數<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testParentheses</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"number\">1</span> + testParentheses(<span class=\"number\">2</span>+<span class=\"number\">8</span>) * <span class=\"number\">2</span> ;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t);<span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs3\"</span>);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both</a></p>\n<h1 id=\"2019-12-24-Learning\"><a href=\"#2019-12-24-Learning\" class=\"headerlink\" title=\"2019-12-24  Learning\"></a>2019-12-24  Learning</h1><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><ul>\n<li>以 <code>[]</code> 為空陣列</li>\n<li>是一種<code>似列表(list-like)</code>的物件</li>\n<li>具有<strong>長度(length)</strong></li>\n<li>每格位置可存放資訊<ul>\n<li>資訊包括 <ul>\n<li>物件 <strong>(object)</strong></li>\n<li>基礎類型 <strong>(number 、 string 、 boolean )</strong></li>\n<li>陣列 <strong>(array)</strong></li>\n<li>函式 <strong>(function)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個陣列裡可以存放不同的資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = [</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">    <span class=\"string\">'greeting'</span>,<span class=\"comment\">//string</span></span><br><span class=\"line\">    <span class=\"literal\">false</span>,<span class=\"comment\">//boolean</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name : <span class=\"string\">\"tony\"</span></span><br><span class=\"line\">    &#125;,<span class=\"comment\">//object</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"comment\">//array</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello JS!\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"comment\">//function</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//印出陣列</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍歷陣列資訊</span></span><br><span class=\"line\">i.map(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><ul>\n<li>在 <code>function</code> 裡，自帶的參數</li>\n<li>在 <code>function</code> 範圍內輸入 <strong>arguments</strong>，就可以讀取呼叫此函數所帶入的參數</li>\n<li>Arguments object<ul>\n<li>屬於<code>偽陣列</code></li>\n<li>以 object 模仿 array</li>\n<li>有自帶的 length</li>\n<li>可以用 <code>array.prototype.slice.call(argument)</code>轉成 array</li>\n<li>帶入多少參數 <code>arguments.length</code> 就有多長<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArgFnc</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argList = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argList);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 2</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 5</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spread\"><a href=\"#spread\" class=\"headerlink\" title=\"spread ...\"></a>spread <code>...</code></h3><ul>\n<li>展開語法</li>\n<li>能使 <code>array , object , string</code>，展開為單個數值<ul>\n<li>能把展開的數值分配給 array or object</li>\n<li>array 是一個<code>array[index]</code>為單位</li>\n<li>object 是以 <code>key:value</code>為單位</li>\n<li>string 是<code>一個字</code>為單位</li>\n</ul>\n</li>\n<li>在建立 <code>function</code>時，設定參數時可用 <code>...Arags</code> 接住參數<ul>\n<li>會以<strong>陣列</strong>方式呈現</li>\n</ul>\n</li>\n<li>在呼叫<code>function</code>時可用 <code>...args</code>，展開分配給 <code>function</code><blockquote>\n<p><code>p.s object 不行，會報錯</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_a = [...a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b= &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_b = &#123;...b&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">\"testString\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneArray_c = [...c];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneArray_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneArray_c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObject_c = &#123;...c&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneObject_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneObject_c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcSpread</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcCallSpread</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    [Array(5)]</span></span><br><span class=\"line\"><span class=\"comment\">        0: (5) [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">        length: 1</span></span><br><span class=\"line\"><span class=\"comment\">        __proto__: Array(0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">funSpread(a);</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcCallSpread(...a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"syntax-parsers\"><a href=\"#syntax-parsers\" class=\"headerlink\" title=\"syntax parsers\"></a>syntax parsers</h3></li>\n<li>語法分析</li>\n<li>js 的編譯是<code>直譯式(Interpreted)</code>，解析語法是逐字讀取</li>\n<li>如果該字元沒有相對意義的時候會產生錯誤</li>\n<li>js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號</li>\n</ul>\n<h3 id=\"function-overloading\"><a href=\"#function-overloading\" class=\"headerlink\" title=\"function overloading\"></a>function overloading</h3><ul>\n<li>js 沒有真正意義上的 overloading</li>\n<li>因為是<code>直譯式</code>兩個相同 <code>function name</code>宣告時，後面會蓋掉前面的</li>\n<li>js呼叫 <code>function</code>，給的參數數量可以不用給到全部</li>\n<li>以上述特性可以去模擬 overloading<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOverloading</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"no arg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b + <span class=\"string\">\"-\"</span>+ c;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//no arg</span></span><br><span class=\"line\">funcOverloading();</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//1-2</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Execution-Context\"><a href=\"#Execution-Context\" class=\"headerlink\" title=\"Execution Context\"></a>Execution Context</h3></li>\n<li><code>直譯式語言</code>則是必須依賴<code>執行環境 (execution context)</code></li>\n<li>單執行序</li>\n<li>以堆疊的方式保存所有的<code>執行環境</code><ul>\n<li>後面建立的會在上面</li>\n<li>當程式結束後<code>執行環境</code>就會被移除</li>\n</ul>\n</li>\n<li>會有很多個<code>執行環境</code></li>\n<li>一開始會自動建立一個<code>global context (全域執行環境)</code><ul>\n<li><code>global context</code>只會有一個</li>\n<li><code>global context</code> 會一直存在</li>\n</ul>\n</li>\n<li>每個<code>函式(function)</code>會建立一個<code>function context(執行環境)</code></li>\n<li>生成<code>執行環境</code>時會有兩階段<ul>\n<li>建立階段<ul>\n<li>建立 <code>scope chain</code></li>\n<li>宣告變數\b &amp; 函式 = <strong>hoisting</strong></li>\n<li>綁定 <strong>this</strong></li>\n<li>建立 <code>Outer Environment</code></li>\n</ul>\n</li>\n<li>執行階段<ul>\n<li>賦值給變數<br><img src=\"https://i.imgur.com/pPuFspr.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hoisting\"><a href=\"#hoisting\" class=\"headerlink\" title=\"hoisting\"></a>hoisting</h3><ul>\n<li>提昇</li>\n<li>在<code>執行環境(Execution Context)</code>進入<code>執行階段(Execution Phase)</code>前，對此環境的<code>變數 ＆ 函數</code>先進行宣告</li>\n<li>相當於把<code>變數 ＆ 函數</code>往上拉到程式碼最上層一樣</li>\n<li><code>變數</code>提昇只單純做宣告動作，不會進行賦值，所以初始值會是<strong>undefined</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//success</span></span><br><span class=\"line\">testHoisting();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testHoisting</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testVarFuncHoisting);</span><br><span class=\"line\"><span class=\"comment\">//error Uncaught TypeError: testVarFuncHoisting is not a function</span></span><br><span class=\"line\">testVarFuncHoisting();</span><br><span class=\"line\"><span class=\"keyword\">var</span> testVarFuncHoisting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Immediatelty-Invoked-Function-Expression-IIFE-S\"><a href=\"#Immediatelty-Invoked-Function-Expression-IIFE-S\" class=\"headerlink\" title=\"Immediatelty Invoked Function Expression (IIFE)S\"></a>Immediatelty Invoked Function Expression <code>(IIFE)S</code></h3></li>\n<li>定義完馬上就執行的<code>JavaScript function</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function Statement</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testIIFES</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs\"</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testIIFES2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs2\"</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator ()\"></a>Operator ()</h3></li>\n<li>Function declaration<ul>\n<li>定義函式</li>\n</ul>\n</li>\n<li>Function Call<ul>\n<li>呼叫 Function時 </li>\n<li><code>()</code>裡面可以帶入函式參數(arguments)</li>\n</ul>\n</li>\n<li>Grouping<ul>\n<li>在一個 <strong>Experssion</strong>有多個<strong>Operator</strong>，對<code>()</code>裡的內容會優先執行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IIFES\"><a href=\"#IIFES\" class=\"headerlink\" title=\"() + IIFES\"></a>() + IIFES</h3><ul>\n<li>在程式執行時就可以執行<code>匿名函式</code></li>\n<li>宣告<code>匿名函式</code>無變數承接是會出錯的</li>\n<li>在<code>匿名函式</code>外面加上 <strong>()</strong>，可防止出錯</li>\n<li>函式執行完後直接釋放記憶體</li>\n<li>可以想像 <code>()</code> 就是在執行一個 空 function 只會 <strong>return</strong>參數<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testParentheses</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"number\">1</span> + testParentheses(<span class=\"number\">2</span>+<span class=\"number\">8</span>) * <span class=\"number\">2</span> ;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t);<span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs3\"</span>);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"react-dev-note-create-todolist-by-cra","date":"2021-03-19T01:21:24.000Z","_content":"","source":"react-dev-note-create-todolist-by-cra/index.md","raw":"---\ntitle: react-dev-note-create-todolist-by-cra\ndate: 2021-03-19 09:21:24\n---\n","updated":"2021-03-19T01:21:24.106Z","path":"react-dev-note-create-todolist-by-cra/index.html","comments":1,"layout":"page","_id":"ckuy1kdaf00355ojthmqyg8h1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"建立初始 todo list 畫面 (介紹 component ＆ What is render)","date":"2021-03-21T16:46:49.000Z","_content":"\n# 目的\n\n建立 todo list 的`初始畫面`\n\n## Step 1. 建立 CRA 專案，[請參照](../react-dev-note-create-environment)\n\n## Step 2. 建立 class component\n\n先上 code\n\n```js\nimport { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header className=\"todo-header\">\n          <input />\n          <button>save</button>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n在說 class component ，我們要先了解 component \n\n### 什麼是 component\n\n它就是封裝了 **一部分畫面的** 結構、樣式 、邏輯，以這樣為`一個單位`\n\ncomponent 擁有以下特性：\n\n- 邏輯獨立性\n- 可重複性\n- 可組合性\n- 封閉性\n\n### 以 class 建立 component\n\n以宣告 es6 class 類別，並繼承自 **React.component**，  \n有以下特點：\n\n- 內建 state 機制，保存邏輯相關資訊，並可以\n- 並可覆寫`生命週期(Life cycle) `，可在每個生命週期 的 hook 處理相關的事情\n\n又被稱為 **stateful component**\n\n## Step 3. 建立顯示畫面\n\n### 什麼是 render\nreact component life cycle 之一 ， 更改真實DOM前的最後一個動作  \n\n在 **class component** 裡是`必須`要實作的 function ， return 此 component 的 `react element tree`  \n\n### 什麼是 react element\n\n它是在 react 裡最小的單位，\n它並不是 **component** ，也不是 **component 的 instance**，也不是 **virtual DOM**，  \n就只是一個`純物件(plain object)`， 描述關於此節點`最終輸出`的畫面內容，\n\n那裡面會包含兩個參數， type and props\n\n- type 來決定是 DOM node or Component\n- props 就是關於此 element 屬性的內容\n\n它的建立有兩種：\n\n- 用 **jsx** 就是像 html tag 一樣\n- 用 **function** 可以使用 `React.createElement` 來建立","source":"react-dev-note-create-todolist-by-cra-component-and-render/index.md","raw":"---\ntitle: 建立初始 todo list 畫面 (介紹 component ＆ What is render)\ndate: 2021-03-22 00:46:49\n---\n\n# 目的\n\n建立 todo list 的`初始畫面`\n\n## Step 1. 建立 CRA 專案，[請參照](../react-dev-note-create-environment)\n\n## Step 2. 建立 class component\n\n先上 code\n\n```js\nimport { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header className=\"todo-header\">\n          <input />\n          <button>save</button>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n在說 class component ，我們要先了解 component \n\n### 什麼是 component\n\n它就是封裝了 **一部分畫面的** 結構、樣式 、邏輯，以這樣為`一個單位`\n\ncomponent 擁有以下特性：\n\n- 邏輯獨立性\n- 可重複性\n- 可組合性\n- 封閉性\n\n### 以 class 建立 component\n\n以宣告 es6 class 類別，並繼承自 **React.component**，  \n有以下特點：\n\n- 內建 state 機制，保存邏輯相關資訊，並可以\n- 並可覆寫`生命週期(Life cycle) `，可在每個生命週期 的 hook 處理相關的事情\n\n又被稱為 **stateful component**\n\n## Step 3. 建立顯示畫面\n\n### 什麼是 render\nreact component life cycle 之一 ， 更改真實DOM前的最後一個動作  \n\n在 **class component** 裡是`必須`要實作的 function ， return 此 component 的 `react element tree`  \n\n### 什麼是 react element\n\n它是在 react 裡最小的單位，\n它並不是 **component** ，也不是 **component 的 instance**，也不是 **virtual DOM**，  \n就只是一個`純物件(plain object)`， 描述關於此節點`最終輸出`的畫面內容，\n\n那裡面會包含兩個參數， type and props\n\n- type 來決定是 DOM node or Component\n- props 就是關於此 element 屬性的內容\n\n它的建立有兩種：\n\n- 用 **jsx** 就是像 html tag 一樣\n- 用 **function** 可以使用 `React.createElement` 來建立","updated":"2021-04-13T12:47:12.695Z","path":"react-dev-note-create-todolist-by-cra-component-and-render/index.html","comments":1,"layout":"page","_id":"ckuy1kdag00365ojt5rdx1wn7","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>建立 todo list 的<code>初始畫面</code></p>\n<h2 id=\"Step-1-建立-CRA-專案，請參照\"><a href=\"#Step-1-建立-CRA-專案，請參照\" class=\"headerlink\" title=\"Step 1. 建立 CRA 專案，請參照\"></a>Step 1. 建立 CRA 專案，<a href=\"../react-dev-note-create-environment\">請參照</a></h2><h2 id=\"Step-2-建立-class-component\"><a href=\"#Step-2-建立-class-component\" class=\"headerlink\" title=\"Step 2. 建立 class component\"></a>Step 2. 建立 class component</h2><p>先上 code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"todo-header\"</span>&gt;</span><br><span class=\"line\">          &lt;input /&gt;</span><br><span class=\"line\">          &lt;button&gt;save&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<p>在說 class component ，我們要先了解 component </p>\n<h3 id=\"什麼是-component\"><a href=\"#什麼是-component\" class=\"headerlink\" title=\"什麼是 component\"></a>什麼是 component</h3><p>它就是封裝了 <strong>一部分畫面的</strong> 結構、樣式 、邏輯，以這樣為<code>一個單位</code></p>\n<p>component 擁有以下特性：</p>\n<ul>\n<li>邏輯獨立性</li>\n<li>可重複性</li>\n<li>可組合性</li>\n<li>封閉性</li>\n</ul>\n<h3 id=\"以-class-建立-component\"><a href=\"#以-class-建立-component\" class=\"headerlink\" title=\"以 class 建立 component\"></a>以 class 建立 component</h3><p>以宣告 es6 class 類別，並繼承自 <strong>React.component</strong>，<br>有以下特點：</p>\n<ul>\n<li>內建 state 機制，保存邏輯相關資訊，並可以</li>\n<li>並可覆寫<code>生命週期(Life cycle)</code>，可在每個生命週期 的 hook 處理相關的事情</li>\n</ul>\n<p>又被稱為 <strong>stateful component</strong></p>\n<h2 id=\"Step-3-建立顯示畫面\"><a href=\"#Step-3-建立顯示畫面\" class=\"headerlink\" title=\"Step 3. 建立顯示畫面\"></a>Step 3. 建立顯示畫面</h2><h3 id=\"什麼是-render\"><a href=\"#什麼是-render\" class=\"headerlink\" title=\"什麼是 render\"></a>什麼是 render</h3><p>react component life cycle 之一 ， 更改真實DOM前的最後一個動作  </p>\n<p>在 <strong>class component</strong> 裡是<code>必須</code>要實作的 function ， return 此 component 的 <code>react element tree</code>  </p>\n<h3 id=\"什麼是-react-element\"><a href=\"#什麼是-react-element\" class=\"headerlink\" title=\"什麼是 react element\"></a>什麼是 react element</h3><p>它是在 react 裡最小的單位，<br>它並不是 <strong>component</strong> ，也不是 <strong>component 的 instance</strong>，也不是 <strong>virtual DOM</strong>，<br>就只是一個<code>純物件(plain object)</code>， 描述關於此節點<code>最終輸出</code>的畫面內容，</p>\n<p>那裡面會包含兩個參數， type and props</p>\n<ul>\n<li>type 來決定是 DOM node or Component</li>\n<li>props 就是關於此 element 屬性的內容</li>\n</ul>\n<p>它的建立有兩種：</p>\n<ul>\n<li>用 <strong>jsx</strong> 就是像 html tag 一樣</li>\n<li>用 <strong>function</strong> 可以使用 <code>React.createElement</code> 來建立</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>建立 todo list 的<code>初始畫面</code></p>\n<h2 id=\"Step-1-建立-CRA-專案，請參照\"><a href=\"#Step-1-建立-CRA-專案，請參照\" class=\"headerlink\" title=\"Step 1. 建立 CRA 專案，請參照\"></a>Step 1. 建立 CRA 專案，<a href=\"../react-dev-note-create-environment\">請參照</a></h2><h2 id=\"Step-2-建立-class-component\"><a href=\"#Step-2-建立-class-component\" class=\"headerlink\" title=\"Step 2. 建立 class component\"></a>Step 2. 建立 class component</h2><p>先上 code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"todo-header\"</span>&gt;</span><br><span class=\"line\">          &lt;input /&gt;</span><br><span class=\"line\">          &lt;button&gt;save&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<p>在說 class component ，我們要先了解 component </p>\n<h3 id=\"什麼是-component\"><a href=\"#什麼是-component\" class=\"headerlink\" title=\"什麼是 component\"></a>什麼是 component</h3><p>它就是封裝了 <strong>一部分畫面的</strong> 結構、樣式 、邏輯，以這樣為<code>一個單位</code></p>\n<p>component 擁有以下特性：</p>\n<ul>\n<li>邏輯獨立性</li>\n<li>可重複性</li>\n<li>可組合性</li>\n<li>封閉性</li>\n</ul>\n<h3 id=\"以-class-建立-component\"><a href=\"#以-class-建立-component\" class=\"headerlink\" title=\"以 class 建立 component\"></a>以 class 建立 component</h3><p>以宣告 es6 class 類別，並繼承自 <strong>React.component</strong>，<br>有以下特點：</p>\n<ul>\n<li>內建 state 機制，保存邏輯相關資訊，並可以</li>\n<li>並可覆寫<code>生命週期(Life cycle)</code>，可在每個生命週期 的 hook 處理相關的事情</li>\n</ul>\n<p>又被稱為 <strong>stateful component</strong></p>\n<h2 id=\"Step-3-建立顯示畫面\"><a href=\"#Step-3-建立顯示畫面\" class=\"headerlink\" title=\"Step 3. 建立顯示畫面\"></a>Step 3. 建立顯示畫面</h2><h3 id=\"什麼是-render\"><a href=\"#什麼是-render\" class=\"headerlink\" title=\"什麼是 render\"></a>什麼是 render</h3><p>react component life cycle 之一 ， 更改真實DOM前的最後一個動作  </p>\n<p>在 <strong>class component</strong> 裡是<code>必須</code>要實作的 function ， return 此 component 的 <code>react element tree</code>  </p>\n<h3 id=\"什麼是-react-element\"><a href=\"#什麼是-react-element\" class=\"headerlink\" title=\"什麼是 react element\"></a>什麼是 react element</h3><p>它是在 react 裡最小的單位，<br>它並不是 <strong>component</strong> ，也不是 <strong>component 的 instance</strong>，也不是 <strong>virtual DOM</strong>，<br>就只是一個<code>純物件(plain object)</code>， 描述關於此節點<code>最終輸出</code>的畫面內容，</p>\n<p>那裡面會包含兩個參數， type and props</p>\n<ul>\n<li>type 來決定是 DOM node or Component</li>\n<li>props 就是關於此 element 屬性的內容</li>\n</ul>\n<p>它的建立有兩種：</p>\n<ul>\n<li>用 <strong>jsx</strong> 就是像 html tag 一樣</li>\n<li>用 <strong>function</strong> 可以使用 <code>React.createElement</code> 來建立</li>\n</ul>\n"},{"title":"react-dev-note-create-todolist-by-cra/class-component-structrue","date":"2021-04-14T16:08:57.000Z","_content":"","source":"react-dev-note-create-todolist-by-cra-class-component-structrue/index.md","raw":"---\ntitle: react-dev-note-create-todolist-by-cra/class-component-structrue\ndate: 2021-04-15 00:08:57\n---\n","updated":"2021-04-14T16:08:57.694Z","path":"react-dev-note-create-todolist-by-cra-class-component-structrue/index.html","comments":1,"layout":"page","_id":"ckuy1kdai00375ojt9c5vg7ep","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react-redux-note","date":"2020-05-16T08:59:40.000Z","_content":"\n\n# React Redux 筆記\n\n### 建立流程\n* index 進入點\n    * 載入 `store`\n    * 建立 Provider component\n* 建立 store\n    * 需要有 **reducer**\n* reducer\n    * state 初始化的地方\n    * 根據 **action**，處理對有動作回傳 `Redux State`\n* action creator\n    * action 的格式，包含 **type** & **ployload**\n    * 以 `dispatch` 送入，傳送給 **reducer**\n* mapStateToProps\n    * 接收 `Redux State`，並準備送入指定的 Component\n* mapDispatchToProps\n    * 客製化 dispatch ， 以 props方式傳入\n\n### 呼叫流程\n1. 在指定 Component 呼叫 dispatch ，資料送入 store\n2. 把 dispatch 的 actionCreator 送入 reducer\n3. reducer 根據 action，做出動作，回傳`Redux State`\n4. 觸發 mapStateToProps 調整格式送入 指定 Component，出發 `props render`\n\n\n","source":"react-redux-note/index.md","raw":"---\ntitle: react-redux-note\ndate: 2020-05-16 16:59:40\n---\n\n\n# React Redux 筆記\n\n### 建立流程\n* index 進入點\n    * 載入 `store`\n    * 建立 Provider component\n* 建立 store\n    * 需要有 **reducer**\n* reducer\n    * state 初始化的地方\n    * 根據 **action**，處理對有動作回傳 `Redux State`\n* action creator\n    * action 的格式，包含 **type** & **ployload**\n    * 以 `dispatch` 送入，傳送給 **reducer**\n* mapStateToProps\n    * 接收 `Redux State`，並準備送入指定的 Component\n* mapDispatchToProps\n    * 客製化 dispatch ， 以 props方式傳入\n\n### 呼叫流程\n1. 在指定 Component 呼叫 dispatch ，資料送入 store\n2. 把 dispatch 的 actionCreator 送入 reducer\n3. reducer 根據 action，做出動作，回傳`Redux State`\n4. 觸發 mapStateToProps 調整格式送入 指定 Component，出發 `props render`\n\n\n","updated":"2020-05-16T19:53:20.299Z","path":"react-redux-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdai00385ojtf5qf1ivt","content":"<h1 id=\"React-Redux-筆記\"><a href=\"#React-Redux-筆記\" class=\"headerlink\" title=\"React Redux 筆記\"></a>React Redux 筆記</h1><h3 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程\"></a>建立流程</h3><ul>\n<li>index 進入點<ul>\n<li>載入 <code>store</code></li>\n<li>建立 Provider component</li>\n</ul>\n</li>\n<li>建立 store<ul>\n<li>需要有 <strong>reducer</strong></li>\n</ul>\n</li>\n<li>reducer<ul>\n<li>state 初始化的地方</li>\n<li>根據 <strong>action</strong>，處理對有動作回傳 <code>Redux State</code></li>\n</ul>\n</li>\n<li>action creator<ul>\n<li>action 的格式，包含 <strong>type</strong> &amp; <strong>ployload</strong></li>\n<li>以 <code>dispatch</code> 送入，傳送給 <strong>reducer</strong></li>\n</ul>\n</li>\n<li>mapStateToProps<ul>\n<li>接收 <code>Redux State</code>，並準備送入指定的 Component</li>\n</ul>\n</li>\n<li>mapDispatchToProps<ul>\n<li>客製化 dispatch ， 以 props方式傳入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"呼叫流程\"><a href=\"#呼叫流程\" class=\"headerlink\" title=\"呼叫流程\"></a>呼叫流程</h3><ol>\n<li>在指定 Component 呼叫 dispatch ，資料送入 store</li>\n<li>把 dispatch 的 actionCreator 送入 reducer</li>\n<li>reducer 根據 action，做出動作，回傳<code>Redux State</code></li>\n<li>觸發 mapStateToProps 調整格式送入 指定 Component，出發 <code>props render</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-Redux-筆記\"><a href=\"#React-Redux-筆記\" class=\"headerlink\" title=\"React Redux 筆記\"></a>React Redux 筆記</h1><h3 id=\"建立流程\"><a href=\"#建立流程\" class=\"headerlink\" title=\"建立流程\"></a>建立流程</h3><ul>\n<li>index 進入點<ul>\n<li>載入 <code>store</code></li>\n<li>建立 Provider component</li>\n</ul>\n</li>\n<li>建立 store<ul>\n<li>需要有 <strong>reducer</strong></li>\n</ul>\n</li>\n<li>reducer<ul>\n<li>state 初始化的地方</li>\n<li>根據 <strong>action</strong>，處理對有動作回傳 <code>Redux State</code></li>\n</ul>\n</li>\n<li>action creator<ul>\n<li>action 的格式，包含 <strong>type</strong> &amp; <strong>ployload</strong></li>\n<li>以 <code>dispatch</code> 送入，傳送給 <strong>reducer</strong></li>\n</ul>\n</li>\n<li>mapStateToProps<ul>\n<li>接收 <code>Redux State</code>，並準備送入指定的 Component</li>\n</ul>\n</li>\n<li>mapDispatchToProps<ul>\n<li>客製化 dispatch ， 以 props方式傳入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"呼叫流程\"><a href=\"#呼叫流程\" class=\"headerlink\" title=\"呼叫流程\"></a>呼叫流程</h3><ol>\n<li>在指定 Component 呼叫 dispatch ，資料送入 store</li>\n<li>把 dispatch 的 actionCreator 送入 reducer</li>\n<li>reducer 根據 action，做出動作，回傳<code>Redux State</code></li>\n<li>觸發 mapStateToProps 調整格式送入 指定 Component，出發 <code>props render</code></li>\n</ol>\n"},{"title":"React Intro","date":"2020-02-27T19:57:21.000Z","_content":"\n# React\n## 介紹\n* 基於 javaScript 建立的函式庫\n* 模擬 DOM 元素的運作模式\n* 以 **Virtual DOM** 模式處理 DOM 元素的變化\n    * 在記憶體裡模擬 DOM 結構\n    * 最後顯示到真實的 DOM 只有結果\n    * 在進行真實的 **DOM render** 時\n        * 會先判斷改變的部位，針對那部分做 **render**\n    * render 時，預設會把此 DOM 裡包含的 全部 **re-render**\n* 封裝成 **React Component** \n    * 可獨立執行， 以 Component 做最小單位 \n        * Component 內的元素獨立執行，不會影響到外部\n    * 可結合(Composable)\n        * Component 可互相交流、做組合，產生新的 Component\n    * 可重用（Reusable）\n        * 因為是獨立執行，所以可以在任何的場合做使用\n    * 可維護（Maintainable）\n        * 以最小功能為基準做的 **Component** ，去掉複雜性可供維護\n* 事先把 **Component** 全都組成 **Virtual DOM** ， 調整好變化再去做 render 的動作\n* 建立 **jsx** 語法糖， 簡化開發\n\n## 語法\n* 建立 Component for **ES6**\n    1. 繼承 **React.Component** or **React.PureComponent**\n    2. 實做 render \n        ```js\n        class App extends React.Component {\n            render() { \n                return (\n                    //...\n                ); \n            } \n        }\n        ```\n  \n* render 到 html 頁面\n    ```js\n    ReactDOM.render(< ReactDom />, document.getElementById(\"XXX\"));\n    ```\n    \n    \n* `state` 、 `props` 、 `ref`\n    * state\n        * 針對會改變 **React DOM** 狀態 的設定參數，\n        * 先在 constructor 設定 this.state\n           ```js\n           this.state.key = value\n           ```\n               \n        * 當要重新設定狀態時，呼叫 `this.setState({key:value})`，會觸發 **re-render** ， 重新設定 **React DOM** \n        * state 只會在 Class 內部運轉\n        > PS. 沒在 constructor做宣告的話，會出錯\n    * props\n        * 因為 **React DOM** 的封閉、可重複使用特性 ， 外部需要跟 **React DOM**  溝通時，透過 `props` 設定參數\n        * `props` 可傳遞的參數由建立  **React DOM** 的建立者，做 設定、開放\n        * `props` 是**唯讀屬性**，只能讀不能複寫，也不能建立新值\n        * 當參數傳入時，會觸發 **re-render**\n        * 可在內部class任意使用\n            ```js\n            // js\n            React.createElement(\n                DEMO,\n                {\n                    value:\"123456\",\n                    value2:1111\n                },\t\t\t\t\t\t\n            );\n            // jsx\n            <DEMO value=\"123456\" value2=1111 />\n            ```\n                    \n        * JSX的部分會直接轉成\n            ```javascript\n            props={\n                value:\"123456\",\n                value2:1111\n            }\n            ```\n            \n    * ref\n        * 以原生的 dom  ，ref 就是 JS  document.getElementById()\n        * 以 React DOM ，就是會獲得被 new 出來的  實例\n        * 會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作\n            * 官方說法是 `input.foucs()` 、 `input.value` 、 `video.play()`\n        * 在 constructor 宣告參數 this.XXX\n        * 在指定 tag 上加入 `ref ={this.XXX}`\t\t\n        * 使用方式:\n            * callback\n                ```jsx                \n                <Component  ref={(ref)=>{ this.ref = ref}} />\n                ```\n                \n            * 呼叫 React.createRef() -> **react 16.3**\n                ```js\n                class App extends React.Component {\n                    constructor(props){\n                        super(props);\n                        //在 constructor\n                        this.ref = React.createRef();\n                    }\n                    //在 render\n                    render() { \n                        return (\n                            <Component  ref={this.ref}/>\n                        ); \n                    } \n                }             \n\n                ```                \n                 \n## life cycle\t\n* ver 16.x\n* 分四階段 `Mounting (載入中)`、 `Updating (更新中)` 、 `Unmounting(卸載中)` 、 `error(錯誤)`\n* 針對要被廢除的前面要帶有`UNSAFE_`\n    * Mounting\n        * 元件建立的流程，還未再入到實體網頁時\n        * 流程\n            1. constructor\n                * 物件建立時會啟用的地方\n                * 只會執行一次\n            2. `UNSAFE_`componentWillMount -> `17 will remove`\n                * 觸發時機\n                    * 建立 Component 時\n                * 只會執行一次\n                * 物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)\n            3. static getDerivedStateFromProps(nextProps, prevState)  -> `16 new`\n                * 觸發時機 \n                    * 在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前\n                    * 用 `this.setState()` 觸發 re-render ， 會先更新完 state 再觸發 `getDerivedStateFromProps`\n                * 事件說明\n                    * 判斷是否要用 props 更新 state\n                    * 回傳 obj 更新 state ， return null 維持原樣\n                * 參數\n                    * nextProps\n                        * 最新的 props\n                    * prevState\n                        * 更新前的 state\n            4. render\n                * 觸發時機\n                    * 建立 物件時\n                    * 呼叫 this.setState()\n                    * 從上面傳 props 時\n                * 事件說明\n                    * 設定 react element 的地方\n                    * return boolean | null 則代表無元件顯示\n                    * return react element (jsx)\n                    * 呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 **實體 DOM**\n            5. componentDidMount\n                * 觸發時機\n                    * 元件掛載到實體網頁時\n    * Updating\n        * 元件畫面更新的流程，再觸發 re-render 會啟用\n        * 流程\n            1. `UNSAFE_`componentWillReceiveProps(nextProps) -> `17 will remove`\n                * 觸發時機\n                    * 從上面傳下來的 props 發生變動時\n            2. getDerivedStateFromProps\n                * 同 mounting\n            3. shouldComponentUpdate(nextProps, nextState)\n                * 觸發時機\n                    * 在 `componentWillReceiveProps` &  `getDerivedStateFromProps` 之後\n                * 事件說明\n                    * 判斷 React Component 是否該更新畫面\n                    * return true updating 持續進行 \n                    * return false  updating 中斷，將不觸發 re-render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            4. `UNSAFE_`componentWillUpdate（nextProps, nextState)  -> `17 will remove`\n                * 觸發時機\n                    * render 之前\n                * 事件說明\n                    * 將要 render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            5. render\n                * 同 mounting\n            6. getSnapshotBeforeUpdate(prevProps, prevState) -> `16 new`\n                * 觸發時機\n                    * render 之後 ， 尚未更新到實體網頁\n                * 事件說明\n                    * 取得更新前的數據\n                    * 回傳直將會變成`componentDidUpdate`第三個參數\n                    * 沒有回傳值，`return null`\n                        * 沒有回傳 會有 **Warning**\n                            > `Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.`\n                    * 有使用到此事件，需要再加入`componentDidUpdate`，否則會報錯\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n            7. componentDidUpdate(prevProps, prevState, snapshot)\n                * 觸發時機\n                    * 更新實體畫面之後\n                * 事件說明\n                    * 已經完成實體畫面更新\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n                    * snapshot\n                        * 由前面`getSnapshotBeforeUpdate`的回傳值\n    * Unmounting\n        * 流程\n            1. componentWillUnmount\n                * 觸發時機\n                    * 元件要被移除之前\n    * error\n        * 流程\n            * getDerivedStateFromError\n            * componentDidCatch\n* 當加入 `getDerivedStateFromProps` | `getSnapshotBeforeUpdate`，以下事件將不會被觸發\n    * componentWillMount\n    * componentWillReceiveProps\n    * componentWillUpdate\n    \n### 模擬 LifeCycle的程式碼\nhttps://github.com/RobYang203/React-LifeCycleTest.git\n\n## 關於 Render\nReact 是以 **Virtual DOM**在做處理，**render**就是真實跟虛擬的分界線\n\n**render**是會把當前**Virtual DOM**里資料渲染到真實畫面\n\n所以在**render**前會把 這個**Component**包括`子Component`都準備到**Virtual DOM**，再一起**render**到頁面上\n\n    \n\t\t\t\n\n\t\t","source":"react-intro/index.md","raw":"---\ntitle: React Intro\ndate: 2020-02-28 03:57:21\n---\n\n# React\n## 介紹\n* 基於 javaScript 建立的函式庫\n* 模擬 DOM 元素的運作模式\n* 以 **Virtual DOM** 模式處理 DOM 元素的變化\n    * 在記憶體裡模擬 DOM 結構\n    * 最後顯示到真實的 DOM 只有結果\n    * 在進行真實的 **DOM render** 時\n        * 會先判斷改變的部位，針對那部分做 **render**\n    * render 時，預設會把此 DOM 裡包含的 全部 **re-render**\n* 封裝成 **React Component** \n    * 可獨立執行， 以 Component 做最小單位 \n        * Component 內的元素獨立執行，不會影響到外部\n    * 可結合(Composable)\n        * Component 可互相交流、做組合，產生新的 Component\n    * 可重用（Reusable）\n        * 因為是獨立執行，所以可以在任何的場合做使用\n    * 可維護（Maintainable）\n        * 以最小功能為基準做的 **Component** ，去掉複雜性可供維護\n* 事先把 **Component** 全都組成 **Virtual DOM** ， 調整好變化再去做 render 的動作\n* 建立 **jsx** 語法糖， 簡化開發\n\n## 語法\n* 建立 Component for **ES6**\n    1. 繼承 **React.Component** or **React.PureComponent**\n    2. 實做 render \n        ```js\n        class App extends React.Component {\n            render() { \n                return (\n                    //...\n                ); \n            } \n        }\n        ```\n  \n* render 到 html 頁面\n    ```js\n    ReactDOM.render(< ReactDom />, document.getElementById(\"XXX\"));\n    ```\n    \n    \n* `state` 、 `props` 、 `ref`\n    * state\n        * 針對會改變 **React DOM** 狀態 的設定參數，\n        * 先在 constructor 設定 this.state\n           ```js\n           this.state.key = value\n           ```\n               \n        * 當要重新設定狀態時，呼叫 `this.setState({key:value})`，會觸發 **re-render** ， 重新設定 **React DOM** \n        * state 只會在 Class 內部運轉\n        > PS. 沒在 constructor做宣告的話，會出錯\n    * props\n        * 因為 **React DOM** 的封閉、可重複使用特性 ， 外部需要跟 **React DOM**  溝通時，透過 `props` 設定參數\n        * `props` 可傳遞的參數由建立  **React DOM** 的建立者，做 設定、開放\n        * `props` 是**唯讀屬性**，只能讀不能複寫，也不能建立新值\n        * 當參數傳入時，會觸發 **re-render**\n        * 可在內部class任意使用\n            ```js\n            // js\n            React.createElement(\n                DEMO,\n                {\n                    value:\"123456\",\n                    value2:1111\n                },\t\t\t\t\t\t\n            );\n            // jsx\n            <DEMO value=\"123456\" value2=1111 />\n            ```\n                    \n        * JSX的部分會直接轉成\n            ```javascript\n            props={\n                value:\"123456\",\n                value2:1111\n            }\n            ```\n            \n    * ref\n        * 以原生的 dom  ，ref 就是 JS  document.getElementById()\n        * 以 React DOM ，就是會獲得被 new 出來的  實例\n        * 會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作\n            * 官方說法是 `input.foucs()` 、 `input.value` 、 `video.play()`\n        * 在 constructor 宣告參數 this.XXX\n        * 在指定 tag 上加入 `ref ={this.XXX}`\t\t\n        * 使用方式:\n            * callback\n                ```jsx                \n                <Component  ref={(ref)=>{ this.ref = ref}} />\n                ```\n                \n            * 呼叫 React.createRef() -> **react 16.3**\n                ```js\n                class App extends React.Component {\n                    constructor(props){\n                        super(props);\n                        //在 constructor\n                        this.ref = React.createRef();\n                    }\n                    //在 render\n                    render() { \n                        return (\n                            <Component  ref={this.ref}/>\n                        ); \n                    } \n                }             \n\n                ```                \n                 \n## life cycle\t\n* ver 16.x\n* 分四階段 `Mounting (載入中)`、 `Updating (更新中)` 、 `Unmounting(卸載中)` 、 `error(錯誤)`\n* 針對要被廢除的前面要帶有`UNSAFE_`\n    * Mounting\n        * 元件建立的流程，還未再入到實體網頁時\n        * 流程\n            1. constructor\n                * 物件建立時會啟用的地方\n                * 只會執行一次\n            2. `UNSAFE_`componentWillMount -> `17 will remove`\n                * 觸發時機\n                    * 建立 Component 時\n                * 只會執行一次\n                * 物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)\n            3. static getDerivedStateFromProps(nextProps, prevState)  -> `16 new`\n                * 觸發時機 \n                    * 在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前\n                    * 用 `this.setState()` 觸發 re-render ， 會先更新完 state 再觸發 `getDerivedStateFromProps`\n                * 事件說明\n                    * 判斷是否要用 props 更新 state\n                    * 回傳 obj 更新 state ， return null 維持原樣\n                * 參數\n                    * nextProps\n                        * 最新的 props\n                    * prevState\n                        * 更新前的 state\n            4. render\n                * 觸發時機\n                    * 建立 物件時\n                    * 呼叫 this.setState()\n                    * 從上面傳 props 時\n                * 事件說明\n                    * 設定 react element 的地方\n                    * return boolean | null 則代表無元件顯示\n                    * return react element (jsx)\n                    * 呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 **實體 DOM**\n            5. componentDidMount\n                * 觸發時機\n                    * 元件掛載到實體網頁時\n    * Updating\n        * 元件畫面更新的流程，再觸發 re-render 會啟用\n        * 流程\n            1. `UNSAFE_`componentWillReceiveProps(nextProps) -> `17 will remove`\n                * 觸發時機\n                    * 從上面傳下來的 props 發生變動時\n            2. getDerivedStateFromProps\n                * 同 mounting\n            3. shouldComponentUpdate(nextProps, nextState)\n                * 觸發時機\n                    * 在 `componentWillReceiveProps` &  `getDerivedStateFromProps` 之後\n                * 事件說明\n                    * 判斷 React Component 是否該更新畫面\n                    * return true updating 持續進行 \n                    * return false  updating 中斷，將不觸發 re-render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            4. `UNSAFE_`componentWillUpdate（nextProps, nextState)  -> `17 will remove`\n                * 觸發時機\n                    * render 之前\n                * 事件說明\n                    * 將要 render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            5. render\n                * 同 mounting\n            6. getSnapshotBeforeUpdate(prevProps, prevState) -> `16 new`\n                * 觸發時機\n                    * render 之後 ， 尚未更新到實體網頁\n                * 事件說明\n                    * 取得更新前的數據\n                    * 回傳直將會變成`componentDidUpdate`第三個參數\n                    * 沒有回傳值，`return null`\n                        * 沒有回傳 會有 **Warning**\n                            > `Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.`\n                    * 有使用到此事件，需要再加入`componentDidUpdate`，否則會報錯\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n            7. componentDidUpdate(prevProps, prevState, snapshot)\n                * 觸發時機\n                    * 更新實體畫面之後\n                * 事件說明\n                    * 已經完成實體畫面更新\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n                    * snapshot\n                        * 由前面`getSnapshotBeforeUpdate`的回傳值\n    * Unmounting\n        * 流程\n            1. componentWillUnmount\n                * 觸發時機\n                    * 元件要被移除之前\n    * error\n        * 流程\n            * getDerivedStateFromError\n            * componentDidCatch\n* 當加入 `getDerivedStateFromProps` | `getSnapshotBeforeUpdate`，以下事件將不會被觸發\n    * componentWillMount\n    * componentWillReceiveProps\n    * componentWillUpdate\n    \n### 模擬 LifeCycle的程式碼\nhttps://github.com/RobYang203/React-LifeCycleTest.git\n\n## 關於 Render\nReact 是以 **Virtual DOM**在做處理，**render**就是真實跟虛擬的分界線\n\n**render**是會把當前**Virtual DOM**里資料渲染到真實畫面\n\n所以在**render**前會把 這個**Component**包括`子Component`都準備到**Virtual DOM**，再一起**render**到頁面上\n\n    \n\t\t\t\n\n\t\t","updated":"2020-04-02T16:54:57.861Z","path":"react-intro/index.html","comments":1,"layout":"page","_id":"ckuy1kdaj00395ojt1bu490rr","content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>基於 javaScript 建立的函式庫</li>\n<li>模擬 DOM 元素的運作模式</li>\n<li>以 <strong>Virtual DOM</strong> 模式處理 DOM 元素的變化<ul>\n<li>在記憶體裡模擬 DOM 結構</li>\n<li>最後顯示到真實的 DOM 只有結果</li>\n<li>在進行真實的 <strong>DOM render</strong> 時<ul>\n<li>會先判斷改變的部位，針對那部分做 <strong>render</strong></li>\n</ul>\n</li>\n<li>render 時，預設會把此 DOM 裡包含的 全部 <strong>re-render</strong></li>\n</ul>\n</li>\n<li>封裝成 <strong>React Component</strong> <ul>\n<li>可獨立執行， 以 Component 做最小單位 <ul>\n<li>Component 內的元素獨立執行，不會影響到外部</li>\n</ul>\n</li>\n<li>可結合(Composable)<ul>\n<li>Component 可互相交流、做組合，產生新的 Component</li>\n</ul>\n</li>\n<li>可重用（Reusable）<ul>\n<li>因為是獨立執行，所以可以在任何的場合做使用</li>\n</ul>\n</li>\n<li>可維護（Maintainable）<ul>\n<li>以最小功能為基準做的 <strong>Component</strong> ，去掉複雜性可供維護</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事先把 <strong>Component</strong> 全都組成 <strong>Virtual DOM</strong> ， 調整好變化再去做 render 的動作</li>\n<li>建立 <strong>jsx</strong> 語法糖， 簡化開發</li>\n</ul>\n<h2 id=\"語法\"><a href=\"#語法\" class=\"headerlink\" title=\"語法\"></a>語法</h2><ul>\n<li><p>建立 Component for <strong>ES6</strong></p>\n<ol>\n<li>繼承 <strong>React.Component</strong> or <strong>React.PureComponent</strong></li>\n<li>實做 render  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>render 到 html 頁面</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">ReactDom</span> /&gt;</span>, document.getElementById(\"XXX\"));</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p><code>state</code> 、 <code>props</code> 、 <code>ref</code></p>\n<ul>\n<li><p>state</p>\n<ul>\n<li><p>針對會改變 <strong>React DOM</strong> 狀態 的設定參數，</p>\n</li>\n<li><p>先在 constructor 設定 this.state</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.key = value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>當要重新設定狀態時，呼叫 <code>this.setState({key:value})</code>，會觸發 <strong>re-render</strong> ， 重新設定 <strong>React DOM</strong> </p>\n</li>\n<li><p>state 只會在 Class 內部運轉</p>\n<blockquote>\n<p>PS. 沒在 constructor做宣告的話，會出錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>因為 <strong>React DOM</strong> 的封閉、可重複使用特性 ， 外部需要跟 <strong>React DOM</strong>  溝通時，透過 <code>props</code> 設定參數</p>\n</li>\n<li><p><code>props</code> 可傳遞的參數由建立  <strong>React DOM</strong> 的建立者，做 設定、開放</p>\n</li>\n<li><p><code>props</code> 是<strong>唯讀屬性</strong>，只能讀不能複寫，也不能建立新值</p>\n</li>\n<li><p>當參數傳入時，會觸發 <strong>re-render</strong></p>\n</li>\n<li><p>可在內部class任意使用</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">React.createElement(</span><br><span class=\"line\">    DEMO,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">        value2:<span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;,\t\t\t\t\t\t</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\">&lt;DEMO value=<span class=\"string\">\"123456\"</span> value2=<span class=\"number\">1111</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSX的部分會直接轉成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props=&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">    value2:<span class=\"number\">1111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ref</p>\n<ul>\n<li><p>以原生的 dom  ，ref 就是 JS  document.getElementById()</p>\n</li>\n<li><p>以 React DOM ，就是會獲得被 new 出來的  實例</p>\n</li>\n<li><p>會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作</p>\n<ul>\n<li>官方說法是 <code>input.foucs()</code> 、 <code>input.value</code> 、 <code>video.play()</code></li>\n</ul>\n</li>\n<li><p>在 constructor 宣告參數 this.XXX</p>\n</li>\n<li><p>在指定 tag 上加入 <code>ref ={this.XXX}</code>        </p>\n</li>\n<li><p>使用方式:</p>\n<ul>\n<li><p>callback</p>\n  <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Component  ref=&#123;(ref)=&gt;&#123; <span class=\"keyword\">this</span>.ref = ref&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>呼叫 React.createRef() -&gt; <strong>react 16.3</strong></p>\n<pre><code class=\"js\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>{\n    <span class=\"keyword\">constructor</span>(props){\n        <span class=\"keyword\">super</span>(props);\n        <span class=\"comment\">//在 constructor</span>\n        <span class=\"keyword\">this</span>.ref = React.createRef();\n    }\n    <span class=\"comment\">//在 render</span>\n    render() { \n        <span class=\"keyword\">return</span> (\n            &lt;Component  ref={<span class=\"keyword\">this</span>.ref}/&gt;\n        ); \n    } \n}             \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life cycle\"></a>life cycle</h2><ul>\n<li>ver 16.x</li>\n<li>分四階段 <code>Mounting (載入中)</code>、 <code>Updating (更新中)</code> 、 <code>Unmounting(卸載中)</code> 、 <code>error(錯誤)</code></li>\n<li>針對要被廢除的前面要帶有<code>UNSAFE_</code><ul>\n<li>Mounting<ul>\n<li>元件建立的流程，還未再入到實體網頁時</li>\n<li>流程<ol>\n<li>constructor<ul>\n<li>物件建立時會啟用的地方</li>\n<li>只會執行一次</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillMount -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>建立 Component 時</li>\n</ul>\n</li>\n<li>只會執行一次</li>\n<li>物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)</li>\n</ul>\n</li>\n<li>static getDerivedStateFromProps(nextProps, prevState)  -&gt; <code>16 new</code><ul>\n<li>觸發時機 <ul>\n<li>在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前</li>\n<li>用 <code>this.setState()</code> 觸發 re-render ， 會先更新完 state 再觸發 <code>getDerivedStateFromProps</code></li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷是否要用 props 更新 state</li>\n<li>回傳 obj 更新 state ， return null 維持原樣</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>最新的 props</li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>更新前的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>觸發時機<ul>\n<li>建立 物件時</li>\n<li>呼叫 this.setState()</li>\n<li>從上面傳 props 時</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>設定 react element 的地方</li>\n<li>return boolean | null 則代表無元件顯示</li>\n<li>return react element (jsx)</li>\n<li>呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 <strong>實體 DOM</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>觸發時機<ul>\n<li>元件掛載到實體網頁時</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Updating<ul>\n<li>元件畫面更新的流程，再觸發 re-render 會啟用</li>\n<li>流程<ol>\n<li><code>UNSAFE_</code>componentWillReceiveProps(nextProps) -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>從上面傳下來的 props 發生變動時</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>getDerivedStateFromProps<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>shouldComponentUpdate(nextProps, nextState)<ul>\n<li>觸發時機<ul>\n<li>在 <code>componentWillReceiveProps</code> &amp;  <code>getDerivedStateFromProps</code> 之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷 React Component 是否該更新畫面</li>\n<li>return true updating 持續進行 </li>\n<li>return false  updating 中斷，將不觸發 re-render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillUpdate（nextProps, nextState)  -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>render 之前</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>將要 render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState) -&gt; <code>16 new</code><ul>\n<li>觸發時機<ul>\n<li>render 之後 ， 尚未更新到實體網頁</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>取得更新前的數據</li>\n<li>回傳直將會變成<code>componentDidUpdate</code>第三個參數</li>\n<li>沒有回傳值，<code>return null</code><ul>\n<li>沒有回傳 會有 <strong>Warning</strong><blockquote>\n<p><code>Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>有使用到此事件，需要再加入<code>componentDidUpdate</code>，否則會報錯</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)<ul>\n<li>觸發時機<ul>\n<li>更新實體畫面之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>已經完成實體畫面更新</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n<li>snapshot<ul>\n<li>由前面<code>getSnapshotBeforeUpdate</code>的回傳值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Unmounting<ul>\n<li>流程<ol>\n<li>componentWillUnmount<ul>\n<li>觸發時機<ul>\n<li>元件要被移除之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>error<ul>\n<li>流程<ul>\n<li>getDerivedStateFromError</li>\n<li>componentDidCatch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當加入 <code>getDerivedStateFromProps</code> | <code>getSnapshotBeforeUpdate</code>，以下事件將不會被觸發<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模擬-LifeCycle的程式碼\"><a href=\"#模擬-LifeCycle的程式碼\" class=\"headerlink\" title=\"模擬 LifeCycle的程式碼\"></a>模擬 LifeCycle的程式碼</h3><p><a href=\"https://github.com/RobYang203/React-LifeCycleTest.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/React-LifeCycleTest.git</a></p>\n<h2 id=\"關於-Render\"><a href=\"#關於-Render\" class=\"headerlink\" title=\"關於 Render\"></a>關於 Render</h2><p>React 是以 <strong>Virtual DOM</strong>在做處理，<strong>render</strong>就是真實跟虛擬的分界線</p>\n<p><strong>render</strong>是會把當前<strong>Virtual DOM</strong>里資料渲染到真實畫面</p>\n<p>所以在<strong>render</strong>前會把 這個<strong>Component</strong>包括<code>子Component</code>都準備到<strong>Virtual DOM</strong>，再一起<strong>render</strong>到頁面上</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>基於 javaScript 建立的函式庫</li>\n<li>模擬 DOM 元素的運作模式</li>\n<li>以 <strong>Virtual DOM</strong> 模式處理 DOM 元素的變化<ul>\n<li>在記憶體裡模擬 DOM 結構</li>\n<li>最後顯示到真實的 DOM 只有結果</li>\n<li>在進行真實的 <strong>DOM render</strong> 時<ul>\n<li>會先判斷改變的部位，針對那部分做 <strong>render</strong></li>\n</ul>\n</li>\n<li>render 時，預設會把此 DOM 裡包含的 全部 <strong>re-render</strong></li>\n</ul>\n</li>\n<li>封裝成 <strong>React Component</strong> <ul>\n<li>可獨立執行， 以 Component 做最小單位 <ul>\n<li>Component 內的元素獨立執行，不會影響到外部</li>\n</ul>\n</li>\n<li>可結合(Composable)<ul>\n<li>Component 可互相交流、做組合，產生新的 Component</li>\n</ul>\n</li>\n<li>可重用（Reusable）<ul>\n<li>因為是獨立執行，所以可以在任何的場合做使用</li>\n</ul>\n</li>\n<li>可維護（Maintainable）<ul>\n<li>以最小功能為基準做的 <strong>Component</strong> ，去掉複雜性可供維護</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事先把 <strong>Component</strong> 全都組成 <strong>Virtual DOM</strong> ， 調整好變化再去做 render 的動作</li>\n<li>建立 <strong>jsx</strong> 語法糖， 簡化開發</li>\n</ul>\n<h2 id=\"語法\"><a href=\"#語法\" class=\"headerlink\" title=\"語法\"></a>語法</h2><ul>\n<li><p>建立 Component for <strong>ES6</strong></p>\n<ol>\n<li>繼承 <strong>React.Component</strong> or <strong>React.PureComponent</strong></li>\n<li>實做 render  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>render 到 html 頁面</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">ReactDom</span> /&gt;</span>, document.getElementById(\"XXX\"));</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p><code>state</code> 、 <code>props</code> 、 <code>ref</code></p>\n<ul>\n<li><p>state</p>\n<ul>\n<li><p>針對會改變 <strong>React DOM</strong> 狀態 的設定參數，</p>\n</li>\n<li><p>先在 constructor 設定 this.state</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.key = value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>當要重新設定狀態時，呼叫 <code>this.setState({key:value})</code>，會觸發 <strong>re-render</strong> ， 重新設定 <strong>React DOM</strong> </p>\n</li>\n<li><p>state 只會在 Class 內部運轉</p>\n<blockquote>\n<p>PS. 沒在 constructor做宣告的話，會出錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>因為 <strong>React DOM</strong> 的封閉、可重複使用特性 ， 外部需要跟 <strong>React DOM</strong>  溝通時，透過 <code>props</code> 設定參數</p>\n</li>\n<li><p><code>props</code> 可傳遞的參數由建立  <strong>React DOM</strong> 的建立者，做 設定、開放</p>\n</li>\n<li><p><code>props</code> 是<strong>唯讀屬性</strong>，只能讀不能複寫，也不能建立新值</p>\n</li>\n<li><p>當參數傳入時，會觸發 <strong>re-render</strong></p>\n</li>\n<li><p>可在內部class任意使用</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">React.createElement(</span><br><span class=\"line\">    DEMO,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">        value2:<span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;,\t\t\t\t\t\t</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\">&lt;DEMO value=<span class=\"string\">\"123456\"</span> value2=<span class=\"number\">1111</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSX的部分會直接轉成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props=&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">    value2:<span class=\"number\">1111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ref</p>\n<ul>\n<li><p>以原生的 dom  ，ref 就是 JS  document.getElementById()</p>\n</li>\n<li><p>以 React DOM ，就是會獲得被 new 出來的  實例</p>\n</li>\n<li><p>會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作</p>\n<ul>\n<li>官方說法是 <code>input.foucs()</code> 、 <code>input.value</code> 、 <code>video.play()</code></li>\n</ul>\n</li>\n<li><p>在 constructor 宣告參數 this.XXX</p>\n</li>\n<li><p>在指定 tag 上加入 <code>ref ={this.XXX}</code>        </p>\n</li>\n<li><p>使用方式:</p>\n<ul>\n<li><p>callback</p>\n  <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Component  ref=&#123;(ref)=&gt;&#123; <span class=\"keyword\">this</span>.ref = ref&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>呼叫 React.createRef() -&gt; <strong>react 16.3</strong></p>\n<pre><code class=\"js\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>{\n    <span class=\"keyword\">constructor</span>(props){\n        <span class=\"keyword\">super</span>(props);\n        <span class=\"comment\">//在 constructor</span>\n        <span class=\"keyword\">this</span>.ref = React.createRef();\n    }\n    <span class=\"comment\">//在 render</span>\n    render() { \n        <span class=\"keyword\">return</span> (\n            &lt;Component  ref={<span class=\"keyword\">this</span>.ref}/&gt;\n        ); \n    } \n}             \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life cycle\"></a>life cycle</h2><ul>\n<li>ver 16.x</li>\n<li>分四階段 <code>Mounting (載入中)</code>、 <code>Updating (更新中)</code> 、 <code>Unmounting(卸載中)</code> 、 <code>error(錯誤)</code></li>\n<li>針對要被廢除的前面要帶有<code>UNSAFE_</code><ul>\n<li>Mounting<ul>\n<li>元件建立的流程，還未再入到實體網頁時</li>\n<li>流程<ol>\n<li>constructor<ul>\n<li>物件建立時會啟用的地方</li>\n<li>只會執行一次</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillMount -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>建立 Component 時</li>\n</ul>\n</li>\n<li>只會執行一次</li>\n<li>物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)</li>\n</ul>\n</li>\n<li>static getDerivedStateFromProps(nextProps, prevState)  -&gt; <code>16 new</code><ul>\n<li>觸發時機 <ul>\n<li>在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前</li>\n<li>用 <code>this.setState()</code> 觸發 re-render ， 會先更新完 state 再觸發 <code>getDerivedStateFromProps</code></li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷是否要用 props 更新 state</li>\n<li>回傳 obj 更新 state ， return null 維持原樣</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>最新的 props</li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>更新前的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>觸發時機<ul>\n<li>建立 物件時</li>\n<li>呼叫 this.setState()</li>\n<li>從上面傳 props 時</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>設定 react element 的地方</li>\n<li>return boolean | null 則代表無元件顯示</li>\n<li>return react element (jsx)</li>\n<li>呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 <strong>實體 DOM</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>觸發時機<ul>\n<li>元件掛載到實體網頁時</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Updating<ul>\n<li>元件畫面更新的流程，再觸發 re-render 會啟用</li>\n<li>流程<ol>\n<li><code>UNSAFE_</code>componentWillReceiveProps(nextProps) -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>從上面傳下來的 props 發生變動時</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>getDerivedStateFromProps<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>shouldComponentUpdate(nextProps, nextState)<ul>\n<li>觸發時機<ul>\n<li>在 <code>componentWillReceiveProps</code> &amp;  <code>getDerivedStateFromProps</code> 之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷 React Component 是否該更新畫面</li>\n<li>return true updating 持續進行 </li>\n<li>return false  updating 中斷，將不觸發 re-render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillUpdate（nextProps, nextState)  -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>render 之前</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>將要 render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState) -&gt; <code>16 new</code><ul>\n<li>觸發時機<ul>\n<li>render 之後 ， 尚未更新到實體網頁</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>取得更新前的數據</li>\n<li>回傳直將會變成<code>componentDidUpdate</code>第三個參數</li>\n<li>沒有回傳值，<code>return null</code><ul>\n<li>沒有回傳 會有 <strong>Warning</strong><blockquote>\n<p><code>Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>有使用到此事件，需要再加入<code>componentDidUpdate</code>，否則會報錯</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)<ul>\n<li>觸發時機<ul>\n<li>更新實體畫面之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>已經完成實體畫面更新</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n<li>snapshot<ul>\n<li>由前面<code>getSnapshotBeforeUpdate</code>的回傳值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Unmounting<ul>\n<li>流程<ol>\n<li>componentWillUnmount<ul>\n<li>觸發時機<ul>\n<li>元件要被移除之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>error<ul>\n<li>流程<ul>\n<li>getDerivedStateFromError</li>\n<li>componentDidCatch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當加入 <code>getDerivedStateFromProps</code> | <code>getSnapshotBeforeUpdate</code>，以下事件將不會被觸發<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模擬-LifeCycle的程式碼\"><a href=\"#模擬-LifeCycle的程式碼\" class=\"headerlink\" title=\"模擬 LifeCycle的程式碼\"></a>模擬 LifeCycle的程式碼</h3><p><a href=\"https://github.com/RobYang203/React-LifeCycleTest.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/React-LifeCycleTest.git</a></p>\n<h2 id=\"關於-Render\"><a href=\"#關於-Render\" class=\"headerlink\" title=\"關於 Render\"></a>關於 Render</h2><p>React 是以 <strong>Virtual DOM</strong>在做處理，<strong>render</strong>就是真實跟虛擬的分界線</p>\n<p><strong>render</strong>是會把當前<strong>Virtual DOM</strong>里資料渲染到真實畫面</p>\n<p>所以在<strong>render</strong>前會把 這個<strong>Component</strong>包括<code>子Component</code>都準備到<strong>Virtual DOM</strong>，再一起<strong>render</strong>到頁面上</p>\n"},{"title":"react-native-note","date":"2021-01-18T03:29:17.000Z","_content":"\n# Install\n\n## Requirement\n\n1. xcode\n   - 在 App Store or [Apple Developer](https://developer.apple.com/download/more/)\n2. android\n3. react-native-cli\n   - npm install -g react-native-cli\n4. watchman\n   - brew install watchman\n\n# Create React Native Project\n\n> react-native init < project name >\n\n# 簡介\n\nreact native，不像是 web 那樣有相關的`基本元素 (div 、 span 、 li ..etc )`，為了要配合兩個不同的平台所以會把所有的內容以 component 表示\n\n# Document Architecture\n\n```\n├── __tests__\n├── node_modules\n├── android\n├── ios\n├── app.json\n├── babel.config.js\n├── App.js\n├── index.js\n├── metro.config.js\n├── package.json\n└── yarn.lock\n```\n\n# command\n\n# native-base\n\n# react-native navigation\n\n針對 react native 管理 畫面切換的套件\n\nHierarchy ？\n\n畫面以 **Hierarchy** 做區分，有以下幾種：\n\n- Root\n- Modal\n- Overlay\n\n可放置 **Layout** ， 提供以下幾種 :\n\n- Stack\n- Bottom tabs\n- Side Menu\n- External Component\n\n## 安裝\n\n### 需求\n\n- node >= 8\n- react-native >= 0.51\n\n### command\n\n> yarn add react-native-navigation\n\n## 啟動 navigation\n\n在`index.js`,打上以下指令\n\n```javascript\nNavigation.events().registerAppLaunchedListener(() => {\n  // Each time the event is received you should call Navigation.setRoot\n  Navigation.registerComponent('Home', () => Component);\n  Navigation.setRoot({\n    root: {\n      component: {\n        name: 'Home',\n      },\n    },\n  });\n});\n```\n\n- `registerAppLaunchedListener` 是在啟動 APP 後會觸發的一次性事件，在此做相關初始化的動作\n\n- `Navigation.registerComponent(component name , react component)`  \n  把 react component 註冊至 navigation 賦予 **相關代號(component name)**\n\n- `Navigation.setRoot(layout)` 設定整體 root 結構的 Layout\n\n## 常用 Command\n\n# Question\n\n- 編譯 ios 時遇上， `linker command failed with exit code 1 (use -v to see invocation)`  \n  遇上情境：作業系統是 `Mac OS 10.14`、 `xcode 10`  \n  解決方法：更新 os & xcode 至最新版\n\n- 在 `run react-native run-ios`，遇上 `xcrun: error: active developer path`\n\n* 遇上情境：原本是 `xcode 10` ， 載入 `xcode 12`後，出先這個問題\n* 解決方法： 輸入 `sudo xcode-select -switch <Xcode.app 安裝位置> `，重新設定 Xcode 的位置\n\n- 什麼是 react-native link\n\n- 編譯 ios 時遇上\n\n  > Showing All Messages\n  > Multiple commands produce 'shoppingcarSkeleton.app/Zocial.ttf'\n\n- 如何啟動 react native debugger 與 ios 模擬器互相連接\n","source":"react-native-note/index.md","raw":"---\ntitle: react-native-note\ndate: 2021-01-18 11:29:17\n---\n\n# Install\n\n## Requirement\n\n1. xcode\n   - 在 App Store or [Apple Developer](https://developer.apple.com/download/more/)\n2. android\n3. react-native-cli\n   - npm install -g react-native-cli\n4. watchman\n   - brew install watchman\n\n# Create React Native Project\n\n> react-native init < project name >\n\n# 簡介\n\nreact native，不像是 web 那樣有相關的`基本元素 (div 、 span 、 li ..etc )`，為了要配合兩個不同的平台所以會把所有的內容以 component 表示\n\n# Document Architecture\n\n```\n├── __tests__\n├── node_modules\n├── android\n├── ios\n├── app.json\n├── babel.config.js\n├── App.js\n├── index.js\n├── metro.config.js\n├── package.json\n└── yarn.lock\n```\n\n# command\n\n# native-base\n\n# react-native navigation\n\n針對 react native 管理 畫面切換的套件\n\nHierarchy ？\n\n畫面以 **Hierarchy** 做區分，有以下幾種：\n\n- Root\n- Modal\n- Overlay\n\n可放置 **Layout** ， 提供以下幾種 :\n\n- Stack\n- Bottom tabs\n- Side Menu\n- External Component\n\n## 安裝\n\n### 需求\n\n- node >= 8\n- react-native >= 0.51\n\n### command\n\n> yarn add react-native-navigation\n\n## 啟動 navigation\n\n在`index.js`,打上以下指令\n\n```javascript\nNavigation.events().registerAppLaunchedListener(() => {\n  // Each time the event is received you should call Navigation.setRoot\n  Navigation.registerComponent('Home', () => Component);\n  Navigation.setRoot({\n    root: {\n      component: {\n        name: 'Home',\n      },\n    },\n  });\n});\n```\n\n- `registerAppLaunchedListener` 是在啟動 APP 後會觸發的一次性事件，在此做相關初始化的動作\n\n- `Navigation.registerComponent(component name , react component)`  \n  把 react component 註冊至 navigation 賦予 **相關代號(component name)**\n\n- `Navigation.setRoot(layout)` 設定整體 root 結構的 Layout\n\n## 常用 Command\n\n# Question\n\n- 編譯 ios 時遇上， `linker command failed with exit code 1 (use -v to see invocation)`  \n  遇上情境：作業系統是 `Mac OS 10.14`、 `xcode 10`  \n  解決方法：更新 os & xcode 至最新版\n\n- 在 `run react-native run-ios`，遇上 `xcrun: error: active developer path`\n\n* 遇上情境：原本是 `xcode 10` ， 載入 `xcode 12`後，出先這個問題\n* 解決方法： 輸入 `sudo xcode-select -switch <Xcode.app 安裝位置> `，重新設定 Xcode 的位置\n\n- 什麼是 react-native link\n\n- 編譯 ios 時遇上\n\n  > Showing All Messages\n  > Multiple commands produce 'shoppingcarSkeleton.app/Zocial.ttf'\n\n- 如何啟動 react native debugger 與 ios 模擬器互相連接\n","updated":"2021-10-19T11:22:58.302Z","path":"react-native-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdak003a5ojtbe6g5lgf","content":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Requirement\"><a href=\"#Requirement\" class=\"headerlink\" title=\"Requirement\"></a>Requirement</h2><ol>\n<li>xcode<ul>\n<li>在 App Store or <a href=\"https://developer.apple.com/download/more/\" target=\"_blank\" rel=\"noopener\">Apple Developer</a></li>\n</ul>\n</li>\n<li>android</li>\n<li>react-native-cli<ul>\n<li>npm install -g react-native-cli</li>\n</ul>\n</li>\n<li>watchman<ul>\n<li>brew install watchman</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Create-React-Native-Project\"><a href=\"#Create-React-Native-Project\" class=\"headerlink\" title=\"Create React Native Project\"></a>Create React Native Project</h1><blockquote>\n<p>react-native init &lt; project name &gt;</p>\n</blockquote>\n<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>react native，不像是 web 那樣有相關的<code>基本元素 (div 、 span 、 li ..etc )</code>，為了要配合兩個不同的平台所以會把所有的內容以 component 表示</p>\n<h1 id=\"Document-Architecture\"><a href=\"#Document-Architecture\" class=\"headerlink\" title=\"Document Architecture\"></a>Document Architecture</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── __tests__</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── android</span><br><span class=\"line\">├── ios</span><br><span class=\"line\">├── app.json</span><br><span class=\"line\">├── babel.config.js</span><br><span class=\"line\">├── App.js</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── metro.config.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">└── yarn.lock</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h1><h1 id=\"native-base\"><a href=\"#native-base\" class=\"headerlink\" title=\"native-base\"></a>native-base</h1><h1 id=\"react-native-navigation\"><a href=\"#react-native-navigation\" class=\"headerlink\" title=\"react-native navigation\"></a>react-native navigation</h1><p>針對 react native 管理 畫面切換的套件</p>\n<p>Hierarchy ？</p>\n<p>畫面以 <strong>Hierarchy</strong> 做區分，有以下幾種：</p>\n<ul>\n<li>Root</li>\n<li>Modal</li>\n<li>Overlay</li>\n</ul>\n<p>可放置 <strong>Layout</strong> ， 提供以下幾種 :</p>\n<ul>\n<li>Stack</li>\n<li>Bottom tabs</li>\n<li>Side Menu</li>\n<li>External Component</li>\n</ul>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>node &gt;= 8</li>\n<li>react-native &gt;= 0.51</li>\n</ul>\n<h3 id=\"command-1\"><a href=\"#command-1\" class=\"headerlink\" title=\"command\"></a>command</h3><blockquote>\n<p>yarn add react-native-navigation</p>\n</blockquote>\n<h2 id=\"啟動-navigation\"><a href=\"#啟動-navigation\" class=\"headerlink\" title=\"啟動 navigation\"></a>啟動 navigation</h2><p>在<code>index.js</code>,打上以下指令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.events().registerAppLaunchedListener(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Each time the event is received you should call Navigation.setRoot</span></span><br><span class=\"line\">  Navigation.registerComponent(<span class=\"string\">'Home'</span>, () =&gt; Component);</span><br><span class=\"line\">  Navigation.setRoot(&#123;</span><br><span class=\"line\">    root: &#123;</span><br><span class=\"line\">      component: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Home'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>registerAppLaunchedListener</code> 是在啟動 APP 後會觸發的一次性事件，在此做相關初始化的動作</p>\n</li>\n<li><p><code>Navigation.registerComponent(component name , react component)</code><br>把 react component 註冊至 navigation 賦予 <strong>相關代號(component name)</strong></p>\n</li>\n<li><p><code>Navigation.setRoot(layout)</code> 設定整體 root 結構的 Layout</p>\n</li>\n</ul>\n<h2 id=\"常用-Command\"><a href=\"#常用-Command\" class=\"headerlink\" title=\"常用 Command\"></a>常用 Command</h2><h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><ul>\n<li><p>編譯 ios 時遇上， <code>linker command failed with exit code 1 (use -v to see invocation)</code><br>遇上情境：作業系統是 <code>Mac OS 10.14</code>、 <code>xcode 10</code><br>解決方法：更新 os &amp; xcode 至最新版</p>\n</li>\n<li><p>在 <code>run react-native run-ios</code>，遇上 <code>xcrun: error: active developer path</code></p>\n</li>\n</ul>\n<ul>\n<li>遇上情境：原本是 <code>xcode 10</code> ， 載入 <code>xcode 12</code>後，出先這個問題</li>\n<li>解決方法： 輸入 <code>sudo xcode-select -switch &lt;Xcode.app 安裝位置&gt;</code>，重新設定 Xcode 的位置</li>\n</ul>\n<ul>\n<li><p>什麼是 react-native link</p>\n</li>\n<li><p>編譯 ios 時遇上</p>\n<blockquote>\n<p>Showing All Messages<br>Multiple commands produce ‘shoppingcarSkeleton.app/Zocial.ttf’</p>\n</blockquote>\n</li>\n<li><p>如何啟動 react native debugger 與 ios 模擬器互相連接</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><h2 id=\"Requirement\"><a href=\"#Requirement\" class=\"headerlink\" title=\"Requirement\"></a>Requirement</h2><ol>\n<li>xcode<ul>\n<li>在 App Store or <a href=\"https://developer.apple.com/download/more/\" target=\"_blank\" rel=\"noopener\">Apple Developer</a></li>\n</ul>\n</li>\n<li>android</li>\n<li>react-native-cli<ul>\n<li>npm install -g react-native-cli</li>\n</ul>\n</li>\n<li>watchman<ul>\n<li>brew install watchman</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Create-React-Native-Project\"><a href=\"#Create-React-Native-Project\" class=\"headerlink\" title=\"Create React Native Project\"></a>Create React Native Project</h1><blockquote>\n<p>react-native init &lt; project name &gt;</p>\n</blockquote>\n<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>react native，不像是 web 那樣有相關的<code>基本元素 (div 、 span 、 li ..etc )</code>，為了要配合兩個不同的平台所以會把所有的內容以 component 表示</p>\n<h1 id=\"Document-Architecture\"><a href=\"#Document-Architecture\" class=\"headerlink\" title=\"Document Architecture\"></a>Document Architecture</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── __tests__</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── android</span><br><span class=\"line\">├── ios</span><br><span class=\"line\">├── app.json</span><br><span class=\"line\">├── babel.config.js</span><br><span class=\"line\">├── App.js</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── metro.config.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">└── yarn.lock</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h1><h1 id=\"native-base\"><a href=\"#native-base\" class=\"headerlink\" title=\"native-base\"></a>native-base</h1><h1 id=\"react-native-navigation\"><a href=\"#react-native-navigation\" class=\"headerlink\" title=\"react-native navigation\"></a>react-native navigation</h1><p>針對 react native 管理 畫面切換的套件</p>\n<p>Hierarchy ？</p>\n<p>畫面以 <strong>Hierarchy</strong> 做區分，有以下幾種：</p>\n<ul>\n<li>Root</li>\n<li>Modal</li>\n<li>Overlay</li>\n</ul>\n<p>可放置 <strong>Layout</strong> ， 提供以下幾種 :</p>\n<ul>\n<li>Stack</li>\n<li>Bottom tabs</li>\n<li>Side Menu</li>\n<li>External Component</li>\n</ul>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>node &gt;= 8</li>\n<li>react-native &gt;= 0.51</li>\n</ul>\n<h3 id=\"command-1\"><a href=\"#command-1\" class=\"headerlink\" title=\"command\"></a>command</h3><blockquote>\n<p>yarn add react-native-navigation</p>\n</blockquote>\n<h2 id=\"啟動-navigation\"><a href=\"#啟動-navigation\" class=\"headerlink\" title=\"啟動 navigation\"></a>啟動 navigation</h2><p>在<code>index.js</code>,打上以下指令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.events().registerAppLaunchedListener(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Each time the event is received you should call Navigation.setRoot</span></span><br><span class=\"line\">  Navigation.registerComponent(<span class=\"string\">'Home'</span>, () =&gt; Component);</span><br><span class=\"line\">  Navigation.setRoot(&#123;</span><br><span class=\"line\">    root: &#123;</span><br><span class=\"line\">      component: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Home'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>registerAppLaunchedListener</code> 是在啟動 APP 後會觸發的一次性事件，在此做相關初始化的動作</p>\n</li>\n<li><p><code>Navigation.registerComponent(component name , react component)</code><br>把 react component 註冊至 navigation 賦予 <strong>相關代號(component name)</strong></p>\n</li>\n<li><p><code>Navigation.setRoot(layout)</code> 設定整體 root 結構的 Layout</p>\n</li>\n</ul>\n<h2 id=\"常用-Command\"><a href=\"#常用-Command\" class=\"headerlink\" title=\"常用 Command\"></a>常用 Command</h2><h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><ul>\n<li><p>編譯 ios 時遇上， <code>linker command failed with exit code 1 (use -v to see invocation)</code><br>遇上情境：作業系統是 <code>Mac OS 10.14</code>、 <code>xcode 10</code><br>解決方法：更新 os &amp; xcode 至最新版</p>\n</li>\n<li><p>在 <code>run react-native run-ios</code>，遇上 <code>xcrun: error: active developer path</code></p>\n</li>\n</ul>\n<ul>\n<li>遇上情境：原本是 <code>xcode 10</code> ， 載入 <code>xcode 12</code>後，出先這個問題</li>\n<li>解決方法： 輸入 <code>sudo xcode-select -switch &lt;Xcode.app 安裝位置&gt;</code>，重新設定 Xcode 的位置</li>\n</ul>\n<ul>\n<li><p>什麼是 react-native link</p>\n</li>\n<li><p>編譯 ios 時遇上</p>\n<blockquote>\n<p>Showing All Messages<br>Multiple commands produce ‘shoppingcarSkeleton.app/Zocial.ttf’</p>\n</blockquote>\n</li>\n<li><p>如何啟動 react native debugger 與 ios 模擬器互相連接</p>\n</li>\n</ul>\n"},{"title":"reac-todolist","date":"2020-04-02T13:46:10.000Z","_content":"# React ToDoList\n### 程式碼\nhttps://github.com/RobYang203/ReactToDoList.git\n\n#### 資料結構\n* id - number\n* position - number\n    * 所處陣列位置\n* type - string\n    * w = 待辦\n    * d = 刪除\n    * f = 結束\n* date - date string\n* description - string\n```js\n{\n    id:0,\n    position:0,\n    type: 'w',\n    date:'2020-03-27T00:00:00',\n    description:'do what'\n}\n```\n#### 畫面\n* 外框\n    * 輸入區\n        * 輸入框\n        * 確認按鈕\n    * 列表區\n        * 單筆事項\n            * 顯示資料\n            * 刪除按鈕\n            * 結束按鈕\n\n#### 元件\n* App\n    * 功能\n        * 維護資料\n        * 建立 InputArea \n        * 根據資料建立 DoThingItem\n        * 接收 DoThingItem 動作來改變資料\n    * 流程\n        * 在 `constructor` 建立參數\n            * **DoThingList**  - 待辦資料陣列\n            * **DoThingCompList**- DoThingItem 元件陣列\n            * **state.modifyType** 判斷目前執行動作\n        * 針對資料建立三種function\n            * `insertItem(text)` \n                * 新增代辦事項到**DoThingList**\n                * 參數\n                    * text - 需要代辦的事項\n            * `finishItem(pos , type)`\n                * 待辦事項完成\n                * 參數\n                    * pos - 在**DoThingList**的位置\n                    * type - 切換類型 w | f\n            * `deletItem(pos)`\n                * 刪除代辦事項\n                * 參數\n                    * pos - 在**DoThingList**的位置\n        * 建立 Component\n            * `createItemCompList`\n                * 根據 **DoThingList** 去建立 DoThingItem\n        * 在`getDerivedStateFromProps` 初始化 state 資訊 \n        * 在`shouldComponentUpdate` 驗證是否需要 **re-render**\n* InputArea\n    * 功能\n        * 在`輸入區`輸入待辦事項\n        * 按下`確認按鈕`，建立一筆資料格式，保存在`外框`並在`列表區`顯示\n    * 流程\n        * 從 App 傳入 `insertItem function`，供資料回傳\n        * 建立 `sendDate function`\n            * 當`Add按鈕`按下去時啟動\n            * 沒有輸入會跳出警告視窗\n            * 有輸入透過`this.props.insertItem`回傳資料\n            \n\n* DoThingItem\n    * 功能    \n        * `列表區` 根據資料建立`單筆事項`\n        * 按下`結束按鈕`，判斷目前資料**type**，訊號送至`外框`改變狀態\n            * `type = w` 轉 **f**\n            * `type = f` 轉 **w**\n        * 按下`刪除按鈕`，訊號送至`外框`，回傳**position**刪除指定資料\n    * 流程\n        * 從 App 傳入 `finishItem function ＆ deletItem function`，供資料回傳\n        * 從 App 傳入 data ，為代辦事項資料，供給元件設定\n        * * 在 `constructor` 建立參數\n            * itemClass - 顯示是否完成的**css class**\n                * `\"\"` - 尚未完成\n                * `checked` - 以完成\n        * 設定 `itemClick function`\n            * 當按下代辦事項啟動\n        * 設定 `itemDeletClick function`\n            * 當按下刪除按鈕時啟動\n        * 在`getDerivedStateFromProps` 根據`props.data `初始化 state 資訊     \n            * 根據 **data.type** 判斷 **itemClass** 的值 \n\n\n","source":"react-todolist/index.md","raw":"---\ntitle: reac-todolist\ndate: 2020-04-02 21:46:10\n---\n# React ToDoList\n### 程式碼\nhttps://github.com/RobYang203/ReactToDoList.git\n\n#### 資料結構\n* id - number\n* position - number\n    * 所處陣列位置\n* type - string\n    * w = 待辦\n    * d = 刪除\n    * f = 結束\n* date - date string\n* description - string\n```js\n{\n    id:0,\n    position:0,\n    type: 'w',\n    date:'2020-03-27T00:00:00',\n    description:'do what'\n}\n```\n#### 畫面\n* 外框\n    * 輸入區\n        * 輸入框\n        * 確認按鈕\n    * 列表區\n        * 單筆事項\n            * 顯示資料\n            * 刪除按鈕\n            * 結束按鈕\n\n#### 元件\n* App\n    * 功能\n        * 維護資料\n        * 建立 InputArea \n        * 根據資料建立 DoThingItem\n        * 接收 DoThingItem 動作來改變資料\n    * 流程\n        * 在 `constructor` 建立參數\n            * **DoThingList**  - 待辦資料陣列\n            * **DoThingCompList**- DoThingItem 元件陣列\n            * **state.modifyType** 判斷目前執行動作\n        * 針對資料建立三種function\n            * `insertItem(text)` \n                * 新增代辦事項到**DoThingList**\n                * 參數\n                    * text - 需要代辦的事項\n            * `finishItem(pos , type)`\n                * 待辦事項完成\n                * 參數\n                    * pos - 在**DoThingList**的位置\n                    * type - 切換類型 w | f\n            * `deletItem(pos)`\n                * 刪除代辦事項\n                * 參數\n                    * pos - 在**DoThingList**的位置\n        * 建立 Component\n            * `createItemCompList`\n                * 根據 **DoThingList** 去建立 DoThingItem\n        * 在`getDerivedStateFromProps` 初始化 state 資訊 \n        * 在`shouldComponentUpdate` 驗證是否需要 **re-render**\n* InputArea\n    * 功能\n        * 在`輸入區`輸入待辦事項\n        * 按下`確認按鈕`，建立一筆資料格式，保存在`外框`並在`列表區`顯示\n    * 流程\n        * 從 App 傳入 `insertItem function`，供資料回傳\n        * 建立 `sendDate function`\n            * 當`Add按鈕`按下去時啟動\n            * 沒有輸入會跳出警告視窗\n            * 有輸入透過`this.props.insertItem`回傳資料\n            \n\n* DoThingItem\n    * 功能    \n        * `列表區` 根據資料建立`單筆事項`\n        * 按下`結束按鈕`，判斷目前資料**type**，訊號送至`外框`改變狀態\n            * `type = w` 轉 **f**\n            * `type = f` 轉 **w**\n        * 按下`刪除按鈕`，訊號送至`外框`，回傳**position**刪除指定資料\n    * 流程\n        * 從 App 傳入 `finishItem function ＆ deletItem function`，供資料回傳\n        * 從 App 傳入 data ，為代辦事項資料，供給元件設定\n        * * 在 `constructor` 建立參數\n            * itemClass - 顯示是否完成的**css class**\n                * `\"\"` - 尚未完成\n                * `checked` - 以完成\n        * 設定 `itemClick function`\n            * 當按下代辦事項啟動\n        * 設定 `itemDeletClick function`\n            * 當按下刪除按鈕時啟動\n        * 在`getDerivedStateFromProps` 根據`props.data `初始化 state 資訊     \n            * 根據 **data.type** 判斷 **itemClass** 的值 \n\n\n","updated":"2020-04-02T16:44:06.299Z","path":"react-todolist/index.html","comments":1,"layout":"page","_id":"ckuy1kdak003b5ojt69h29p8r","content":"<h1 id=\"React-ToDoList\"><a href=\"#React-ToDoList\" class=\"headerlink\" title=\"React ToDoList\"></a>React ToDoList</h1><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p><a href=\"https://github.com/RobYang203/ReactToDoList.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/ReactToDoList.git</a></p>\n<h4 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h4><ul>\n<li>id - number</li>\n<li>position - number<ul>\n<li>所處陣列位置</li>\n</ul>\n</li>\n<li>type - string<ul>\n<li>w = 待辦</li>\n<li>d = 刪除</li>\n<li>f = 結束</li>\n</ul>\n</li>\n<li>date - date string</li>\n<li>description - string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    id:<span class=\"number\">0</span>,</span><br><span class=\"line\">    position:<span class=\"number\">0</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'w'</span>,</span><br><span class=\"line\">    date:<span class=\"string\">'2020-03-27T00:00:00'</span>,</span><br><span class=\"line\">    description:<span class=\"string\">'do what'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"畫面\"><a href=\"#畫面\" class=\"headerlink\" title=\"畫面\"></a>畫面</h4></li>\n<li>外框<ul>\n<li>輸入區<ul>\n<li>輸入框</li>\n<li>確認按鈕</li>\n</ul>\n</li>\n<li>列表區<ul>\n<li>單筆事項<ul>\n<li>顯示資料</li>\n<li>刪除按鈕</li>\n<li>結束按鈕</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h4><ul>\n<li>App<ul>\n<li>功能<ul>\n<li>維護資料</li>\n<li>建立 InputArea </li>\n<li>根據資料建立 DoThingItem</li>\n<li>接收 DoThingItem 動作來改變資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li><strong>DoThingList</strong>  - 待辦資料陣列</li>\n<li><strong>DoThingCompList</strong>- DoThingItem 元件陣列</li>\n<li><strong>state.modifyType</strong> 判斷目前執行動作</li>\n</ul>\n</li>\n<li>針對資料建立三種function<ul>\n<li><code>insertItem(text)</code> <ul>\n<li>新增代辦事項到<strong>DoThingList</strong></li>\n<li>參數<ul>\n<li>text - 需要代辦的事項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>finishItem(pos , type)</code><ul>\n<li>待辦事項完成</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n<li>type - 切換類型 w | f</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>deletItem(pos)</code><ul>\n<li>刪除代辦事項</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>建立 Component<ul>\n<li><code>createItemCompList</code><ul>\n<li>根據 <strong>DoThingList</strong> 去建立 DoThingItem</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 初始化 state 資訊 </li>\n<li>在<code>shouldComponentUpdate</code> 驗證是否需要 <strong>re-render</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>InputArea<ul>\n<li>功能<ul>\n<li>在<code>輸入區</code>輸入待辦事項</li>\n<li>按下<code>確認按鈕</code>，建立一筆資料格式，保存在<code>外框</code>並在<code>列表區</code>顯示</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>insertItem function</code>，供資料回傳</li>\n<li>建立 <code>sendDate function</code><ul>\n<li>當<code>Add按鈕</code>按下去時啟動</li>\n<li>沒有輸入會跳出警告視窗</li>\n<li>有輸入透過<code>this.props.insertItem</code>回傳資料</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>DoThingItem<ul>\n<li>功能    <ul>\n<li><code>列表區</code> 根據資料建立<code>單筆事項</code></li>\n<li>按下<code>結束按鈕</code>，判斷目前資料<strong>type</strong>，訊號送至<code>外框</code>改變狀態<ul>\n<li><code>type = w</code> 轉 <strong>f</strong></li>\n<li><code>type = f</code> 轉 <strong>w</strong></li>\n</ul>\n</li>\n<li>按下<code>刪除按鈕</code>，訊號送至<code>外框</code>，回傳<strong>position</strong>刪除指定資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>finishItem function ＆ deletItem function</code>，供資料回傳</li>\n<li>從 App 傳入 data ，為代辦事項資料，供給元件設定</li>\n<li><ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li>itemClass - 顯示是否完成的<strong>css class</strong><ul>\n<li><code>&quot;&quot;</code> - 尚未完成</li>\n<li><code>checked</code> - 以完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>設定 <code>itemClick function</code><ul>\n<li>當按下代辦事項啟動</li>\n</ul>\n</li>\n<li>設定 <code>itemDeletClick function</code><ul>\n<li>當按下刪除按鈕時啟動</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 根據<code>props.data</code>初始化 state 資訊     <ul>\n<li>根據 <strong>data.type</strong> 判斷 <strong>itemClass</strong> 的值 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-ToDoList\"><a href=\"#React-ToDoList\" class=\"headerlink\" title=\"React ToDoList\"></a>React ToDoList</h1><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p><a href=\"https://github.com/RobYang203/ReactToDoList.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/ReactToDoList.git</a></p>\n<h4 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h4><ul>\n<li>id - number</li>\n<li>position - number<ul>\n<li>所處陣列位置</li>\n</ul>\n</li>\n<li>type - string<ul>\n<li>w = 待辦</li>\n<li>d = 刪除</li>\n<li>f = 結束</li>\n</ul>\n</li>\n<li>date - date string</li>\n<li>description - string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    id:<span class=\"number\">0</span>,</span><br><span class=\"line\">    position:<span class=\"number\">0</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'w'</span>,</span><br><span class=\"line\">    date:<span class=\"string\">'2020-03-27T00:00:00'</span>,</span><br><span class=\"line\">    description:<span class=\"string\">'do what'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"畫面\"><a href=\"#畫面\" class=\"headerlink\" title=\"畫面\"></a>畫面</h4></li>\n<li>外框<ul>\n<li>輸入區<ul>\n<li>輸入框</li>\n<li>確認按鈕</li>\n</ul>\n</li>\n<li>列表區<ul>\n<li>單筆事項<ul>\n<li>顯示資料</li>\n<li>刪除按鈕</li>\n<li>結束按鈕</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h4><ul>\n<li>App<ul>\n<li>功能<ul>\n<li>維護資料</li>\n<li>建立 InputArea </li>\n<li>根據資料建立 DoThingItem</li>\n<li>接收 DoThingItem 動作來改變資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li><strong>DoThingList</strong>  - 待辦資料陣列</li>\n<li><strong>DoThingCompList</strong>- DoThingItem 元件陣列</li>\n<li><strong>state.modifyType</strong> 判斷目前執行動作</li>\n</ul>\n</li>\n<li>針對資料建立三種function<ul>\n<li><code>insertItem(text)</code> <ul>\n<li>新增代辦事項到<strong>DoThingList</strong></li>\n<li>參數<ul>\n<li>text - 需要代辦的事項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>finishItem(pos , type)</code><ul>\n<li>待辦事項完成</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n<li>type - 切換類型 w | f</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>deletItem(pos)</code><ul>\n<li>刪除代辦事項</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>建立 Component<ul>\n<li><code>createItemCompList</code><ul>\n<li>根據 <strong>DoThingList</strong> 去建立 DoThingItem</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 初始化 state 資訊 </li>\n<li>在<code>shouldComponentUpdate</code> 驗證是否需要 <strong>re-render</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>InputArea<ul>\n<li>功能<ul>\n<li>在<code>輸入區</code>輸入待辦事項</li>\n<li>按下<code>確認按鈕</code>，建立一筆資料格式，保存在<code>外框</code>並在<code>列表區</code>顯示</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>insertItem function</code>，供資料回傳</li>\n<li>建立 <code>sendDate function</code><ul>\n<li>當<code>Add按鈕</code>按下去時啟動</li>\n<li>沒有輸入會跳出警告視窗</li>\n<li>有輸入透過<code>this.props.insertItem</code>回傳資料</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>DoThingItem<ul>\n<li>功能    <ul>\n<li><code>列表區</code> 根據資料建立<code>單筆事項</code></li>\n<li>按下<code>結束按鈕</code>，判斷目前資料<strong>type</strong>，訊號送至<code>外框</code>改變狀態<ul>\n<li><code>type = w</code> 轉 <strong>f</strong></li>\n<li><code>type = f</code> 轉 <strong>w</strong></li>\n</ul>\n</li>\n<li>按下<code>刪除按鈕</code>，訊號送至<code>外框</code>，回傳<strong>position</strong>刪除指定資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>finishItem function ＆ deletItem function</code>，供資料回傳</li>\n<li>從 App 傳入 data ，為代辦事項資料，供給元件設定</li>\n<li><ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li>itemClass - 顯示是否完成的<strong>css class</strong><ul>\n<li><code>&quot;&quot;</code> - 尚未完成</li>\n<li><code>checked</code> - 以完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>設定 <code>itemClick function</code><ul>\n<li>當按下代辦事項啟動</li>\n</ul>\n</li>\n<li>設定 <code>itemDeletClick function</code><ul>\n<li>當按下刪除按鈕時啟動</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 根據<code>props.data</code>初始化 state 資訊     <ul>\n<li>根據 <strong>data.type</strong> 判斷 <strong>itemClass</strong> 的值 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"seo-note","date":"2021-01-18T08:49:46.000Z","_content":"\n## SEO for SPA\n1. pre-render (react-snap)\n    1. 處理 pre-render畫面與正式畫面的落差\n    2. 處理 API CORS\n    3. 設定 ci\n2. route adjustment\n    1. matches route \n\n3. html semantic Element\n4. lazy loading\n5. resource optimization","source":"seo-note/index.md","raw":"---\ntitle: seo-note\ndate: 2021-01-18 16:49:46\n---\n\n## SEO for SPA\n1. pre-render (react-snap)\n    1. 處理 pre-render畫面與正式畫面的落差\n    2. 處理 API CORS\n    3. 設定 ci\n2. route adjustment\n    1. matches route \n\n3. html semantic Element\n4. lazy loading\n5. resource optimization","updated":"2021-01-19T05:57:41.566Z","path":"seo-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdal003c5ojt3618dnvd","content":"<h2 id=\"SEO-for-SPA\"><a href=\"#SEO-for-SPA\" class=\"headerlink\" title=\"SEO for SPA\"></a>SEO for SPA</h2><ol>\n<li><p>pre-render (react-snap)</p>\n<ol>\n<li>處理 pre-render畫面與正式畫面的落差</li>\n<li>處理 API CORS</li>\n<li>設定 ci</li>\n</ol>\n</li>\n<li><p>route adjustment</p>\n<ol>\n<li>matches route </li>\n</ol>\n</li>\n<li><p>html semantic Element</p>\n</li>\n<li><p>lazy loading</p>\n</li>\n<li><p>resource optimization</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SEO-for-SPA\"><a href=\"#SEO-for-SPA\" class=\"headerlink\" title=\"SEO for SPA\"></a>SEO for SPA</h2><ol>\n<li><p>pre-render (react-snap)</p>\n<ol>\n<li>處理 pre-render畫面與正式畫面的落差</li>\n<li>處理 API CORS</li>\n<li>設定 ci</li>\n</ol>\n</li>\n<li><p>route adjustment</p>\n<ol>\n<li>matches route </li>\n</ol>\n</li>\n<li><p>html semantic Element</p>\n</li>\n<li><p>lazy loading</p>\n</li>\n<li><p>resource optimization</p>\n</li>\n</ol>\n"},{"title":"建立 CRA 開發環境","date":"2021-02-22T11:47:16.000Z","_content":"# 需要工具\n## NVM\n### 簡述\n nodejs 版本管理器\n### 安裝\n```sh\n$ brew install nvm\n```\n### 設定\n```sh\n$ echo \"source $(brew --prefix nvm)/nvm.sh\" >> .bash_profile # 把 nvm.sh 路徑放入到 .bash_profile\n$ . ~/.bash_profile #更新設定\n```\n\n## NodeJS\n\n### 簡述\n\n在本地端可以執行 javascript 的一個開發環境\n\n### 安裝(擇一)\n1. [官網](https://nodejs.org/en/)下載安裝\n2. Homebrew\n``` sh\n$ brew search node #尋找可安裝版本\n$ brew install node@<version> #安裝\n```\n3. nvm\n``` sh\n$ nvm ls-remote #尋找可安裝版本\n$ nvm install <version> # 安裝\n```\n\n## Yarn\n### 簡述\npackage 管理器，管理專案的 package \n\n### 安裝 \n``` sh\n$ brew install yarn # 安裝\n```\n\n\n# CRA \n## 簡述\nfacebook 推出的官方 reactJS Scaffold ， 讓你站在巨人的肩膀上，降低開發技術需求，建立專案後即可開發  \n\n## 安裝 by yarn \n``` sh\n# yarn 版本需高過 0.25\n$ yarn create react-app <app name> # 安裝 \n```\n\n## 指令\n``` sh\n$ yarn start # 開啟 dev server\n$ yarn run build # 打包正式版\n$ yarn run test # 啟動測試\n$ yarn run eject # 解開 cra 封裝，\n```\n\n![alt run dev server](./assets/runDevServer.png)\n## 特色\n- 可以設定環境變數，可針對不同環境做不同的設定\n- 可額外擴充環境變數\n- 測試、打包免設定\n- 內建 dev server，支援 hot reload，遇到衝突可換 port\n- 最基礎的 robot.txt & manifest.json\n- 簡單指令，輕鬆執行打包(build)、本地開發(localhost)\n- 額外客製化 template\n- 附加 `browserlist`\n- 支援 \n    - Exponentiation Operator - 指數運算子(**)\n    - async/await 語法\n    - rest/spreed Operator - 解構運算 (...)\n    - dynamic import\n    - Class 宣告 ＆ static 屬性\n    - JSX 語法\n\n\n## 注意\n- 需要經過 webpack 編譯的檔案(ex: .js .css ...etc)，請放在 `src`資料夾內\n- 程式進入點為 `src/index.js`，不可**更改名稱**或**刪除此檔案**\n- 打包後的檔案統一放在 `build` 資料夾\n- `public\b/index.html`為打包後的網頁板模  \n- 不需要任何處理的檔案，但需要放進 `build` 資料夾，可放在 `public` 資料夾 \n- eject 後就無法在封裝了，請謹慎使用\n\n\n","source":"react-dev-note-create-environment/index.md","raw":"---\ntitle: 建立 CRA 開發環境\ndate: 2021-02-22 19:47:16\n---\n# 需要工具\n## NVM\n### 簡述\n nodejs 版本管理器\n### 安裝\n```sh\n$ brew install nvm\n```\n### 設定\n```sh\n$ echo \"source $(brew --prefix nvm)/nvm.sh\" >> .bash_profile # 把 nvm.sh 路徑放入到 .bash_profile\n$ . ~/.bash_profile #更新設定\n```\n\n## NodeJS\n\n### 簡述\n\n在本地端可以執行 javascript 的一個開發環境\n\n### 安裝(擇一)\n1. [官網](https://nodejs.org/en/)下載安裝\n2. Homebrew\n``` sh\n$ brew search node #尋找可安裝版本\n$ brew install node@<version> #安裝\n```\n3. nvm\n``` sh\n$ nvm ls-remote #尋找可安裝版本\n$ nvm install <version> # 安裝\n```\n\n## Yarn\n### 簡述\npackage 管理器，管理專案的 package \n\n### 安裝 \n``` sh\n$ brew install yarn # 安裝\n```\n\n\n# CRA \n## 簡述\nfacebook 推出的官方 reactJS Scaffold ， 讓你站在巨人的肩膀上，降低開發技術需求，建立專案後即可開發  \n\n## 安裝 by yarn \n``` sh\n# yarn 版本需高過 0.25\n$ yarn create react-app <app name> # 安裝 \n```\n\n## 指令\n``` sh\n$ yarn start # 開啟 dev server\n$ yarn run build # 打包正式版\n$ yarn run test # 啟動測試\n$ yarn run eject # 解開 cra 封裝，\n```\n\n![alt run dev server](./assets/runDevServer.png)\n## 特色\n- 可以設定環境變數，可針對不同環境做不同的設定\n- 可額外擴充環境變數\n- 測試、打包免設定\n- 內建 dev server，支援 hot reload，遇到衝突可換 port\n- 最基礎的 robot.txt & manifest.json\n- 簡單指令，輕鬆執行打包(build)、本地開發(localhost)\n- 額外客製化 template\n- 附加 `browserlist`\n- 支援 \n    - Exponentiation Operator - 指數運算子(**)\n    - async/await 語法\n    - rest/spreed Operator - 解構運算 (...)\n    - dynamic import\n    - Class 宣告 ＆ static 屬性\n    - JSX 語法\n\n\n## 注意\n- 需要經過 webpack 編譯的檔案(ex: .js .css ...etc)，請放在 `src`資料夾內\n- 程式進入點為 `src/index.js`，不可**更改名稱**或**刪除此檔案**\n- 打包後的檔案統一放在 `build` 資料夾\n- `public\b/index.html`為打包後的網頁板模  \n- 不需要任何處理的檔案，但需要放進 `build` 資料夾，可放在 `public` 資料夾 \n- eject 後就無法在封裝了，請謹慎使用\n\n\n","updated":"2021-02-25T04:55:23.317Z","path":"react-dev-note-create-environment/index.html","comments":1,"layout":"page","_id":"ckuy1kdam003d5ojtft23c5q6","content":"<h1 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h1><h2 id=\"NVM\"><a href=\"#NVM\" class=\"headerlink\" title=\"NVM\"></a>NVM</h2><h3 id=\"簡述\"><a href=\"#簡述\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p> nodejs 版本管理器</p>\n<h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nvm</span><br></pre></td></tr></table></figure>\n<h3 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"source <span class=\"variable\">$(brew --prefix nvm)</span>/nvm.sh\"</span> &gt;&gt; .bash_profile <span class=\"comment\"># 把 nvm.sh 路徑放入到 .bash_profile</span></span><br><span class=\"line\">$ . ~/.bash_profile <span class=\"comment\">#更新設定</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h2><h3 id=\"簡述-1\"><a href=\"#簡述-1\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p>在本地端可以執行 javascript 的一個開發環境</p>\n<h3 id=\"安裝-擇一\"><a href=\"#安裝-擇一\" class=\"headerlink\" title=\"安裝(擇一)\"></a>安裝(擇一)</h3><ol>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">官網</a>下載安裝</li>\n<li>Homebrew<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew search node <span class=\"comment\">#尋找可安裝版本</span></span><br><span class=\"line\">$ brew install node@&lt;version&gt; <span class=\"comment\">#安裝</span></span><br></pre></td></tr></table></figure></li>\n<li>nvm<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm ls-remote <span class=\"comment\">#尋找可安裝版本</span></span><br><span class=\"line\">$ nvm install &lt;version&gt; <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h2><h3 id=\"簡述-2\"><a href=\"#簡述-2\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p>package 管理器，管理專案的 package </p>\n<h3 id=\"安裝-1\"><a href=\"#安裝-1\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"CRA\"><a href=\"#CRA\" class=\"headerlink\" title=\"CRA\"></a>CRA</h1><h2 id=\"簡述-3\"><a href=\"#簡述-3\" class=\"headerlink\" title=\"簡述\"></a>簡述</h2><p>facebook 推出的官方 reactJS Scaffold ， 讓你站在巨人的肩膀上，降低開發技術需求，建立專案後即可開發  </p>\n<h2 id=\"安裝-by-yarn\"><a href=\"#安裝-by-yarn\" class=\"headerlink\" title=\"安裝 by yarn\"></a>安裝 by yarn</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yarn 版本需高過 0.25</span></span><br><span class=\"line\">$ yarn create react-app &lt;app name&gt; <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn start <span class=\"comment\"># 開啟 dev server</span></span><br><span class=\"line\">$ yarn run build <span class=\"comment\"># 打包正式版</span></span><br><span class=\"line\">$ yarn run <span class=\"built_in\">test</span> <span class=\"comment\"># 啟動測試</span></span><br><span class=\"line\">$ yarn run eject <span class=\"comment\"># 解開 cra 封裝，</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./assets/runDevServer.png\" alt=\"alt run dev server\"></p>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>可以設定環境變數，可針對不同環境做不同的設定</li>\n<li>可額外擴充環境變數</li>\n<li>測試、打包免設定</li>\n<li>內建 dev server，支援 hot reload，遇到衝突可換 port</li>\n<li>最基礎的 robot.txt &amp; manifest.json</li>\n<li>簡單指令，輕鬆執行打包(build)、本地開發(localhost)</li>\n<li>額外客製化 template</li>\n<li>附加 <code>browserlist</code></li>\n<li>支援 <ul>\n<li>Exponentiation Operator - 指數運算子(**)</li>\n<li>async/await 語法</li>\n<li>rest/spreed Operator - 解構運算 (…)</li>\n<li>dynamic import</li>\n<li>Class 宣告 ＆ static 屬性</li>\n<li>JSX 語法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>需要經過 webpack 編譯的檔案(ex: .js .css …etc)，請放在 <code>src</code>資料夾內</li>\n<li>程式進入點為 <code>src/index.js</code>，不可<strong>更改名稱</strong>或<strong>刪除此檔案</strong></li>\n<li>打包後的檔案統一放在 <code>build</code> 資料夾</li>\n<li><code>public\b/index.html</code>為打包後的網頁板模  </li>\n<li>不需要任何處理的檔案，但需要放進 <code>build</code> 資料夾，可放在 <code>public</code> 資料夾 </li>\n<li>eject 後就無法在封裝了，請謹慎使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需要工具\"><a href=\"#需要工具\" class=\"headerlink\" title=\"需要工具\"></a>需要工具</h1><h2 id=\"NVM\"><a href=\"#NVM\" class=\"headerlink\" title=\"NVM\"></a>NVM</h2><h3 id=\"簡述\"><a href=\"#簡述\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p> nodejs 版本管理器</p>\n<h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nvm</span><br></pre></td></tr></table></figure>\n<h3 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"source <span class=\"variable\">$(brew --prefix nvm)</span>/nvm.sh\"</span> &gt;&gt; .bash_profile <span class=\"comment\"># 把 nvm.sh 路徑放入到 .bash_profile</span></span><br><span class=\"line\">$ . ~/.bash_profile <span class=\"comment\">#更新設定</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h2><h3 id=\"簡述-1\"><a href=\"#簡述-1\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p>在本地端可以執行 javascript 的一個開發環境</p>\n<h3 id=\"安裝-擇一\"><a href=\"#安裝-擇一\" class=\"headerlink\" title=\"安裝(擇一)\"></a>安裝(擇一)</h3><ol>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">官網</a>下載安裝</li>\n<li>Homebrew<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew search node <span class=\"comment\">#尋找可安裝版本</span></span><br><span class=\"line\">$ brew install node@&lt;version&gt; <span class=\"comment\">#安裝</span></span><br></pre></td></tr></table></figure></li>\n<li>nvm<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm ls-remote <span class=\"comment\">#尋找可安裝版本</span></span><br><span class=\"line\">$ nvm install &lt;version&gt; <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h2><h3 id=\"簡述-2\"><a href=\"#簡述-2\" class=\"headerlink\" title=\"簡述\"></a>簡述</h3><p>package 管理器，管理專案的 package </p>\n<h3 id=\"安裝-1\"><a href=\"#安裝-1\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"CRA\"><a href=\"#CRA\" class=\"headerlink\" title=\"CRA\"></a>CRA</h1><h2 id=\"簡述-3\"><a href=\"#簡述-3\" class=\"headerlink\" title=\"簡述\"></a>簡述</h2><p>facebook 推出的官方 reactJS Scaffold ， 讓你站在巨人的肩膀上，降低開發技術需求，建立專案後即可開發  </p>\n<h2 id=\"安裝-by-yarn\"><a href=\"#安裝-by-yarn\" class=\"headerlink\" title=\"安裝 by yarn\"></a>安裝 by yarn</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yarn 版本需高過 0.25</span></span><br><span class=\"line\">$ yarn create react-app &lt;app name&gt; <span class=\"comment\"># 安裝</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn start <span class=\"comment\"># 開啟 dev server</span></span><br><span class=\"line\">$ yarn run build <span class=\"comment\"># 打包正式版</span></span><br><span class=\"line\">$ yarn run <span class=\"built_in\">test</span> <span class=\"comment\"># 啟動測試</span></span><br><span class=\"line\">$ yarn run eject <span class=\"comment\"># 解開 cra 封裝，</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./assets/runDevServer.png\" alt=\"alt run dev server\"></p>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>可以設定環境變數，可針對不同環境做不同的設定</li>\n<li>可額外擴充環境變數</li>\n<li>測試、打包免設定</li>\n<li>內建 dev server，支援 hot reload，遇到衝突可換 port</li>\n<li>最基礎的 robot.txt &amp; manifest.json</li>\n<li>簡單指令，輕鬆執行打包(build)、本地開發(localhost)</li>\n<li>額外客製化 template</li>\n<li>附加 <code>browserlist</code></li>\n<li>支援 <ul>\n<li>Exponentiation Operator - 指數運算子(**)</li>\n<li>async/await 語法</li>\n<li>rest/spreed Operator - 解構運算 (…)</li>\n<li>dynamic import</li>\n<li>Class 宣告 ＆ static 屬性</li>\n<li>JSX 語法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>需要經過 webpack 編譯的檔案(ex: .js .css …etc)，請放在 <code>src</code>資料夾內</li>\n<li>程式進入點為 <code>src/index.js</code>，不可<strong>更改名稱</strong>或<strong>刪除此檔案</strong></li>\n<li>打包後的檔案統一放在 <code>build</code> 資料夾</li>\n<li><code>public\b/index.html</code>為打包後的網頁板模  </li>\n<li>不需要任何處理的檔案，但需要放進 <code>build</code> 資料夾，可放在 <code>public</code> 資料夾 </li>\n<li>eject 後就無法在封裝了，請謹慎使用</li>\n</ul>\n"},{"title":"react-router note","date":"2020-06-14T19:19:09.000Z","_content":"\n# What\n\n- 控制 Url 使其只會在 **本地端(Local)** 作用\n- 以 **Url 路徑** 來管理 Components 的組成\n\n# How\n\n## Install\n\n> npm install react-router-dom\n\n## Basic\n\n```js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/topics\">\n          <Topics />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n```\n\n### Router\n\n- 路由器，控制 Url 的導向位置\n- 並監視其變化，判斷會符合那個 **Route**\n- 所有的路由行為皆在路由器裡實現\n- 沒有加裝 **Switch** ：\n    - 舊 Component 會先 **Unmount** \n    - 新 Component 再 **Mount**\n- 有加裝 **Switch** ：\n    - 同樣類型、並有相同的 **key** or 尚未設定 **key**  ，會被判定為相同的 Component ， 進行 Update\n    - 非上述狀況，一律參照`未加裝 Switch `\n- 分為：\n  - BrowserRouter\n    - 預設以 **Domain Url/** 為 root\n  - HashRouter\n    - 預設以 **Domain Url/{hashType}/** 為 root\n\n#### BrowserRouter\n\n- basename : string\n  - 設定 **root Url**\n  - 預設為 **Domain Url/**\n- getUserConfirmation : func\n  - 自定切換 Url 時的 Confirm\n  - 需要帶有 `<Prompt/>`，才會執行\n  ```js\n  // msg = 確認訊息\n  // cb = 是否跳轉畫面，true： 跳轉 ，false:取消\n  const confrimChange = (msg, cb) => {\n    const allowChange = window.confirm(msg);\n    cb(allowChange);\n  };\n  ```\n- forceRefresh : bool\n  - 在切換 Url 時，會 Refresh 網頁，代表會向 Server 再要一次資料\n  - 預設為 false\n- keyLength: number\n  - 設定 object location.key 長度\n  - 預設長度為 6\n- children : node\n  - 要實現的路由規則\n\n#### HashRouter\n\n- basename : string\n  - 設定 **root Url**\n  - 預設為 **Domain Url/{hashType}/**\n- getUserConfirmation : func\n  - 自定切換 Url 時的 Confirm\n  - 需要帶有 `<Prompt/>`，才會執行\n  ```js\n  // msg = 確認訊息\n  // cb = 是否跳轉畫面，true： 跳轉 ，false:取消\n  const confrimChange = (msg, cb) => {\n    const allowChange = window.confirm(msg);\n    cb(allowChange);\n  };\n  ```\n- hashType : string\n  - 設定 `window.location.hash` 的表示方法\n  - 型態：\n    - slash\n      > Domain Url/#/{action}\n    - noslash\n      > Domain Url/#{action}\n    - hashbang(ajax crawlable)\n      > Domain Url/#!/{action}\n- children : node\n  - 要實現的路由規則\n\n### Route\n\n- 路由，設定好路徑(path)，當 Url 符合到 Route，觸發設定好的動作\n- 如在同一個 **Route match** ，當 **path** 為 array:\n    - 以 **key** 值去判斷是否為同一個 Component\n    - 不是同一個會把舊 Component Unmount\n    - 再 mounting 新的 Component\n- 如有多個 Route，讀取規則:\n  - 由上至下\n  - 把有符合到的 Route 給 render 出來\n  - 未符合到的 Route return null\n- 假如在樹狀同一個節點、不同的 Route 裡，指定相同的 Component：\n  - 設定 `key`， 會被當成不同的 Component ，即有兩個一樣的 Component\n  - 未設定 `key`，會被當成相同的 Component ，每一次切換只是在 Update Component\n- render method:\n  - 當以 **func** 設定時，會把以下三種物件包成 props object：\n    - location\n    - history\n    - match\n  - component : func | class\n    - 當 Url 有 match 到才會觸發\n    - 以 **React.createElement** 建立新的 `React Element`\n  - render : func\n    - 當 Url 有 match 到才會觸發\n  - children : func | component\n    - 不管 Url 是否 match 皆會觸發\n      - 不符合， props.match == null\n      - 符合， props.match != null\n    - 有裝 `<Switch>` 只會 match 時顯示\n    - 以 Component 形式呼叫，只會 match 時顯示\n    ```jsx\n        <Route\n            exact\n            path=\"/children\"\n            children={(props) => {\n                return (\n                <SampleClass\n                    key=\"children\"\n                    cb={cb}\n                    {...props}\n                />\n                );\n            }}\n            />\n        <Route\n        path=\"/component\"\n        component={(props) => {\n            return <SampleClass cb={cb} {...props}/>;\n        }}\n        />\n\n        <Route\n        path=\"/render\"\n        render={(props) => {\n            return (\n            <SampleClass key=\"redner\" cb={cb} {...props} />\n            );\n        }}\n        />\n    ```\n\n- path : **string | string []**\n    - 設定匹配的路徑\n    - 以[path-to-regexp@^1.7.0](https://github.com/pillarjs/path-to-regexp/tree/v1.7.0)為準\n    - 設定帶參數：\n        - 格式：\n            - /action/{:param id}(?)\n        - 會在 match.param.{param id} 取得\n        - **?** 是代表參數是可選擇要不要加入\n        - 沒有 **?** ，代表如要 match 必須要輸入完整參數\n- exact : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path ：`完全 match` 才會觸發 render\n    - 設為 **false** 指定的 Route path ： `部分 match` 就會觸發 render\n    - 精準部分不包含尾端 `/` 、 path 的大小寫\n- strict : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path ：會判斷到尾端是否有加`/`\n    - 設為 **false** 指定的 Route path ：單純判別到路徑名\n- sensitive : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path  ： 會去判斷大小寫\n    - 設為 **false** 指定的 Route path  ： 不會去判斷大小寫\n\n```js\n// /about [x]match\n// /about/tony [o]match ,id=tony\n<Route path=\"/about/:id\">\n    <About  />\n</Route>\n\n// /about [o]match\n// /about/tony [o]match ,id=tony\n<Route path=\"/about/:id?\">\n    <About  />\n</Route>\n\n// /about [o]match\n// /about/ [o]match \n// /about/tony [x]match \n<Route exact path=\"/about/\">\n    <About  />\n</Route>\n\n// /about [x]match\n// /about/ [o]match \n// /about/tony [o]match \n<Route  strict path=\"/about/\">\n    <About  />\n</Route>\n\n\n// /about [o]match\n// /About/ [x]match \n// /ABOUT [x]match \n<Route  sensitive path=\"/about/\">\n    <About  />\n</Route>\n```\n   \n\n\n### Redirect\n- 觸發後，移至指定Url，渲染該Route 的 Component\n- 預設以覆蓋當前記錄 `history stack`，**非新增**\n- 參數\n    - to : **string** | **object**\n        - string : 轉址路徑\n        - object : 轉址詳細設定\n            - pathname :  **string** \n                - 轉址路徑\n            - search : **string**\n                - 會在 Url 帶入額外的 query string\n                - Component 的 **this.props.loaction.search**找到傳入參數\n            - hash : **string**\n                - 會在 Url 帶入 hash 參數\n                - 可以在 Component 的 **this.props.loaction.hash**找到傳入參數\n            - state : **object**\n                - 轉址後欲帶入的物件參數\n                - 可在 Component 的 **this.props.loaction.state**找到傳入參數\n    - push : **bool**\n        - 預設 **false**\n        - 設為 **true** 轉址以**新增 history stack**方式進入記錄\n        - 設為 **false** 轉址以**覆蓋 history stack**方式進入記錄\n    - from : **string**\n        - 指定會觸發轉址的 Url\n        - 未設定，則每次檢視到都會觸發\n        - 在有加裝 <Switch>時：\n            - 在 **from** 設定額外參數會被帶入 **to**\n            - **to** 的 pathname 沒有設定對應參數的話，則會被忽略\n    - exact : **bool**\n    - strict : **bool**\n    - sensitive : **bool**\n        - 功效同 [Route](#Route)\n```js\n    // /render3/12 change to /about/12\n   <Switch>\n        <Redirect from=\"/render3/:id\" to={{pathname:\"/about/:id\" }} />\n    </Switch>\n    // /render or /render2 change to /about?utm=your+face\n    //  /about's component this.props.location.state.param1 = \"hello\"\n    <Route\n        path={[\"/render\", \"/render2\"]}\n        render={(props) => {\n\n        return <Redirect to={\n            {\n                pathname:\"about\" , \n                search:\"?utm=your+face\" ,\n                state:{\n                    param1:\"hello\"\n                }\n            }\n            } />;\n        }}\n    />\n```\n\n### Link\n- 建立 Url 導向連結\n- to : **string | object**\n    - 設定要導向的Url \n    - string : 導向路徑，\n        - 可在 Url 的後面帶入 Query Stirng`(?)` or hash param `(#)`\n    - object : 導向詳細設定\n        - pathname :  **string** \n            - 導向路徑\n            - 不可帶入其他參數設定，帶入不會有效果\n        - search : **string**\n            - 會在 Url 帶入額外的 query string\n            - Component 的 **this.props.loaction.search**找到傳入參數\n        - hash : **string**\n            - 會在 Url 帶入 hash 參數\n            - 可以在 Component 的 **this.props.loaction.hash**找到傳入參數\n        - state : **object**\n            - 轉址後欲帶入的物件參數\n            - 可在 Component 的 **this.props.loaction.state**找到傳入參數\n- replace : **bool**\n    - 預設 **false**\n    - 設為 **true** 導向以**新增 history stack**方式進入記錄\n    - 設為 **false** 導向以**覆蓋 history stack**方式進入記錄\n\n### Switch\n- **Route** 的集合\n- 只會 render **第一個** match到的 Route\n- location : **object**\n    - 可植入自定的 location \n    - 會在 match 到時，放入指定的 Component 的 this.props\n- children : **node**\n    - 放入Switch 管理的 Route or Redirect\n    - 會繼承從 Switch 那邊的 **location**\n### history\n\n### location\n\n### match\n","source":"react-router-note/index.md","raw":"---\ntitle: react-router note\ndate: 2020-06-15 03:19:09\n---\n\n# What\n\n- 控制 Url 使其只會在 **本地端(Local)** 作用\n- 以 **Url 路徑** 來管理 Components 的組成\n\n# How\n\n## Install\n\n> npm install react-router-dom\n\n## Basic\n\n```js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/topics\">\n          <Topics />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n```\n\n### Router\n\n- 路由器，控制 Url 的導向位置\n- 並監視其變化，判斷會符合那個 **Route**\n- 所有的路由行為皆在路由器裡實現\n- 沒有加裝 **Switch** ：\n    - 舊 Component 會先 **Unmount** \n    - 新 Component 再 **Mount**\n- 有加裝 **Switch** ：\n    - 同樣類型、並有相同的 **key** or 尚未設定 **key**  ，會被判定為相同的 Component ， 進行 Update\n    - 非上述狀況，一律參照`未加裝 Switch `\n- 分為：\n  - BrowserRouter\n    - 預設以 **Domain Url/** 為 root\n  - HashRouter\n    - 預設以 **Domain Url/{hashType}/** 為 root\n\n#### BrowserRouter\n\n- basename : string\n  - 設定 **root Url**\n  - 預設為 **Domain Url/**\n- getUserConfirmation : func\n  - 自定切換 Url 時的 Confirm\n  - 需要帶有 `<Prompt/>`，才會執行\n  ```js\n  // msg = 確認訊息\n  // cb = 是否跳轉畫面，true： 跳轉 ，false:取消\n  const confrimChange = (msg, cb) => {\n    const allowChange = window.confirm(msg);\n    cb(allowChange);\n  };\n  ```\n- forceRefresh : bool\n  - 在切換 Url 時，會 Refresh 網頁，代表會向 Server 再要一次資料\n  - 預設為 false\n- keyLength: number\n  - 設定 object location.key 長度\n  - 預設長度為 6\n- children : node\n  - 要實現的路由規則\n\n#### HashRouter\n\n- basename : string\n  - 設定 **root Url**\n  - 預設為 **Domain Url/{hashType}/**\n- getUserConfirmation : func\n  - 自定切換 Url 時的 Confirm\n  - 需要帶有 `<Prompt/>`，才會執行\n  ```js\n  // msg = 確認訊息\n  // cb = 是否跳轉畫面，true： 跳轉 ，false:取消\n  const confrimChange = (msg, cb) => {\n    const allowChange = window.confirm(msg);\n    cb(allowChange);\n  };\n  ```\n- hashType : string\n  - 設定 `window.location.hash` 的表示方法\n  - 型態：\n    - slash\n      > Domain Url/#/{action}\n    - noslash\n      > Domain Url/#{action}\n    - hashbang(ajax crawlable)\n      > Domain Url/#!/{action}\n- children : node\n  - 要實現的路由規則\n\n### Route\n\n- 路由，設定好路徑(path)，當 Url 符合到 Route，觸發設定好的動作\n- 如在同一個 **Route match** ，當 **path** 為 array:\n    - 以 **key** 值去判斷是否為同一個 Component\n    - 不是同一個會把舊 Component Unmount\n    - 再 mounting 新的 Component\n- 如有多個 Route，讀取規則:\n  - 由上至下\n  - 把有符合到的 Route 給 render 出來\n  - 未符合到的 Route return null\n- 假如在樹狀同一個節點、不同的 Route 裡，指定相同的 Component：\n  - 設定 `key`， 會被當成不同的 Component ，即有兩個一樣的 Component\n  - 未設定 `key`，會被當成相同的 Component ，每一次切換只是在 Update Component\n- render method:\n  - 當以 **func** 設定時，會把以下三種物件包成 props object：\n    - location\n    - history\n    - match\n  - component : func | class\n    - 當 Url 有 match 到才會觸發\n    - 以 **React.createElement** 建立新的 `React Element`\n  - render : func\n    - 當 Url 有 match 到才會觸發\n  - children : func | component\n    - 不管 Url 是否 match 皆會觸發\n      - 不符合， props.match == null\n      - 符合， props.match != null\n    - 有裝 `<Switch>` 只會 match 時顯示\n    - 以 Component 形式呼叫，只會 match 時顯示\n    ```jsx\n        <Route\n            exact\n            path=\"/children\"\n            children={(props) => {\n                return (\n                <SampleClass\n                    key=\"children\"\n                    cb={cb}\n                    {...props}\n                />\n                );\n            }}\n            />\n        <Route\n        path=\"/component\"\n        component={(props) => {\n            return <SampleClass cb={cb} {...props}/>;\n        }}\n        />\n\n        <Route\n        path=\"/render\"\n        render={(props) => {\n            return (\n            <SampleClass key=\"redner\" cb={cb} {...props} />\n            );\n        }}\n        />\n    ```\n\n- path : **string | string []**\n    - 設定匹配的路徑\n    - 以[path-to-regexp@^1.7.0](https://github.com/pillarjs/path-to-regexp/tree/v1.7.0)為準\n    - 設定帶參數：\n        - 格式：\n            - /action/{:param id}(?)\n        - 會在 match.param.{param id} 取得\n        - **?** 是代表參數是可選擇要不要加入\n        - 沒有 **?** ，代表如要 match 必須要輸入完整參數\n- exact : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path ：`完全 match` 才會觸發 render\n    - 設為 **false** 指定的 Route path ： `部分 match` 就會觸發 render\n    - 精準部分不包含尾端 `/` 、 path 的大小寫\n- strict : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path ：會判斷到尾端是否有加`/`\n    - 設為 **false** 指定的 Route path ：單純判別到路徑名\n- sensitive : **bool**\n    - 預設為 false\n    - 設為 **true** 指定的 Route path  ： 會去判斷大小寫\n    - 設為 **false** 指定的 Route path  ： 不會去判斷大小寫\n\n```js\n// /about [x]match\n// /about/tony [o]match ,id=tony\n<Route path=\"/about/:id\">\n    <About  />\n</Route>\n\n// /about [o]match\n// /about/tony [o]match ,id=tony\n<Route path=\"/about/:id?\">\n    <About  />\n</Route>\n\n// /about [o]match\n// /about/ [o]match \n// /about/tony [x]match \n<Route exact path=\"/about/\">\n    <About  />\n</Route>\n\n// /about [x]match\n// /about/ [o]match \n// /about/tony [o]match \n<Route  strict path=\"/about/\">\n    <About  />\n</Route>\n\n\n// /about [o]match\n// /About/ [x]match \n// /ABOUT [x]match \n<Route  sensitive path=\"/about/\">\n    <About  />\n</Route>\n```\n   \n\n\n### Redirect\n- 觸發後，移至指定Url，渲染該Route 的 Component\n- 預設以覆蓋當前記錄 `history stack`，**非新增**\n- 參數\n    - to : **string** | **object**\n        - string : 轉址路徑\n        - object : 轉址詳細設定\n            - pathname :  **string** \n                - 轉址路徑\n            - search : **string**\n                - 會在 Url 帶入額外的 query string\n                - Component 的 **this.props.loaction.search**找到傳入參數\n            - hash : **string**\n                - 會在 Url 帶入 hash 參數\n                - 可以在 Component 的 **this.props.loaction.hash**找到傳入參數\n            - state : **object**\n                - 轉址後欲帶入的物件參數\n                - 可在 Component 的 **this.props.loaction.state**找到傳入參數\n    - push : **bool**\n        - 預設 **false**\n        - 設為 **true** 轉址以**新增 history stack**方式進入記錄\n        - 設為 **false** 轉址以**覆蓋 history stack**方式進入記錄\n    - from : **string**\n        - 指定會觸發轉址的 Url\n        - 未設定，則每次檢視到都會觸發\n        - 在有加裝 <Switch>時：\n            - 在 **from** 設定額外參數會被帶入 **to**\n            - **to** 的 pathname 沒有設定對應參數的話，則會被忽略\n    - exact : **bool**\n    - strict : **bool**\n    - sensitive : **bool**\n        - 功效同 [Route](#Route)\n```js\n    // /render3/12 change to /about/12\n   <Switch>\n        <Redirect from=\"/render3/:id\" to={{pathname:\"/about/:id\" }} />\n    </Switch>\n    // /render or /render2 change to /about?utm=your+face\n    //  /about's component this.props.location.state.param1 = \"hello\"\n    <Route\n        path={[\"/render\", \"/render2\"]}\n        render={(props) => {\n\n        return <Redirect to={\n            {\n                pathname:\"about\" , \n                search:\"?utm=your+face\" ,\n                state:{\n                    param1:\"hello\"\n                }\n            }\n            } />;\n        }}\n    />\n```\n\n### Link\n- 建立 Url 導向連結\n- to : **string | object**\n    - 設定要導向的Url \n    - string : 導向路徑，\n        - 可在 Url 的後面帶入 Query Stirng`(?)` or hash param `(#)`\n    - object : 導向詳細設定\n        - pathname :  **string** \n            - 導向路徑\n            - 不可帶入其他參數設定，帶入不會有效果\n        - search : **string**\n            - 會在 Url 帶入額外的 query string\n            - Component 的 **this.props.loaction.search**找到傳入參數\n        - hash : **string**\n            - 會在 Url 帶入 hash 參數\n            - 可以在 Component 的 **this.props.loaction.hash**找到傳入參數\n        - state : **object**\n            - 轉址後欲帶入的物件參數\n            - 可在 Component 的 **this.props.loaction.state**找到傳入參數\n- replace : **bool**\n    - 預設 **false**\n    - 設為 **true** 導向以**新增 history stack**方式進入記錄\n    - 設為 **false** 導向以**覆蓋 history stack**方式進入記錄\n\n### Switch\n- **Route** 的集合\n- 只會 render **第一個** match到的 Route\n- location : **object**\n    - 可植入自定的 location \n    - 會在 match 到時，放入指定的 Component 的 this.props\n- children : **node**\n    - 放入Switch 管理的 Route or Redirect\n    - 會繼承從 Switch 那邊的 **location**\n### history\n\n### location\n\n### match\n","updated":"2021-02-18T12:23:28.413Z","path":"react-router-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdan003e5ojta2hc83qy","content":"<h1 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h1><ul>\n<li>控制 Url 使其只會在 <strong>本地端(Local)</strong> 作用</li>\n<li>以 <strong>Url 路徑</strong> 來管理 Components 的組成</li>\n</ul>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><blockquote>\n<p>npm install react-router-dom</p>\n</blockquote>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><ul>\n<li>路由器，控制 Url 的導向位置</li>\n<li>並監視其變化，判斷會符合那個 <strong>Route</strong></li>\n<li>所有的路由行為皆在路由器裡實現</li>\n<li>沒有加裝 <strong>Switch</strong> ：<ul>\n<li>舊 Component 會先 <strong>Unmount</strong> </li>\n<li>新 Component 再 <strong>Mount</strong></li>\n</ul>\n</li>\n<li>有加裝 <strong>Switch</strong> ：<ul>\n<li>同樣類型、並有相同的 <strong>key</strong> or 尚未設定 <strong>key</strong>  ，會被判定為相同的 Component ， 進行 Update</li>\n<li>非上述狀況，一律參照<code>未加裝 Switch</code></li>\n</ul>\n</li>\n<li>分為：<ul>\n<li>BrowserRouter<ul>\n<li>預設以 <strong>Domain Url/</strong> 為 root</li>\n</ul>\n</li>\n<li>HashRouter<ul>\n<li>預設以 <strong>Domain Url/{hashType}/</strong> 為 root</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BrowserRouter\"><a href=\"#BrowserRouter\" class=\"headerlink\" title=\"BrowserRouter\"></a>BrowserRouter</h4><ul>\n<li>basename : string<ul>\n<li>設定 <strong>root Url</strong></li>\n<li>預設為 <strong>Domain Url/</strong></li>\n</ul>\n</li>\n<li>getUserConfirmation : func<ul>\n<li>自定切換 Url 時的 Confirm</li>\n<li>需要帶有 <code>&lt;Prompt/&gt;</code>，才會執行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg = 確認訊息</span></span><br><span class=\"line\"><span class=\"comment\">// cb = 是否跳轉畫面，true： 跳轉 ，false:取消</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> confrimChange = <span class=\"function\">(<span class=\"params\">msg, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allowChange = <span class=\"built_in\">window</span>.confirm(msg);</span><br><span class=\"line\">  cb(allowChange);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>forceRefresh : bool<ul>\n<li>在切換 Url 時，會 Refresh 網頁，代表會向 Server 再要一次資料</li>\n<li>預設為 false</li>\n</ul>\n</li>\n<li>keyLength: number<ul>\n<li>設定 object location.key 長度</li>\n<li>預設長度為 6</li>\n</ul>\n</li>\n<li>children : node<ul>\n<li>要實現的路由規則</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"HashRouter\"><a href=\"#HashRouter\" class=\"headerlink\" title=\"HashRouter\"></a>HashRouter</h4><ul>\n<li>basename : string<ul>\n<li>設定 <strong>root Url</strong></li>\n<li>預設為 <strong>Domain Url/{hashType}/</strong></li>\n</ul>\n</li>\n<li>getUserConfirmation : func<ul>\n<li>自定切換 Url 時的 Confirm</li>\n<li>需要帶有 <code>&lt;Prompt/&gt;</code>，才會執行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg = 確認訊息</span></span><br><span class=\"line\"><span class=\"comment\">// cb = 是否跳轉畫面，true： 跳轉 ，false:取消</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> confrimChange = <span class=\"function\">(<span class=\"params\">msg, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allowChange = <span class=\"built_in\">window</span>.confirm(msg);</span><br><span class=\"line\">  cb(allowChange);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>hashType : string<ul>\n<li>設定 <code>window.location.hash</code> 的表示方法</li>\n<li>型態：<ul>\n<li>slash<blockquote>\n<p>Domain Url/#/{action}</p>\n</blockquote>\n</li>\n<li>noslash<blockquote>\n<p>Domain Url/#{action}</p>\n</blockquote>\n</li>\n<li>hashbang(ajax crawlable)<blockquote>\n<p>Domain Url/#!/{action}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>children : node<ul>\n<li>要實現的路由規則</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Route\"><a href=\"#Route\" class=\"headerlink\" title=\"Route\"></a>Route</h3><ul>\n<li><p>路由，設定好路徑(path)，當 Url 符合到 Route，觸發設定好的動作</p>\n</li>\n<li><p>如在同一個 <strong>Route match</strong> ，當 <strong>path</strong> 為 array:</p>\n<ul>\n<li>以 <strong>key</strong> 值去判斷是否為同一個 Component</li>\n<li>不是同一個會把舊 Component Unmount</li>\n<li>再 mounting 新的 Component</li>\n</ul>\n</li>\n<li><p>如有多個 Route，讀取規則:</p>\n<ul>\n<li>由上至下</li>\n<li>把有符合到的 Route 給 render 出來</li>\n<li>未符合到的 Route return null</li>\n</ul>\n</li>\n<li><p>假如在樹狀同一個節點、不同的 Route 裡，指定相同的 Component：</p>\n<ul>\n<li>設定 <code>key</code>， 會被當成不同的 Component ，即有兩個一樣的 Component</li>\n<li>未設定 <code>key</code>，會被當成相同的 Component ，每一次切換只是在 Update Component</li>\n</ul>\n</li>\n<li><p>render method:</p>\n<ul>\n<li>當以 <strong>func</strong> 設定時，會把以下三種物件包成 props object：<ul>\n<li>location</li>\n<li>history</li>\n<li>match</li>\n</ul>\n</li>\n<li>component : func | class<ul>\n<li>當 Url 有 match 到才會觸發</li>\n<li>以 <strong>React.createElement</strong> 建立新的 <code>React Element</code></li>\n</ul>\n</li>\n<li>render : func<ul>\n<li>當 Url 有 match 到才會觸發</li>\n</ul>\n</li>\n<li>children : func | component<ul>\n<li>不管 Url 是否 match 皆會觸發<ul>\n<li>不符合， props.match == null</li>\n<li>符合， props.match != null</li>\n</ul>\n</li>\n<li>有裝 <code>&lt;Switch&gt;</code> 只會 match 時顯示</li>\n<li>以 Component 形式呼叫，只會 match 時顯示<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route</span><br><span class=\"line\">    exact</span><br><span class=\"line\">    path=<span class=\"string\">\"/children\"</span></span><br><span class=\"line\">    children=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;SampleClass</span><br><span class=\"line\">            key=<span class=\"string\">\"children\"</span></span><br><span class=\"line\">            cb=&#123;cb&#125;</span><br><span class=\"line\">            &#123;...props&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">&lt;Route</span><br><span class=\"line\">path=<span class=\"string\">\"/component\"</span></span><br><span class=\"line\">component=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SampleClass</span> <span class=\"attr\">cb</span>=<span class=\"string\">&#123;cb&#125;</span> &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Route</span><br><span class=\"line\">path=\"/render\"</span><br><span class=\"line\">render=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">    &lt;SampleClass key=\"redner\" cb=&#123;cb&#125; &#123;...props&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>path : <strong>string | string []</strong></p>\n<ul>\n<li>設定匹配的路徑</li>\n<li>以<a href=\"https://github.com/pillarjs/path-to-regexp/tree/v1.7.0\" target=\"_blank\" rel=\"noopener\">path-to-regexp@^1.7.0</a>為準</li>\n<li>設定帶參數：<ul>\n<li>格式：<ul>\n<li>/action/{:param id}(?)</li>\n</ul>\n</li>\n<li>會在 match.param.{param id} 取得</li>\n<li><strong>?</strong> 是代表參數是可選擇要不要加入</li>\n<li>沒有 <strong>?</strong> ，代表如要 match 必須要輸入完整參數</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>exact : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path ：<code>完全 match</code> 才會觸發 render</li>\n<li>設為 <strong>false</strong> 指定的 Route path ： <code>部分 match</code> 就會觸發 render</li>\n<li>精準部分不包含尾端 <code>/</code> 、 path 的大小寫</li>\n</ul>\n</li>\n<li><p>strict : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path ：會判斷到尾端是否有加<code>/</code></li>\n<li>設為 <strong>false</strong> 指定的 Route path ：單純判別到路徑名</li>\n</ul>\n</li>\n<li><p>sensitive : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path  ： 會去判斷大小寫</li>\n<li>設為 <strong>false</strong> 指定的 Route path  ： 不會去判斷大小寫</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /about [x]match</span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match ,id=tony</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/about/:id\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match ,id=tony</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/about/:id?\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /about/ [o]match </span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [x]match </span></span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [x]match</span><br><span class=\"line\"><span class=\"comment\">// /about/ [o]match </span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match </span></span><br><span class=\"line\">&lt;Route  strict path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /About/ [x]match </span></span><br><span class=\"line\"><span class=\"comment\">// /ABOUT [x]match </span></span><br><span class=\"line\">&lt;Route  sensitive path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Redirect\"><a href=\"#Redirect\" class=\"headerlink\" title=\"Redirect\"></a>Redirect</h3><ul>\n<li>觸發後，移至指定Url，渲染該Route 的 Component</li>\n<li>預設以覆蓋當前記錄 <code>history stack</code>，<strong>非新增</strong></li>\n<li>參數<ul>\n<li>to : <strong>string</strong> | <strong>object</strong><ul>\n<li>string : 轉址路徑</li>\n<li>object : 轉址詳細設定<ul>\n<li>pathname :  <strong>string</strong> <ul>\n<li>轉址路徑</li>\n</ul>\n</li>\n<li>search : <strong>string</strong><ul>\n<li>會在 Url 帶入額外的 query string</li>\n<li>Component 的 <strong>this.props.loaction.search</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>hash : <strong>string</strong><ul>\n<li>會在 Url 帶入 hash 參數</li>\n<li>可以在 Component 的 <strong>this.props.loaction.hash</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>state : <strong>object</strong><ul>\n<li>轉址後欲帶入的物件參數</li>\n<li>可在 Component 的 <strong>this.props.loaction.state</strong>找到傳入參數</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>push : <strong>bool</strong><ul>\n<li>預設 <strong>false</strong></li>\n<li>設為 <strong>true</strong> 轉址以<strong>新增 history stack</strong>方式進入記錄</li>\n<li>設為 <strong>false</strong> 轉址以<strong>覆蓋 history stack</strong>方式進入記錄</li>\n</ul>\n</li>\n<li>from : <strong>string</strong><ul>\n<li>指定會觸發轉址的 Url</li>\n<li>未設定，則每次檢視到都會觸發</li>\n<li>在有加裝 <Switch>時：<ul>\n<li>在 <strong>from</strong> 設定額外參數會被帶入 <strong>to</strong></li>\n<li><strong>to</strong> 的 pathname 沒有設定對應參數的話，則會被忽略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>exact : <strong>bool</strong></li>\n<li>strict : <strong>bool</strong></li>\n<li>sensitive : <strong>bool</strong><ul>\n<li>功效同 <a href=\"#Route\">Route</a><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// /render3/12 change to /about/12</span></span><br><span class=\"line\">&lt;Switch&gt;</span><br><span class=\"line\">     &lt;Redirect <span class=\"keyword\">from</span>=<span class=\"string\">\"/render3/:id\"</span> to=&#123;&#123;<span class=\"attr\">pathname</span>:<span class=\"string\">\"/about/:id\"</span> &#125;&#125; /&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> /</span><span class=\"regexp\">/ /</span>render or /render2 change to /about?utm=your+face</span><br><span class=\"line\"> <span class=\"comment\">//  /about's component this.props.location.state.param1 = \"hello\"</span></span><br><span class=\"line\"> &lt;Route</span><br><span class=\"line\">     path=&#123;[<span class=\"string\">\"/render\"</span>, <span class=\"string\">\"/render2\"</span>]&#125;</span><br><span class=\"line\">     render=&#123;(props) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">         &#123;</span></span><br><span class=\"line\"><span class=\"xml\">             pathname:\"about\" , </span></span><br><span class=\"line\"><span class=\"xml\">             search:\"?utm=your+face\" ,</span></span><br><span class=\"line\"><span class=\"xml\">             state:&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                 param1:\"hello\"</span></span><br><span class=\"line\"><span class=\"xml\">             &#125;</span></span><br><span class=\"line\"><span class=\"xml\">         &#125;</span></span><br><span class=\"line\"><span class=\"xml\">         &#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"xml\">     &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\"> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h3><ul>\n<li>建立 Url 導向連結</li>\n<li>to : <strong>string | object</strong><ul>\n<li>設定要導向的Url </li>\n<li>string : 導向路徑，<ul>\n<li>可在 Url 的後面帶入 Query Stirng<code>(?)</code> or hash param <code>(#)</code></li>\n</ul>\n</li>\n<li>object : 導向詳細設定<ul>\n<li>pathname :  <strong>string</strong> <ul>\n<li>導向路徑</li>\n<li>不可帶入其他參數設定，帶入不會有效果</li>\n</ul>\n</li>\n<li>search : <strong>string</strong><ul>\n<li>會在 Url 帶入額外的 query string</li>\n<li>Component 的 <strong>this.props.loaction.search</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>hash : <strong>string</strong><ul>\n<li>會在 Url 帶入 hash 參數</li>\n<li>可以在 Component 的 <strong>this.props.loaction.hash</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>state : <strong>object</strong><ul>\n<li>轉址後欲帶入的物件參數</li>\n<li>可在 Component 的 <strong>this.props.loaction.state</strong>找到傳入參數</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>replace : <strong>bool</strong><ul>\n<li>預設 <strong>false</strong></li>\n<li>設為 <strong>true</strong> 導向以<strong>新增 history stack</strong>方式進入記錄</li>\n<li>設為 <strong>false</strong> 導向以<strong>覆蓋 history stack</strong>方式進入記錄</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><ul>\n<li><strong>Route</strong> 的集合</li>\n<li>只會 render <strong>第一個</strong> match到的 Route</li>\n<li>location : <strong>object</strong><ul>\n<li>可植入自定的 location </li>\n<li>會在 match 到時，放入指定的 Component 的 this.props</li>\n</ul>\n</li>\n<li>children : <strong>node</strong><ul>\n<li>放入Switch 管理的 Route or Redirect</li>\n<li>會繼承從 Switch 那邊的 <strong>location</strong><h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h1><ul>\n<li>控制 Url 使其只會在 <strong>本地端(Local)</strong> 作用</li>\n<li>以 <strong>Url 路徑</strong> 來管理 Components 的組成</li>\n</ul>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><blockquote>\n<p>npm install react-router-dom</p>\n</blockquote>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/about\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;Link to=<span class=\"string\">\"/topics\"</span>&gt;Topics&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route path=\"/</span>about<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;About /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/topics<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Topics /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;Home /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><ul>\n<li>路由器，控制 Url 的導向位置</li>\n<li>並監視其變化，判斷會符合那個 <strong>Route</strong></li>\n<li>所有的路由行為皆在路由器裡實現</li>\n<li>沒有加裝 <strong>Switch</strong> ：<ul>\n<li>舊 Component 會先 <strong>Unmount</strong> </li>\n<li>新 Component 再 <strong>Mount</strong></li>\n</ul>\n</li>\n<li>有加裝 <strong>Switch</strong> ：<ul>\n<li>同樣類型、並有相同的 <strong>key</strong> or 尚未設定 <strong>key</strong>  ，會被判定為相同的 Component ， 進行 Update</li>\n<li>非上述狀況，一律參照<code>未加裝 Switch</code></li>\n</ul>\n</li>\n<li>分為：<ul>\n<li>BrowserRouter<ul>\n<li>預設以 <strong>Domain Url/</strong> 為 root</li>\n</ul>\n</li>\n<li>HashRouter<ul>\n<li>預設以 <strong>Domain Url/{hashType}/</strong> 為 root</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BrowserRouter\"><a href=\"#BrowserRouter\" class=\"headerlink\" title=\"BrowserRouter\"></a>BrowserRouter</h4><ul>\n<li>basename : string<ul>\n<li>設定 <strong>root Url</strong></li>\n<li>預設為 <strong>Domain Url/</strong></li>\n</ul>\n</li>\n<li>getUserConfirmation : func<ul>\n<li>自定切換 Url 時的 Confirm</li>\n<li>需要帶有 <code>&lt;Prompt/&gt;</code>，才會執行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg = 確認訊息</span></span><br><span class=\"line\"><span class=\"comment\">// cb = 是否跳轉畫面，true： 跳轉 ，false:取消</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> confrimChange = <span class=\"function\">(<span class=\"params\">msg, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allowChange = <span class=\"built_in\">window</span>.confirm(msg);</span><br><span class=\"line\">  cb(allowChange);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>forceRefresh : bool<ul>\n<li>在切換 Url 時，會 Refresh 網頁，代表會向 Server 再要一次資料</li>\n<li>預設為 false</li>\n</ul>\n</li>\n<li>keyLength: number<ul>\n<li>設定 object location.key 長度</li>\n<li>預設長度為 6</li>\n</ul>\n</li>\n<li>children : node<ul>\n<li>要實現的路由規則</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"HashRouter\"><a href=\"#HashRouter\" class=\"headerlink\" title=\"HashRouter\"></a>HashRouter</h4><ul>\n<li>basename : string<ul>\n<li>設定 <strong>root Url</strong></li>\n<li>預設為 <strong>Domain Url/{hashType}/</strong></li>\n</ul>\n</li>\n<li>getUserConfirmation : func<ul>\n<li>自定切換 Url 時的 Confirm</li>\n<li>需要帶有 <code>&lt;Prompt/&gt;</code>，才會執行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// msg = 確認訊息</span></span><br><span class=\"line\"><span class=\"comment\">// cb = 是否跳轉畫面，true： 跳轉 ，false:取消</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> confrimChange = <span class=\"function\">(<span class=\"params\">msg, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allowChange = <span class=\"built_in\">window</span>.confirm(msg);</span><br><span class=\"line\">  cb(allowChange);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>hashType : string<ul>\n<li>設定 <code>window.location.hash</code> 的表示方法</li>\n<li>型態：<ul>\n<li>slash<blockquote>\n<p>Domain Url/#/{action}</p>\n</blockquote>\n</li>\n<li>noslash<blockquote>\n<p>Domain Url/#{action}</p>\n</blockquote>\n</li>\n<li>hashbang(ajax crawlable)<blockquote>\n<p>Domain Url/#!/{action}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>children : node<ul>\n<li>要實現的路由規則</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Route\"><a href=\"#Route\" class=\"headerlink\" title=\"Route\"></a>Route</h3><ul>\n<li><p>路由，設定好路徑(path)，當 Url 符合到 Route，觸發設定好的動作</p>\n</li>\n<li><p>如在同一個 <strong>Route match</strong> ，當 <strong>path</strong> 為 array:</p>\n<ul>\n<li>以 <strong>key</strong> 值去判斷是否為同一個 Component</li>\n<li>不是同一個會把舊 Component Unmount</li>\n<li>再 mounting 新的 Component</li>\n</ul>\n</li>\n<li><p>如有多個 Route，讀取規則:</p>\n<ul>\n<li>由上至下</li>\n<li>把有符合到的 Route 給 render 出來</li>\n<li>未符合到的 Route return null</li>\n</ul>\n</li>\n<li><p>假如在樹狀同一個節點、不同的 Route 裡，指定相同的 Component：</p>\n<ul>\n<li>設定 <code>key</code>， 會被當成不同的 Component ，即有兩個一樣的 Component</li>\n<li>未設定 <code>key</code>，會被當成相同的 Component ，每一次切換只是在 Update Component</li>\n</ul>\n</li>\n<li><p>render method:</p>\n<ul>\n<li>當以 <strong>func</strong> 設定時，會把以下三種物件包成 props object：<ul>\n<li>location</li>\n<li>history</li>\n<li>match</li>\n</ul>\n</li>\n<li>component : func | class<ul>\n<li>當 Url 有 match 到才會觸發</li>\n<li>以 <strong>React.createElement</strong> 建立新的 <code>React Element</code></li>\n</ul>\n</li>\n<li>render : func<ul>\n<li>當 Url 有 match 到才會觸發</li>\n</ul>\n</li>\n<li>children : func | component<ul>\n<li>不管 Url 是否 match 皆會觸發<ul>\n<li>不符合， props.match == null</li>\n<li>符合， props.match != null</li>\n</ul>\n</li>\n<li>有裝 <code>&lt;Switch&gt;</code> 只會 match 時顯示</li>\n<li>以 Component 形式呼叫，只會 match 時顯示<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route</span><br><span class=\"line\">    exact</span><br><span class=\"line\">    path=<span class=\"string\">\"/children\"</span></span><br><span class=\"line\">    children=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;SampleClass</span><br><span class=\"line\">            key=<span class=\"string\">\"children\"</span></span><br><span class=\"line\">            cb=&#123;cb&#125;</span><br><span class=\"line\">            &#123;...props&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">&lt;Route</span><br><span class=\"line\">path=<span class=\"string\">\"/component\"</span></span><br><span class=\"line\">component=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SampleClass</span> <span class=\"attr\">cb</span>=<span class=\"string\">&#123;cb&#125;</span> &#123;<span class=\"attr\">...props</span>&#125;/&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Route</span><br><span class=\"line\">path=\"/render\"</span><br><span class=\"line\">render=&#123;(props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">    &lt;SampleClass key=\"redner\" cb=&#123;cb&#125; &#123;...props&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>path : <strong>string | string []</strong></p>\n<ul>\n<li>設定匹配的路徑</li>\n<li>以<a href=\"https://github.com/pillarjs/path-to-regexp/tree/v1.7.0\" target=\"_blank\" rel=\"noopener\">path-to-regexp@^1.7.0</a>為準</li>\n<li>設定帶參數：<ul>\n<li>格式：<ul>\n<li>/action/{:param id}(?)</li>\n</ul>\n</li>\n<li>會在 match.param.{param id} 取得</li>\n<li><strong>?</strong> 是代表參數是可選擇要不要加入</li>\n<li>沒有 <strong>?</strong> ，代表如要 match 必須要輸入完整參數</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>exact : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path ：<code>完全 match</code> 才會觸發 render</li>\n<li>設為 <strong>false</strong> 指定的 Route path ： <code>部分 match</code> 就會觸發 render</li>\n<li>精準部分不包含尾端 <code>/</code> 、 path 的大小寫</li>\n</ul>\n</li>\n<li><p>strict : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path ：會判斷到尾端是否有加<code>/</code></li>\n<li>設為 <strong>false</strong> 指定的 Route path ：單純判別到路徑名</li>\n</ul>\n</li>\n<li><p>sensitive : <strong>bool</strong></p>\n<ul>\n<li>預設為 false</li>\n<li>設為 <strong>true</strong> 指定的 Route path  ： 會去判斷大小寫</li>\n<li>設為 <strong>false</strong> 指定的 Route path  ： 不會去判斷大小寫</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /about [x]match</span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match ,id=tony</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/about/:id\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match ,id=tony</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">\"/about/:id?\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /about/ [o]match </span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [x]match </span></span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [x]match</span><br><span class=\"line\"><span class=\"comment\">// /about/ [o]match </span></span><br><span class=\"line\"><span class=\"comment\">// /about/tony [o]match </span></span><br><span class=\"line\">&lt;Route  strict path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ /</span>about [o]match</span><br><span class=\"line\"><span class=\"comment\">// /About/ [x]match </span></span><br><span class=\"line\"><span class=\"comment\">// /ABOUT [x]match </span></span><br><span class=\"line\">&lt;Route  sensitive path=<span class=\"string\">\"/about/\"</span>&gt;</span><br><span class=\"line\">    &lt;About  /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Route&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Redirect\"><a href=\"#Redirect\" class=\"headerlink\" title=\"Redirect\"></a>Redirect</h3><ul>\n<li>觸發後，移至指定Url，渲染該Route 的 Component</li>\n<li>預設以覆蓋當前記錄 <code>history stack</code>，<strong>非新增</strong></li>\n<li>參數<ul>\n<li>to : <strong>string</strong> | <strong>object</strong><ul>\n<li>string : 轉址路徑</li>\n<li>object : 轉址詳細設定<ul>\n<li>pathname :  <strong>string</strong> <ul>\n<li>轉址路徑</li>\n</ul>\n</li>\n<li>search : <strong>string</strong><ul>\n<li>會在 Url 帶入額外的 query string</li>\n<li>Component 的 <strong>this.props.loaction.search</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>hash : <strong>string</strong><ul>\n<li>會在 Url 帶入 hash 參數</li>\n<li>可以在 Component 的 <strong>this.props.loaction.hash</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>state : <strong>object</strong><ul>\n<li>轉址後欲帶入的物件參數</li>\n<li>可在 Component 的 <strong>this.props.loaction.state</strong>找到傳入參數</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>push : <strong>bool</strong><ul>\n<li>預設 <strong>false</strong></li>\n<li>設為 <strong>true</strong> 轉址以<strong>新增 history stack</strong>方式進入記錄</li>\n<li>設為 <strong>false</strong> 轉址以<strong>覆蓋 history stack</strong>方式進入記錄</li>\n</ul>\n</li>\n<li>from : <strong>string</strong><ul>\n<li>指定會觸發轉址的 Url</li>\n<li>未設定，則每次檢視到都會觸發</li>\n<li>在有加裝 <Switch>時：<ul>\n<li>在 <strong>from</strong> 設定額外參數會被帶入 <strong>to</strong></li>\n<li><strong>to</strong> 的 pathname 沒有設定對應參數的話，則會被忽略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>exact : <strong>bool</strong></li>\n<li>strict : <strong>bool</strong></li>\n<li>sensitive : <strong>bool</strong><ul>\n<li>功效同 <a href=\"#Route\">Route</a><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// /render3/12 change to /about/12</span></span><br><span class=\"line\">&lt;Switch&gt;</span><br><span class=\"line\">     &lt;Redirect <span class=\"keyword\">from</span>=<span class=\"string\">\"/render3/:id\"</span> to=&#123;&#123;<span class=\"attr\">pathname</span>:<span class=\"string\">\"/about/:id\"</span> &#125;&#125; /&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> /</span><span class=\"regexp\">/ /</span>render or /render2 change to /about?utm=your+face</span><br><span class=\"line\"> <span class=\"comment\">//  /about's component this.props.location.state.param1 = \"hello\"</span></span><br><span class=\"line\"> &lt;Route</span><br><span class=\"line\">     path=&#123;[<span class=\"string\">\"/render\"</span>, <span class=\"string\">\"/render2\"</span>]&#125;</span><br><span class=\"line\">     render=&#123;(props) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">         &#123;</span></span><br><span class=\"line\"><span class=\"xml\">             pathname:\"about\" , </span></span><br><span class=\"line\"><span class=\"xml\">             search:\"?utm=your+face\" ,</span></span><br><span class=\"line\"><span class=\"xml\">             state:&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                 param1:\"hello\"</span></span><br><span class=\"line\"><span class=\"xml\">             &#125;</span></span><br><span class=\"line\"><span class=\"xml\">         &#125;</span></span><br><span class=\"line\"><span class=\"xml\">         &#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"xml\">     &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\"> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h3><ul>\n<li>建立 Url 導向連結</li>\n<li>to : <strong>string | object</strong><ul>\n<li>設定要導向的Url </li>\n<li>string : 導向路徑，<ul>\n<li>可在 Url 的後面帶入 Query Stirng<code>(?)</code> or hash param <code>(#)</code></li>\n</ul>\n</li>\n<li>object : 導向詳細設定<ul>\n<li>pathname :  <strong>string</strong> <ul>\n<li>導向路徑</li>\n<li>不可帶入其他參數設定，帶入不會有效果</li>\n</ul>\n</li>\n<li>search : <strong>string</strong><ul>\n<li>會在 Url 帶入額外的 query string</li>\n<li>Component 的 <strong>this.props.loaction.search</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>hash : <strong>string</strong><ul>\n<li>會在 Url 帶入 hash 參數</li>\n<li>可以在 Component 的 <strong>this.props.loaction.hash</strong>找到傳入參數</li>\n</ul>\n</li>\n<li>state : <strong>object</strong><ul>\n<li>轉址後欲帶入的物件參數</li>\n<li>可在 Component 的 <strong>this.props.loaction.state</strong>找到傳入參數</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>replace : <strong>bool</strong><ul>\n<li>預設 <strong>false</strong></li>\n<li>設為 <strong>true</strong> 導向以<strong>新增 history stack</strong>方式進入記錄</li>\n<li>設為 <strong>false</strong> 導向以<strong>覆蓋 history stack</strong>方式進入記錄</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><ul>\n<li><strong>Route</strong> 的集合</li>\n<li>只會 render <strong>第一個</strong> match到的 Route</li>\n<li>location : <strong>object</strong><ul>\n<li>可植入自定的 location </li>\n<li>會在 match 到時，放入指定的 Component 的 this.props</li>\n</ul>\n</li>\n<li>children : <strong>node</strong><ul>\n<li>放入Switch 管理的 Route or Redirect</li>\n<li>會繼承從 Switch 那邊的 <strong>location</strong><h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3>"},{"title":"rsjx-note","date":"2020-09-29T16:15:06.000Z","_content":"\n# What\n\n## Reactive Programming\n- 以`Declarative Programming` 為基礎\n- 針對某事件(event) or 資料串流(data streams)的變化去響應\n\n### Declarative Programming\n\n## Functional Programming\n\n## FRP\n\n# Why\n\n# How\n","source":"rsjx-note/index.md","raw":"---\ntitle: rsjx-note\ndate: 2020-09-30 00:15:06\n---\n\n# What\n\n## Reactive Programming\n- 以`Declarative Programming` 為基礎\n- 針對某事件(event) or 資料串流(data streams)的變化去響應\n\n### Declarative Programming\n\n## Functional Programming\n\n## FRP\n\n# Why\n\n# How\n","updated":"2020-10-05T02:44:32.321Z","path":"rsjx-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdao003f5ojthjbtduui","content":"<h1 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h1><h2 id=\"Reactive-Programming\"><a href=\"#Reactive-Programming\" class=\"headerlink\" title=\"Reactive Programming\"></a>Reactive Programming</h2><ul>\n<li>以<code>Declarative Programming</code> 為基礎</li>\n<li>針對某事件(event) or 資料串流(data streams)的變化去響應</li>\n</ul>\n<h3 id=\"Declarative-Programming\"><a href=\"#Declarative-Programming\" class=\"headerlink\" title=\"Declarative Programming\"></a>Declarative Programming</h3><h2 id=\"Functional-Programming\"><a href=\"#Functional-Programming\" class=\"headerlink\" title=\"Functional Programming\"></a>Functional Programming</h2><h2 id=\"FRP\"><a href=\"#FRP\" class=\"headerlink\" title=\"FRP\"></a>FRP</h2><h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h1><h2 id=\"Reactive-Programming\"><a href=\"#Reactive-Programming\" class=\"headerlink\" title=\"Reactive Programming\"></a>Reactive Programming</h2><ul>\n<li>以<code>Declarative Programming</code> 為基礎</li>\n<li>針對某事件(event) or 資料串流(data streams)的變化去響應</li>\n</ul>\n<h3 id=\"Declarative-Programming\"><a href=\"#Declarative-Programming\" class=\"headerlink\" title=\"Declarative Programming\"></a>Declarative Programming</h3><h2 id=\"Functional-Programming\"><a href=\"#Functional-Programming\" class=\"headerlink\" title=\"Functional Programming\"></a>Functional Programming</h2><h2 id=\"FRP\"><a href=\"#FRP\" class=\"headerlink\" title=\"FRP\"></a>FRP</h2><h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1>"},{"title":"react_setting","date":"2020-03-25T14:48:37.000Z","_content":"\n## React 設定\n### 下載套件\n* dev 環境\n\t* @babel/core\n\t\t* babel 核心 \bapi\n\t* @babel/preset-env\n\t\t* 轉譯 es2015\n\t* @babel/preset-react\n\t\t* 轉譯 jsx\n\t* babel-loader\n\t\t* babel 轉譯工具\n\t* @babel/plugin-proposal-class-properties\n\t* babel-plugin-transform-class-properties\n\t\t* 可以在 class 內宣告 Arrow function\n\t\t* 在 `.babelrc`要加上屬性\n\t* style-loader \n\t* css-loader\n\n* react\n* react-dom \n\n### webpack 設定\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後資源儲存的位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest:/\\.css$/,//判斷是否為\".css\"\n\t\t\t\tloader:[\"css-loader\",\"style-loader\"],//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n```\n### .babelrc 設定\n* 語法轉譯器\n* 對 jsx 進行轉譯\n* 參數 \n    * presets \n        * 預設轉譯器\n    *  env \n        * 針對環境設置\n```json\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            // 設定需要翻譯 es2015 的瀏覽器最低版本\n            \"edge\": 17,\n            \"firefox\": 60,\n            \"chrome\": 67,\n            \"safari\": 11.1\n          },\n          // 設定針對 es6 有用到的套件在導入\n          \"useBuiltIns\": \"usage\"\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n\n","source":"react-setting/index.md","raw":"---\ntitle: react_setting\ndate: 2020-03-25 22:48:37\n---\n\n## React 設定\n### 下載套件\n* dev 環境\n\t* @babel/core\n\t\t* babel 核心 \bapi\n\t* @babel/preset-env\n\t\t* 轉譯 es2015\n\t* @babel/preset-react\n\t\t* 轉譯 jsx\n\t* babel-loader\n\t\t* babel 轉譯工具\n\t* @babel/plugin-proposal-class-properties\n\t* babel-plugin-transform-class-properties\n\t\t* 可以在 class 內宣告 Arrow function\n\t\t* 在 `.babelrc`要加上屬性\n\t* style-loader \n\t* css-loader\n\n* react\n* react-dom \n\n### webpack 設定\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後資源儲存的位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest:/\\.css$/,//判斷是否為\".css\"\n\t\t\t\tloader:[\"css-loader\",\"style-loader\"],//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n```\n### .babelrc 設定\n* 語法轉譯器\n* 對 jsx 進行轉譯\n* 參數 \n    * presets \n        * 預設轉譯器\n    *  env \n        * 針對環境設置\n```json\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            // 設定需要翻譯 es2015 的瀏覽器最低版本\n            \"edge\": 17,\n            \"firefox\": 60,\n            \"chrome\": 67,\n            \"safari\": 11.1\n          },\n          // 設定針對 es6 有用到的套件在導入\n          \"useBuiltIns\": \"usage\"\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n\n","updated":"2020-04-08T07:55:44.909Z","path":"react-setting/index.html","comments":1,"layout":"page","_id":"ckuy1kdao003g5ojtf17whjvi","content":"<h2 id=\"React-設定\"><a href=\"#React-設定\" class=\"headerlink\" title=\"React 設定\"></a>React 設定</h2><h3 id=\"下載套件\"><a href=\"#下載套件\" class=\"headerlink\" title=\"下載套件\"></a>下載套件</h3><ul>\n<li><p>dev 環境</p>\n<ul>\n<li>@babel/core<ul>\n<li>babel 核心 \bapi</li>\n</ul>\n</li>\n<li>@babel/preset-env<ul>\n<li>轉譯 es2015</li>\n</ul>\n</li>\n<li>@babel/preset-react<ul>\n<li>轉譯 jsx</li>\n</ul>\n</li>\n<li>babel-loader<ul>\n<li>babel 轉譯工具</li>\n</ul>\n</li>\n<li>@babel/plugin-proposal-class-properties</li>\n<li>babel-plugin-transform-class-properties<ul>\n<li>可以在 class 內宣告 Arrow function</li>\n<li>在 <code>.babelrc</code>要加上屬性</li>\n</ul>\n</li>\n<li>style-loader </li>\n<li>css-loader</li>\n</ul>\n</li>\n<li><p>react</p>\n</li>\n<li><p>react-dom </p>\n</li>\n</ul>\n<h3 id=\"webpack-設定\"><a href=\"#webpack-設定\" class=\"headerlink\" title=\"webpack 設定\"></a>webpack 設定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry:[<span class=\"comment\">//執行點</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"./main.jsx\"</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput:&#123;<span class=\"comment\">//編譯輸出點</span></span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span></span><br><span class=\"line\">\t\tfilename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後資源儲存的位置</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve:&#123;<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span></span><br><span class=\"line\">\t\tmodules:[</span><br><span class=\"line\">\t\t\tpath.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span></span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\textensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span></span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span></span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">//判斷是否為\".css\"</span></span><br><span class=\"line\">\t\t\t\tloader:[<span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"style-loader\"</span>],<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">\t\t\tReact:<span class=\"string\">'react'</span>,</span><br><span class=\"line\">\t\t\tRectDOM:<span class=\"string\">'react-dom'</span></span><br><span class=\"line\">        &#125;),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc-設定\"><a href=\"#babelrc-設定\" class=\"headerlink\" title=\".babelrc 設定\"></a>.babelrc 設定</h3><ul>\n<li>語法轉譯器</li>\n<li>對 jsx 進行轉譯</li>\n<li>參數 <ul>\n<li>presets <ul>\n<li>預設轉譯器</li>\n</ul>\n</li>\n<li>env <ul>\n<li>針對環境設置<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"targets\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 設定需要翻譯 es2015 的瀏覽器最低版本</span></span><br><span class=\"line\">            <span class=\"attr\">\"edge\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"firefox\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"chrome\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"safari\"</span>: <span class=\"number\">11.1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 設定針對 es6 有用到的套件在導入</span></span><br><span class=\"line\">          <span class=\"attr\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React-設定\"><a href=\"#React-設定\" class=\"headerlink\" title=\"React 設定\"></a>React 設定</h2><h3 id=\"下載套件\"><a href=\"#下載套件\" class=\"headerlink\" title=\"下載套件\"></a>下載套件</h3><ul>\n<li><p>dev 環境</p>\n<ul>\n<li>@babel/core<ul>\n<li>babel 核心 \bapi</li>\n</ul>\n</li>\n<li>@babel/preset-env<ul>\n<li>轉譯 es2015</li>\n</ul>\n</li>\n<li>@babel/preset-react<ul>\n<li>轉譯 jsx</li>\n</ul>\n</li>\n<li>babel-loader<ul>\n<li>babel 轉譯工具</li>\n</ul>\n</li>\n<li>@babel/plugin-proposal-class-properties</li>\n<li>babel-plugin-transform-class-properties<ul>\n<li>可以在 class 內宣告 Arrow function</li>\n<li>在 <code>.babelrc</code>要加上屬性</li>\n</ul>\n</li>\n<li>style-loader </li>\n<li>css-loader</li>\n</ul>\n</li>\n<li><p>react</p>\n</li>\n<li><p>react-dom </p>\n</li>\n</ul>\n<h3 id=\"webpack-設定\"><a href=\"#webpack-設定\" class=\"headerlink\" title=\"webpack 設定\"></a>webpack 設定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry:[<span class=\"comment\">//執行點</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"./main.jsx\"</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput:&#123;<span class=\"comment\">//編譯輸出點</span></span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span></span><br><span class=\"line\">\t\tfilename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後資源儲存的位置</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve:&#123;<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span></span><br><span class=\"line\">\t\tmodules:[</span><br><span class=\"line\">\t\t\tpath.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span></span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\textensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span></span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span></span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">//判斷是否為\".css\"</span></span><br><span class=\"line\">\t\t\t\tloader:[<span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"style-loader\"</span>],<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">\t\t\tReact:<span class=\"string\">'react'</span>,</span><br><span class=\"line\">\t\t\tRectDOM:<span class=\"string\">'react-dom'</span></span><br><span class=\"line\">        &#125;),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc-設定\"><a href=\"#babelrc-設定\" class=\"headerlink\" title=\".babelrc 設定\"></a>.babelrc 設定</h3><ul>\n<li>語法轉譯器</li>\n<li>對 jsx 進行轉譯</li>\n<li>參數 <ul>\n<li>presets <ul>\n<li>預設轉譯器</li>\n</ul>\n</li>\n<li>env <ul>\n<li>針對環境設置<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"targets\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 設定需要翻譯 es2015 的瀏覽器最低版本</span></span><br><span class=\"line\">            <span class=\"attr\">\"edge\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"firefox\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"chrome\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"safari\"</span>: <span class=\"number\">11.1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 設定針對 es6 有用到的套件在導入</span></span><br><span class=\"line\">          <span class=\"attr\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"標籤","date":"2020-01-24T14:09:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2020-01-24 22:09:19\ntype: \"tags\"\n---\n","updated":"2021-02-21T17:22:43.759Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckuy1kdap003h5ojt4vbx1xwc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"unix-cmd-note","date":"2020-10-05T11:08:38.000Z","_content":"\n### rm &#60; -arguments > filename | dirname\n- 刪除指定路徑資料夾 or 檔案\n- arguments:\n    - r (recursive): 遞迴處理，處理指定目錄以下\n    - f(force):強制執行\n","source":"unix-cmd-note/index.md","raw":"---\ntitle: unix-cmd-note\ndate: 2020-10-05 19:08:38\n---\n\n### rm &#60; -arguments > filename | dirname\n- 刪除指定路徑資料夾 or 檔案\n- arguments:\n    - r (recursive): 遞迴處理，處理指定目錄以下\n    - f(force):強制執行\n","updated":"2020-10-05T11:19:50.863Z","path":"unix-cmd-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdap003i5ojt8js0349c","content":"<h3 id=\"rm-60-arguments-gt-filename-dirname\"><a href=\"#rm-60-arguments-gt-filename-dirname\" class=\"headerlink\" title=\"rm &#60; -arguments &gt; filename | dirname\"></a>rm &#60; -arguments &gt; filename | dirname</h3><ul>\n<li>刪除指定路徑資料夾 or 檔案</li>\n<li>arguments:<ul>\n<li>r (recursive): 遞迴處理，處理指定目錄以下</li>\n<li>f(force):強制執行</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"rm-60-arguments-gt-filename-dirname\"><a href=\"#rm-60-arguments-gt-filename-dirname\" class=\"headerlink\" title=\"rm &#60; -arguments &gt; filename | dirname\"></a>rm &#60; -arguments &gt; filename | dirname</h3><ul>\n<li>刪除指定路徑資料夾 or 檔案</li>\n<li>arguments:<ul>\n<li>r (recursive): 遞迴處理，處理指定目錄以下</li>\n<li>f(force):強制執行</li>\n</ul>\n</li>\n</ul>\n"},{"title":"webpackNote","date":"2020-03-25T15:59:32.000Z","_content":"\n## Webpack \n\n#### 為什麼要用 Webpack\n> 首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣\n\n>那...其他語言 like sass 、 markdown 、 jsx ....etc 瀏覽器要怎麼看呢?\n答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻\n\n>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的\n\t\n#### Webpack 的打包\n>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂\n通常會有進入點 **entry.js** ，\n\n>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案\n\n#### 初始化\n1. Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 \n    * npm init\n2. 下載 Webpack 套件\n    * npm install webpack webpack-cli --save\n3. 設定運行指定在 **package.json 的 scripts tag** \n    * \"[command name]\": \"webpack  --mode [mode name]\"\n        * command name\n            * 設定想用甚麼指令呼叫 webpack\n            * 執行時呼叫 npm run [command name]\n            * test、start 只需要前面加上 npm\n        * mode name\n            * development\n                * 開發模式，編譯出來的檔案會有清楚的斷點提供debug\n            * production\n                * 正式模式，編譯出來的檔案不會有斷點\n    ```json\n    \"scripts\": { \n            \"webpack\": \"webpack  --mode development \"\n     },\n    ```\n4. 新增 **webpack.config.js**\n    * 此專案 webpack 的設定檔\n    * 在裡面宣告 config物件，export 成模組\n    ```js\n    var path = require('path'); //取得路徑\n    var webpack = require('webpack');\n\n    module.exports={\n        entry:[//執行點\n            \"./main.jsx\"\n        ],\n        output:{//編譯輸出點\n            path:path.join(__dirname,\"dist\"),//輸出路徑\n            filename:\"compiled.js\",//編譯後的檔名\n            publicPath:\"/\"//編譯後url位置\n        },\n        resolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n            modules:[\n                path.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n            ],\n            extensions:['.js','jsx','css','scss']//尋找指定副檔名\n        },\n        module:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n            rules:[\n                {\n                    test:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n                    loader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n                    exclude:/node_modules/\n                }\n            ]\n        },\n        devtool:'cheap-module-eval-source-map',\n        plugins:[\n            new webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n            new webpack.ProvidePlugin({\n                React:'react',\n                RectDOM:'react-dom'\n            }),//建置時，碰到輸入的 key 直接 import，指定 value\n            new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n        ]\n    };\n    ``` \n\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 & 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                > ex: '.js','.jsx','.css','.scss'\n* \tmodule\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        > babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        > 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        > .babelrc  參數設錯\n* Error: Cannot find module '@babel/core'\n    * 原因:\n        > 缺少指定套件\n    * 解決方式:\n        > 安裝上面找不到的套件\n        \n* Module not found: Error: Can't resolve 'react-dom'\n    * 原因:\n        > 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        > 在 webpack.config.js 裡要宣告 var webpack = require('webpack');\n\n                                \n\n","source":"webpack-note/index.md","raw":"---\ntitle: webpackNote\ndate: 2020-03-25 23:59:32\n---\n\n## Webpack \n\n#### 為什麼要用 Webpack\n> 首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣\n\n>那...其他語言 like sass 、 markdown 、 jsx ....etc 瀏覽器要怎麼看呢?\n答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻\n\n>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的\n\t\n#### Webpack 的打包\n>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂\n通常會有進入點 **entry.js** ，\n\n>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案\n\n#### 初始化\n1. Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 \n    * npm init\n2. 下載 Webpack 套件\n    * npm install webpack webpack-cli --save\n3. 設定運行指定在 **package.json 的 scripts tag** \n    * \"[command name]\": \"webpack  --mode [mode name]\"\n        * command name\n            * 設定想用甚麼指令呼叫 webpack\n            * 執行時呼叫 npm run [command name]\n            * test、start 只需要前面加上 npm\n        * mode name\n            * development\n                * 開發模式，編譯出來的檔案會有清楚的斷點提供debug\n            * production\n                * 正式模式，編譯出來的檔案不會有斷點\n    ```json\n    \"scripts\": { \n            \"webpack\": \"webpack  --mode development \"\n     },\n    ```\n4. 新增 **webpack.config.js**\n    * 此專案 webpack 的設定檔\n    * 在裡面宣告 config物件，export 成模組\n    ```js\n    var path = require('path'); //取得路徑\n    var webpack = require('webpack');\n\n    module.exports={\n        entry:[//執行點\n            \"./main.jsx\"\n        ],\n        output:{//編譯輸出點\n            path:path.join(__dirname,\"dist\"),//輸出路徑\n            filename:\"compiled.js\",//編譯後的檔名\n            publicPath:\"/\"//編譯後url位置\n        },\n        resolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n            modules:[\n                path.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n            ],\n            extensions:['.js','jsx','css','scss']//尋找指定副檔名\n        },\n        module:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n            rules:[\n                {\n                    test:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n                    loader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n                    exclude:/node_modules/\n                }\n            ]\n        },\n        devtool:'cheap-module-eval-source-map',\n        plugins:[\n            new webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n            new webpack.ProvidePlugin({\n                React:'react',\n                RectDOM:'react-dom'\n            }),//建置時，碰到輸入的 key 直接 import，指定 value\n            new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n        ]\n    };\n    ``` \n\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 & 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                > ex: '.js','.jsx','.css','.scss'\n* \tmodule\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        > babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        > 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        > .babelrc  參數設錯\n* Error: Cannot find module '@babel/core'\n    * 原因:\n        > 缺少指定套件\n    * 解決方式:\n        > 安裝上面找不到的套件\n        \n* Module not found: Error: Can't resolve 'react-dom'\n    * 原因:\n        > 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        > 在 webpack.config.js 裡要宣告 var webpack = require('webpack');\n\n                                \n\n","updated":"2020-04-30T19:32:04.743Z","path":"webpack-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdaq003j5ojt4cjsdebe","content":"<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><h4 id=\"為什麼要用-Webpack\"><a href=\"#為什麼要用-Webpack\" class=\"headerlink\" title=\"為什麼要用 Webpack\"></a>為什麼要用 Webpack</h4><blockquote>\n<p>首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣</p>\n</blockquote>\n<blockquote>\n<p>那…其他語言 like sass 、 markdown 、 jsx ….etc 瀏覽器要怎麼看呢?<br>答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻</p>\n</blockquote>\n<blockquote>\n<p>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的</p>\n</blockquote>\n<h4 id=\"Webpack-的打包\"><a href=\"#Webpack-的打包\" class=\"headerlink\" title=\"Webpack 的打包\"></a>Webpack 的打包</h4><blockquote>\n<p>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂<br>通常會有進入點 <strong>entry.js</strong> ，</p>\n</blockquote>\n<blockquote>\n<p>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li><p>Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 </p>\n<ul>\n<li>npm init</li>\n</ul>\n</li>\n<li><p>下載 Webpack 套件</p>\n<ul>\n<li>npm install webpack webpack-cli –save</li>\n</ul>\n</li>\n<li><p>設定運行指定在 <strong>package.json 的 scripts tag</strong> </p>\n<ul>\n<li>“[command name]”: “webpack  –mode [mode name]”<ul>\n<li>command name<ul>\n<li>設定想用甚麼指令呼叫 webpack</li>\n<li>執行時呼叫 npm run [command name]</li>\n<li>test、start 只需要前面加上 npm</li>\n</ul>\n</li>\n<li>mode name<ul>\n<li>development<ul>\n<li>開發模式，編譯出來的檔案會有清楚的斷點提供debug</li>\n</ul>\n</li>\n<li>production<ul>\n<li>正式模式，編譯出來的檔案不會有斷點<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123; </span><br><span class=\"line\">        \"webpack\": \"webpack  --mode development \"</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新增 <strong>webpack.config.js</strong></p>\n<ul>\n<li><p>此專案 webpack 的設定檔</p>\n</li>\n<li><p>在裡面宣告 config物件，export 成模組</p>\n<pre><code class=\"js\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span>\n<span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\n\n<span class=\"built_in\">module</span>.exports={\n  entry:[<span class=\"comment\">//執行點</span>\n      <span class=\"string\">\"./main.jsx\"</span>\n  ],\n  output:{<span class=\"comment\">//編譯輸出點</span>\n      path:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span>\n      filename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span>\n      publicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後url位置</span>\n  },\n  resolve:{<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span>\n      modules:[\n          path.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span>\n      ],\n      extensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span>\n  },\n  <span class=\"built_in\">module</span>:{<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span>\n      rules:[\n          {\n              test:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span>\n              loader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span>\n              exclude:<span class=\"regexp\">/node_modules/</span>\n          }\n      ]\n  },\n  devtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,\n  plugins:[\n      <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span>\n      <span class=\"keyword\">new</span> webpack.ProvidePlugin({\n          React:<span class=\"string\">'react'</span>,\n          RectDOM:<span class=\"string\">'react-dom'</span>\n      }),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span>\n      <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span>\n  ]\n};</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"參數\"><a href=\"#參數\" class=\"headerlink\" title=\"參數\"></a>參數</h4><ul>\n<li>entry - <code>str array</code><ul>\n<li>進入點，去設定 webpack 解析地進入路徑</li>\n</ul>\n</li>\n<li>output - <code>obj</code><ul>\n<li>編譯輸出點</li>\n<li>參數<ul>\n<li>path<ul>\n<li>輸出路徑</li>\n</ul>\n</li>\n<li>filename<ul>\n<li>編譯後的檔名</li>\n</ul>\n</li>\n<li>publicPath<ul>\n<li>編譯後url的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resolve - <code>obj</code><ul>\n<li>當 import | require 時，會去指定目錄尋找 &amp; 解析</li>\n<li>參數<ul>\n<li>modules - <code>str array</code><ul>\n<li>尋找指定模組位置資料夾</li>\n</ul>\n</li>\n<li>extensions<ul>\n<li>尋找指定副檔名<blockquote>\n<p>ex: ‘.js’,’.jsx’,’.css’,’.scss’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>module<ul>\n<li>針對不同的語言載入不同的模組 <code>ex:babel、TypeScript</code>，讓其可編譯後輸出成為直譯器所讀的檔案 </li>\n<li>參數 - <code>obj</code><ul>\n<li>rules - obj array<ul>\n<li>指定規則群</li>\n<li>參數<ul>\n<li>test<ul>\n<li>檢查條件，條件符合執行 loader</li>\n</ul>\n</li>\n<li>loader<ul>\n<li>編譯器，把符合條件的檔案，編譯成指定樣式</li>\n</ul>\n</li>\n<li>exclude<ul>\n<li>排除目標資料夾</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>devtool - <code>str</code><ul>\n<li>debug 的工具</li>\n<li>有七種模式</li>\n</ul>\n</li>\n<li>plugins -  <code>obj array</code><ul>\n<li>插件</li>\n<li>HtmlWebpackPlugin<ul>\n<li><code>npm install html-webpack-plugin --save-dev</code></li>\n<li>根據 webpack.config 設定，導出html文件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><ul>\n<li><p>Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js</p>\n<ul>\n<li>原因:<blockquote>\n<p>babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤</p>\n</blockquote>\n</li>\n<li>解決方式:<blockquote>\n<p>更換正確目標版本</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>ReferenceError: Unknown option: .preset. Check out <a href=\"https://babeljs.io/docs/en/babel-core/#options\" target=\"_blank\" rel=\"noopener\">https://babeljs.io/docs/en/babel-core/#options</a> for more information about options.</p>\n<ul>\n<li>原因:<blockquote>\n<p>.babelrc  參數設錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Error: Cannot find module ‘@babel/core’</p>\n<ul>\n<li>原因:<blockquote>\n<p>缺少指定套件</p>\n</blockquote>\n</li>\n<li>解決方式:<blockquote>\n<p>安裝上面找不到的套件</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Module not found: Error: Can’t resolve ‘react-dom’</p>\n<ul>\n<li>原因:<blockquote>\n<p>在 webpack.config.js 的 resolve 少了 node_modules資料夾</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>當安裝完  webpack-cli 後出現<br><code>K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined</code></p>\n<ul>\n<li>原因:<blockquote>\n<p>在 webpack.config.js 裡要宣告 var webpack = require(‘webpack’);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><h4 id=\"為什麼要用-Webpack\"><a href=\"#為什麼要用-Webpack\" class=\"headerlink\" title=\"為什麼要用 Webpack\"></a>為什麼要用 Webpack</h4><blockquote>\n<p>首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣</p>\n</blockquote>\n<blockquote>\n<p>那…其他語言 like sass 、 markdown 、 jsx ….etc 瀏覽器要怎麼看呢?<br>答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻</p>\n</blockquote>\n<blockquote>\n<p>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的</p>\n</blockquote>\n<h4 id=\"Webpack-的打包\"><a href=\"#Webpack-的打包\" class=\"headerlink\" title=\"Webpack 的打包\"></a>Webpack 的打包</h4><blockquote>\n<p>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂<br>通常會有進入點 <strong>entry.js</strong> ，</p>\n</blockquote>\n<blockquote>\n<p>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li><p>Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 </p>\n<ul>\n<li>npm init</li>\n</ul>\n</li>\n<li><p>下載 Webpack 套件</p>\n<ul>\n<li>npm install webpack webpack-cli –save</li>\n</ul>\n</li>\n<li><p>設定運行指定在 <strong>package.json 的 scripts tag</strong> </p>\n<ul>\n<li>“[command name]”: “webpack  –mode [mode name]”<ul>\n<li>command name<ul>\n<li>設定想用甚麼指令呼叫 webpack</li>\n<li>執行時呼叫 npm run [command name]</li>\n<li>test、start 只需要前面加上 npm</li>\n</ul>\n</li>\n<li>mode name<ul>\n<li>development<ul>\n<li>開發模式，編譯出來的檔案會有清楚的斷點提供debug</li>\n</ul>\n</li>\n<li>production<ul>\n<li>正式模式，編譯出來的檔案不會有斷點<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123; </span><br><span class=\"line\">        \"webpack\": \"webpack  --mode development \"</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新增 <strong>webpack.config.js</strong></p>\n<ul>\n<li><p>此專案 webpack 的設定檔</p>\n</li>\n<li><p>在裡面宣告 config物件，export 成模組</p>\n<pre><code class=\"js\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span>\n<span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\n\n<span class=\"built_in\">module</span>.exports={\n  entry:[<span class=\"comment\">//執行點</span>\n      <span class=\"string\">\"./main.jsx\"</span>\n  ],\n  output:{<span class=\"comment\">//編譯輸出點</span>\n      path:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span>\n      filename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span>\n      publicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後url位置</span>\n  },\n  resolve:{<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span>\n      modules:[\n          path.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span>\n      ],\n      extensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span>\n  },\n  <span class=\"built_in\">module</span>:{<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span>\n      rules:[\n          {\n              test:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span>\n              loader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span>\n              exclude:<span class=\"regexp\">/node_modules/</span>\n          }\n      ]\n  },\n  devtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,\n  plugins:[\n      <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span>\n      <span class=\"keyword\">new</span> webpack.ProvidePlugin({\n          React:<span class=\"string\">'react'</span>,\n          RectDOM:<span class=\"string\">'react-dom'</span>\n      }),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span>\n      <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span>\n  ]\n};</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"參數\"><a href=\"#參數\" class=\"headerlink\" title=\"參數\"></a>參數</h4><ul>\n<li>entry - <code>str array</code><ul>\n<li>進入點，去設定 webpack 解析地進入路徑</li>\n</ul>\n</li>\n<li>output - <code>obj</code><ul>\n<li>編譯輸出點</li>\n<li>參數<ul>\n<li>path<ul>\n<li>輸出路徑</li>\n</ul>\n</li>\n<li>filename<ul>\n<li>編譯後的檔名</li>\n</ul>\n</li>\n<li>publicPath<ul>\n<li>編譯後url的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resolve - <code>obj</code><ul>\n<li>當 import | require 時，會去指定目錄尋找 &amp; 解析</li>\n<li>參數<ul>\n<li>modules - <code>str array</code><ul>\n<li>尋找指定模組位置資料夾</li>\n</ul>\n</li>\n<li>extensions<ul>\n<li>尋找指定副檔名<blockquote>\n<p>ex: ‘.js’,’.jsx’,’.css’,’.scss’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>module<ul>\n<li>針對不同的語言載入不同的模組 <code>ex:babel、TypeScript</code>，讓其可編譯後輸出成為直譯器所讀的檔案 </li>\n<li>參數 - <code>obj</code><ul>\n<li>rules - obj array<ul>\n<li>指定規則群</li>\n<li>參數<ul>\n<li>test<ul>\n<li>檢查條件，條件符合執行 loader</li>\n</ul>\n</li>\n<li>loader<ul>\n<li>編譯器，把符合條件的檔案，編譯成指定樣式</li>\n</ul>\n</li>\n<li>exclude<ul>\n<li>排除目標資料夾</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>devtool - <code>str</code><ul>\n<li>debug 的工具</li>\n<li>有七種模式</li>\n</ul>\n</li>\n<li>plugins -  <code>obj array</code><ul>\n<li>插件</li>\n<li>HtmlWebpackPlugin<ul>\n<li><code>npm install html-webpack-plugin --save-dev</code></li>\n<li>根據 webpack.config 設定，導出html文件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><ul>\n<li><p>Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js</p>\n<ul>\n<li>原因:<blockquote>\n<p>babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤</p>\n</blockquote>\n</li>\n<li>解決方式:<blockquote>\n<p>更換正確目標版本</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>ReferenceError: Unknown option: .preset. Check out <a href=\"https://babeljs.io/docs/en/babel-core/#options\" target=\"_blank\" rel=\"noopener\">https://babeljs.io/docs/en/babel-core/#options</a> for more information about options.</p>\n<ul>\n<li>原因:<blockquote>\n<p>.babelrc  參數設錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Error: Cannot find module ‘@babel/core’</p>\n<ul>\n<li>原因:<blockquote>\n<p>缺少指定套件</p>\n</blockquote>\n</li>\n<li>解決方式:<blockquote>\n<p>安裝上面找不到的套件</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Module not found: Error: Can’t resolve ‘react-dom’</p>\n<ul>\n<li>原因:<blockquote>\n<p>在 webpack.config.js 的 resolve 少了 node_modules資料夾</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>當安裝完  webpack-cli 後出現<br><code>K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined</code></p>\n<ul>\n<li>原因:<blockquote>\n<p>在 webpack.config.js 裡要宣告 var webpack = require(‘webpack’);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"websocket-note","date":"2020-07-22T08:24:58.000Z","_content":"## What\n\n## Why\n\n## How","source":"websocket-note/index.md","raw":"---\ntitle: websocket-note\ndate: 2020-07-22 16:24:58\n---\n## What\n\n## Why\n\n## How","updated":"2020-08-02T20:05:26.426Z","path":"websocket-note/index.html","comments":1,"layout":"page","_id":"ckuy1kdar003k5ojtf1ic85eu","content":"<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h2><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h2><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2>"},{"title":"react fiber 簡介","date":"2021-10-25T17:02:22.000Z","_content":"\n一般來說，我們在 react 針對畫面開發的動作僅限在 `component` ，\n\n用 `jsx` 描述完 `react element` 後，渲染到實際畫面的動作就由 react 本身來進行，\n\n`react element` 轉譯成 `virtual dom` 後， 在針對舊有的 `virtual dom` 對比(假如有)，最後準備上到`真實畫面`\n\n這過程叫做 `reconciliation`，\n\n而執行 `reconciliation` 的叫做 `reconciler`，\n\n`reconciler` 分兩種：\n\n## stack reconciler\n\n這是使用在 `react 15` 或是更早的版本，\n\n\n## fiber reconciler\n","source":"rect-fiber-intro/index.md","raw":"---\ntitle: react fiber 簡介\ndate: 2021-10-26 01:02:22\n---\n\n一般來說，我們在 react 針對畫面開發的動作僅限在 `component` ，\n\n用 `jsx` 描述完 `react element` 後，渲染到實際畫面的動作就由 react 本身來進行，\n\n`react element` 轉譯成 `virtual dom` 後， 在針對舊有的 `virtual dom` 對比(假如有)，最後準備上到`真實畫面`\n\n這過程叫做 `reconciliation`，\n\n而執行 `reconciliation` 的叫做 `reconciler`，\n\n`reconciler` 分兩種：\n\n## stack reconciler\n\n這是使用在 `react 15` 或是更早的版本，\n\n\n## fiber reconciler\n","updated":"2022-01-02T13:26:16.301Z","path":"rect-fiber-intro/index.html","comments":1,"layout":"page","_id":"clj8ca0xf0001gwh17ghqf2s6","content":"<p>一般來說，我們在 react 針對畫面開發的動作僅限在 <code>component</code> ，</p>\n<p>用 <code>jsx</code> 描述完 <code>react element</code> 後，渲染到實際畫面的動作就由 react 本身來進行，</p>\n<p><code>react element</code> 轉譯成 <code>virtual dom</code> 後， 在針對舊有的 <code>virtual dom</code> 對比(假如有)，最後準備上到<code>真實畫面</code></p>\n<p>這過程叫做 <code>reconciliation</code>，</p>\n<p>而執行 <code>reconciliation</code> 的叫做 <code>reconciler</code>，</p>\n<p><code>reconciler</code> 分兩種：</p>\n<h2 id=\"stack-reconciler\"><a href=\"#stack-reconciler\" class=\"headerlink\" title=\"stack reconciler\"></a>stack reconciler</h2><p>這是使用在 <code>react 15</code> 或是更早的版本，</p>\n<h2 id=\"fiber-reconciler\"><a href=\"#fiber-reconciler\" class=\"headerlink\" title=\"fiber reconciler\"></a>fiber reconciler</h2>","site":{"data":{}},"excerpt":"","more":"<p>一般來說，我們在 react 針對畫面開發的動作僅限在 <code>component</code> ，</p>\n<p>用 <code>jsx</code> 描述完 <code>react element</code> 後，渲染到實際畫面的動作就由 react 本身來進行，</p>\n<p><code>react element</code> 轉譯成 <code>virtual dom</code> 後， 在針對舊有的 <code>virtual dom</code> 對比(假如有)，最後準備上到<code>真實畫面</code></p>\n<p>這過程叫做 <code>reconciliation</code>，</p>\n<p>而執行 <code>reconciliation</code> 的叫做 <code>reconciler</code>，</p>\n<p><code>reconciler</code> 分兩種：</p>\n<h2 id=\"stack-reconciler\"><a href=\"#stack-reconciler\" class=\"headerlink\" title=\"stack reconciler\"></a>stack reconciler</h2><p>這是使用在 <code>react 15</code> 或是更早的版本，</p>\n<h2 id=\"fiber-reconciler\"><a href=\"#fiber-reconciler\" class=\"headerlink\" title=\"fiber reconciler\"></a>fiber reconciler</h2>"}],"Post":[{"title":"css-info","date":"2020-04-30T19:25:51.000Z","_content":"\n[CSS Q-List](/css-qlist)","source":"_posts/css-info.md","raw":"---\ntitle: css-info\ndate: 2020-05-01 03:25:51\ncategories:\n- CSS\ntags:\n- 教學\n- CSS\n- 前端\n---\n\n[CSS Q-List](/css-qlist)","slug":"css-info","published":1,"updated":"2020-04-30T19:28:55.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8400005ojtcmdz5xyl","content":"<p><a href=\"/css-qlist\">CSS Q-List</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/css-qlist\">CSS Q-List</a></p>\n"},{"title":"git 筆記","date":"2020-05-01T16:15:21.000Z","_content":"\n[Git 指令](/git-command-note)\n\n[Git Note](/git-note)\n","source":"_posts/git-info.md","raw":"---\ntitle: git 筆記\ndate: 2020-05-02 00:15:21\ncategories:\n  - git\ntags:\n  - git\n  - note\n---\n\n[Git 指令](/git-command-note)\n\n[Git Note](/git-note)\n","slug":"git-info","published":1,"updated":"2021-10-19T11:42:40.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8c00025ojtgtat5xby","content":"<p><a href=\"/git-command-note\">Git 指令</a></p>\n<p><a href=\"/git-note\">Git Note</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/git-command-note\">Git 指令</a></p>\n<p><a href=\"/git-note\">Git Note</a></p>\n"},{"title":"Hexo 教學","date":"2020-01-24T14:02:37.000Z","_content":"\n# Hexo\n\n[連結](https://robyang203.github.io/HexoTech)\n","source":"_posts/hexo-intro.md","raw":"---\ntitle: Hexo 教學\ndate: 2020-01-24 22:02:37\ncategories:\n  - Hexo\ntags:\n  - Hexo\n  - 教學\n---\n\n# Hexo\n\n[連結](https://robyang203.github.io/HexoTech)\n","slug":"hexo-intro","published":1,"updated":"2021-10-19T11:41:41.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8i00065ojtfamx5ag3","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://robyang203.github.io/HexoTech\">連結</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://robyang203.github.io/HexoTech\">連結</a></p>\n"},{"title":"android 筆記","date":"2020-04-24T09:36:42.000Z","_content":"\n[Activity LifeCycle](/android-lifecycle)\n\n[關於 Layout](android-layout)\n\n[Fcm 設定](/android-fcm-note)\n\n[Q-List](/android-qlist)\n","source":"_posts/android-note.md","raw":"---\ntitle: android 筆記\ndate: 2020-04-24 17:36:42\ncategories:\n  - android\ntags:\n  - android\n  - note\n---\n\n[Activity LifeCycle](/android-lifecycle)\n\n[關於 Layout](android-layout)\n\n[Fcm 設定](/android-fcm-note)\n\n[Q-List](/android-qlist)\n","slug":"android-note","published":1,"updated":"2021-10-19T11:40:40.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8k00085ojtgudrbcz7","content":"<p><a href=\"/android-lifecycle\">Activity LifeCycle</a></p>\n<p><a href=\"android-layout\">關於 Layout</a></p>\n<p><a href=\"/android-fcm-note\">Fcm 設定</a></p>\n<p><a href=\"/android-qlist\">Q-List</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/android-lifecycle\">Activity LifeCycle</a></p>\n<p><a href=\"android-layout\">關於 Layout</a></p>\n<p><a href=\"/android-fcm-note\">Fcm 設定</a></p>\n<p><a href=\"/android-qlist\">Q-List</a></p>\n"},{"title":"JavaScript 學習","date":"2020-03-02T16:04:57.000Z","_content":"\n- [2019-12-10](/js-learning-note-2019-12-10)\n- [2019-12-17](/js-learning-note-2019-12-17)\n- [2019-12-24](/js-learning-note-2019-12-24)\n- [2020-01-02](/js-learning-note-2020-01-02)\n","source":"_posts/js-learning-note.md","raw":"---\ntitle: JavaScript 學習\ndate: 2020-03-03 00:04:57\ncategories:\n  - jsNote\ntags:\n  - 教學\n  - JavaScript\n  - 前端\n---\n\n- [2019-12-10](/js-learning-note-2019-12-10)\n- [2019-12-17](/js-learning-note-2019-12-17)\n- [2019-12-24](/js-learning-note-2019-12-24)\n- [2020-01-02](/js-learning-note-2020-01-02)\n","slug":"js-learning-note","published":1,"updated":"2021-10-19T11:24:24.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8m000a5ojtavtk4idc","content":"<ul>\n<li><a href=\"/js-learning-note-2019-12-10\">2019-12-10</a></li>\n<li><a href=\"/js-learning-note-2019-12-17\">2019-12-17</a></li>\n<li><a href=\"/js-learning-note-2019-12-24\">2019-12-24</a></li>\n<li><a href=\"/js-learning-note-2020-01-02\">2020-01-02</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/js-learning-note-2019-12-10\">2019-12-10</a></li>\n<li><a href=\"/js-learning-note-2019-12-17\">2019-12-17</a></li>\n<li><a href=\"/js-learning-note-2019-12-24\">2019-12-24</a></li>\n<li><a href=\"/js-learning-note-2020-01-02\">2020-01-02</a></li>\n</ul>\n"},{"title":"kotlin 學習筆記","date":"2020-04-26T17:58:03.000Z","_content":"\n[Kotlin 筆記](/kotlin-note)\n","source":"_posts/kotlin-note.md","raw":"---\ntitle: kotlin 學習筆記\ndate: 2020-04-27 01:58:03\ncategories:\n  - kotlin\ntags:\n  - kotlin\n  - note\n---\n\n[Kotlin 筆記](/kotlin-note)\n","slug":"kotlin-note","published":1,"updated":"2021-10-19T11:42:12.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8p000e5ojt3ri3396i","content":"<p><a href=\"/kotlin-note\">Kotlin 筆記</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/kotlin-note\">Kotlin 筆記</a></p>\n"},{"title":"Promise 簡述","date":"2020-06-04T16:43:17.000Z","_content":"\n* 一種機制，可控制回傳值送出的時機\n    * 生命週期 PromiseStatus\n        * pending\n            等待中\n        * fulfilled\n            已完成，成功\n        * rejected\n            已完成，失敗\n* 實作 `new Promise(cb(resolve,reject))`\n    * 回傳參數回兩個 fn ，對應 **fulfilled** 、 **rejected**\n    * resolve - fulfilled\n    * reject - rejected\n* fulfilled 、 rejected 會有特定 fn 來回傳接收的資訊\n    * then(cb(data))\n        在 fulfilled 回傳 Fn 的成功結果，對應 resolve Fn\n    * catch(cb(err))\n        在 rejected 回傳 Fn 的失敗結果，對應 reject Fn\n* 當程式在 Promise 裡完成後，根據狀態傳給對應 Fn， **資料會儲存在 Promise**，等待呼叫","source":"_posts/js-promise-note.md","raw":"---\ntitle: Promise 簡述\ndate: 2020-06-05 00:43:17\ncategories:\n- jsNote\ntags:\n- 教學\n- JavaScript\n- 前端\n- es6\n---\n\n* 一種機制，可控制回傳值送出的時機\n    * 生命週期 PromiseStatus\n        * pending\n            等待中\n        * fulfilled\n            已完成，成功\n        * rejected\n            已完成，失敗\n* 實作 `new Promise(cb(resolve,reject))`\n    * 回傳參數回兩個 fn ，對應 **fulfilled** 、 **rejected**\n    * resolve - fulfilled\n    * reject - rejected\n* fulfilled 、 rejected 會有特定 fn 來回傳接收的資訊\n    * then(cb(data))\n        在 fulfilled 回傳 Fn 的成功結果，對應 resolve Fn\n    * catch(cb(err))\n        在 rejected 回傳 Fn 的失敗結果，對應 reject Fn\n* 當程式在 Promise 裡完成後，根據狀態傳給對應 Fn， **資料會儲存在 Promise**，等待呼叫","slug":"js-promise-note","published":1,"updated":"2020-06-14T19:27:33.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8r000g5ojth0twh6kg","content":"<ul>\n<li>一種機制，可控制回傳值送出的時機<ul>\n<li>生命週期 PromiseStatus<ul>\n<li>pending<br>  等待中</li>\n<li>fulfilled<br>  已完成，成功</li>\n<li>rejected<br>  已完成，失敗</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 <code>new Promise(cb(resolve,reject))</code><ul>\n<li>回傳參數回兩個 fn ，對應 <strong>fulfilled</strong> 、 <strong>rejected</strong></li>\n<li>resolve - fulfilled</li>\n<li>reject - rejected</li>\n</ul>\n</li>\n<li>fulfilled 、 rejected 會有特定 fn 來回傳接收的資訊<ul>\n<li>then(cb(data))<br>  在 fulfilled 回傳 Fn 的成功結果，對應 resolve Fn</li>\n<li>catch(cb(err))<br>  在 rejected 回傳 Fn 的失敗結果，對應 reject Fn</li>\n</ul>\n</li>\n<li>當程式在 Promise 裡完成後，根據狀態傳給對應 Fn， <strong>資料會儲存在 Promise</strong>，等待呼叫</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>一種機制，可控制回傳值送出的時機<ul>\n<li>生命週期 PromiseStatus<ul>\n<li>pending<br>  等待中</li>\n<li>fulfilled<br>  已完成，成功</li>\n<li>rejected<br>  已完成，失敗</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 <code>new Promise(cb(resolve,reject))</code><ul>\n<li>回傳參數回兩個 fn ，對應 <strong>fulfilled</strong> 、 <strong>rejected</strong></li>\n<li>resolve - fulfilled</li>\n<li>reject - rejected</li>\n</ul>\n</li>\n<li>fulfilled 、 rejected 會有特定 fn 來回傳接收的資訊<ul>\n<li>then(cb(data))<br>  在 fulfilled 回傳 Fn 的成功結果，對應 resolve Fn</li>\n<li>catch(cb(err))<br>  在 rejected 回傳 Fn 的失敗結果，對應 reject Fn</li>\n</ul>\n</li>\n<li>當程式在 Promise 裡完成後，根據狀態傳給對應 Fn， <strong>資料會儲存在 Promise</strong>，等待呼叫</li>\n</ul>\n"},{"title":"Java Spring 學習","date":"2020-01-24T14:55:42.000Z","_content":"\n- [Eclipse 設定](/eclipse-setting)\n- [Spring 介紹](/java-spring-intro)\n- [Eclipse Spring Project Setting](/eclipse-spring-project-setting)\n- [Spring Simple Test](/java-spring-sample-project-intro)\n- [JAVA-Spring WebSite for Eclipse for XML](/java-spring-website-using-xml)\n- [JAVA-Spring WebSite for Eclipse for JavaConfig](/java-spring-website-for-javaconfig)\n- [JPA 設定](/java-jpa-setting)\n- [Spring Q-List](/java-spring-q-list)\n","source":"_posts/java-spring-webSite-for-eclipse.md","raw":"---\ntitle: Java Spring 學習\ndate: 2020-01-24 22:55:42\ncategories:\n  - JAVA-Spring\ntags:\n  - JAVA\n  - Spring\n  - 教學\n---\n\n- [Eclipse 設定](/eclipse-setting)\n- [Spring 介紹](/java-spring-intro)\n- [Eclipse Spring Project Setting](/eclipse-spring-project-setting)\n- [Spring Simple Test](/java-spring-sample-project-intro)\n- [JAVA-Spring WebSite for Eclipse for XML](/java-spring-website-using-xml)\n- [JAVA-Spring WebSite for Eclipse for JavaConfig](/java-spring-website-for-javaconfig)\n- [JPA 設定](/java-jpa-setting)\n- [Spring Q-List](/java-spring-q-list)\n","slug":"java-spring-webSite-for-eclipse","published":1,"updated":"2021-10-19T11:42:00.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8u000l5ojt0ztvh1ka","content":"<ul>\n<li><a href=\"/eclipse-setting\">Eclipse 設定</a></li>\n<li><a href=\"/java-spring-intro\">Spring 介紹</a></li>\n<li><a href=\"/eclipse-spring-project-setting\">Eclipse Spring Project Setting</a></li>\n<li><a href=\"/java-spring-sample-project-intro\">Spring Simple Test</a></li>\n<li><a href=\"/java-spring-website-using-xml\">JAVA-Spring WebSite for Eclipse for XML</a></li>\n<li><a href=\"/java-spring-website-for-javaconfig\">JAVA-Spring WebSite for Eclipse for JavaConfig</a></li>\n<li><a href=\"/java-jpa-setting\">JPA 設定</a></li>\n<li><a href=\"/java-spring-q-list\">Spring Q-List</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/eclipse-setting\">Eclipse 設定</a></li>\n<li><a href=\"/java-spring-intro\">Spring 介紹</a></li>\n<li><a href=\"/eclipse-spring-project-setting\">Eclipse Spring Project Setting</a></li>\n<li><a href=\"/java-spring-sample-project-intro\">Spring Simple Test</a></li>\n<li><a href=\"/java-spring-website-using-xml\">JAVA-Spring WebSite for Eclipse for XML</a></li>\n<li><a href=\"/java-spring-website-for-javaconfig\">JAVA-Spring WebSite for Eclipse for JavaConfig</a></li>\n<li><a href=\"/java-jpa-setting\">JPA 設定</a></li>\n<li><a href=\"/java-spring-q-list\">Spring Q-List</a></li>\n</ul>\n"},{"title":"了解 reactJS 開發流程","date":"2021-02-22T01:09:02.000Z","_content":"\n- [建置 `CRA(create react app)` 環境](./react-dev-note-create-environment)\n- 以 CRA 建立 todo list\n    - [建立初始 todo list 畫面 (介紹 component ＆ What is render)](./react-dev-note-create-todolist-by-cra-component-and-render)\n    - [介紹畫面結構 (介紹 ref & state init)](./react-dev-note-create-todolist-by-cra-class-component-structrue)\n    - 讀取 todo list 建立 item (介紹 crate list )\n    - 新增 todo item \n    - 刪除 todo item\n- 使用 `material UI` 來建構 todo list 畫面\n- 以 `todo list` 為例，練習切 Component\n- 使用 redux 取代 state\n- 使用 thunk 來建立非同步","source":"_posts/todo-list-by-cra.md","raw":"---\ntitle: 了解 reactJS 開發流程\ndate: 2021-02-22 09:09:02\ntags: react-js\n---\n\n- [建置 `CRA(create react app)` 環境](./react-dev-note-create-environment)\n- 以 CRA 建立 todo list\n    - [建立初始 todo list 畫面 (介紹 component ＆ What is render)](./react-dev-note-create-todolist-by-cra-component-and-render)\n    - [介紹畫面結構 (介紹 ref & state init)](./react-dev-note-create-todolist-by-cra-class-component-structrue)\n    - 讀取 todo list 建立 item (介紹 crate list )\n    - 新增 todo item \n    - 刪除 todo item\n- 使用 `material UI` 來建構 todo list 畫面\n- 以 `todo list` 為例，練習切 Component\n- 使用 redux 取代 state\n- 使用 thunk 來建立非同步","slug":"todo-list-by-cra","published":1,"updated":"2021-04-14T16:26:43.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8v000n5ojtdj4eg5lk","content":"<ul>\n<li><a href=\"./react-dev-note-create-environment\">建置 <code>CRA(create react app)</code> 環境</a></li>\n<li>以 CRA 建立 todo list<ul>\n<li><a href=\"./react-dev-note-create-todolist-by-cra-component-and-render\">建立初始 todo list 畫面 (介紹 component ＆ What is render)</a></li>\n<li><a href=\"./react-dev-note-create-todolist-by-cra-class-component-structrue\">介紹畫面結構 (介紹 ref &amp; state init)</a></li>\n<li>讀取 todo list 建立 item (介紹 crate list )</li>\n<li>新增 todo item </li>\n<li>刪除 todo item</li>\n</ul>\n</li>\n<li>使用 <code>material UI</code> 來建構 todo list 畫面</li>\n<li>以 <code>todo list</code> 為例，練習切 Component</li>\n<li>使用 redux 取代 state</li>\n<li>使用 thunk 來建立非同步</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"./react-dev-note-create-environment\">建置 <code>CRA(create react app)</code> 環境</a></li>\n<li>以 CRA 建立 todo list<ul>\n<li><a href=\"./react-dev-note-create-todolist-by-cra-component-and-render\">建立初始 todo list 畫面 (介紹 component ＆ What is render)</a></li>\n<li><a href=\"./react-dev-note-create-todolist-by-cra-class-component-structrue\">介紹畫面結構 (介紹 ref &amp; state init)</a></li>\n<li>讀取 todo list 建立 item (介紹 crate list )</li>\n<li>新增 todo item </li>\n<li>刪除 todo item</li>\n</ul>\n</li>\n<li>使用 <code>material UI</code> 來建構 todo list 畫面</li>\n<li>以 <code>todo list</code> 為例，練習切 Component</li>\n<li>使用 redux 取代 state</li>\n<li>使用 thunk 來建立非同步</li>\n</ul>\n"},{"title":"reactJS 學習筆記","date":"2020-02-27T19:55:20.000Z","_content":"\n- [React 介紹](/react-intro)\n- [React 設定](/react-setting)\n- [React-Example ToDoList](/react-todolist)\n- [React-Router Note](/react-router-note)\n","source":"_posts/react-learning.md","raw":"---\ntitle: reactJS 學習筆記\ndate: 2020-02-28 03:55:20\ncategories:\n  - ReactJs\ntags:\n  - ReactJs\n  - 介紹\n  - JavaScript\n  - 前端\n---\n\n- [React 介紹](/react-intro)\n- [React 設定](/react-setting)\n- [React-Example ToDoList](/react-todolist)\n- [React-Router Note](/react-router-note)\n","slug":"react-learning","published":1,"updated":"2021-10-19T11:42:21.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd8z000s5ojt53icd6m5","content":"<ul>\n<li><a href=\"/react-intro\">React 介紹</a></li>\n<li><a href=\"/react-setting\">React 設定</a></li>\n<li><a href=\"/react-todolist\">React-Example ToDoList</a></li>\n<li><a href=\"/react-router-note\">React-Router Note</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/react-intro\">React 介紹</a></li>\n<li><a href=\"/react-setting\">React 設定</a></li>\n<li><a href=\"/react-todolist\">React-Example ToDoList</a></li>\n<li><a href=\"/react-router-note\">React-Router Note</a></li>\n</ul>\n"},{"title":"webpack 學習筆記","date":"2020-04-30T19:26:02.000Z","_content":"\n[關於 webpack](/webpack-note)\n","source":"_posts/webpack-learning.md","raw":"---\ntitle: webpack 學習筆記\ndate: 2020-05-01 03:26:02\ncategories:\n  - webpack\ntags:\n  - webpack\n  - 教學\n  - JavaScript\n  - 前端\n---\n\n[關於 webpack](/webpack-note)\n","slug":"webpack-learning","published":1,"updated":"2021-10-19T11:42:37.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuy1kd90000v5ojt78m86vu8","content":"<p><a href=\"/webpack-note\">關於 webpack</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/webpack-note\">關於 webpack</a></p>\n"},{"title":"rect-fiber-note","date":"2021-10-25T17:01:58.000Z","_content":"","source":"_drafts/rect-fiber-note.md","raw":"---\ntitle: rect-fiber-note\ndate: 2021-10-26 01:01:58\ntags:\n---\n","slug":"rect-fiber-note","published":0,"updated":"2021-10-25T17:01:58.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clj8hgstr0000zsh1ba4w4gjw","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ckuy1kd8400005ojtcmdz5xyl","category_id":"ckuy1kd8f00045ojtg2ur19sf","_id":"ckuy1kd8s000h5ojt9xundjes"},{"post_id":"ckuy1kd8c00025ojtgtat5xby","category_id":"ckuy1kd8n000b5ojt730z9xb0","_id":"ckuy1kd8x000p5ojteo7r23b9"},{"post_id":"ckuy1kd8i00065ojtfamx5ag3","category_id":"ckuy1kd8t000j5ojt8dp17iin","_id":"ckuy1kd92000y5ojtgsjk6aiy"},{"post_id":"ckuy1kd8k00085ojtgudrbcz7","category_id":"ckuy1kd8x000q5ojt2aq68cbh","_id":"ckuy1kd9400145ojtgtpfadp5"},{"post_id":"ckuy1kd8m000a5ojtavtk4idc","category_id":"ckuy1kd92000z5ojt671k4kv8","_id":"ckuy1kd98001b5ojt0fie8o9k"},{"post_id":"ckuy1kd8p000e5ojt3ri3396i","category_id":"ckuy1kd9400155ojt62hx03ij","_id":"ckuy1kd9d001i5ojtgmgx2aic"},{"post_id":"ckuy1kd8r000g5ojth0twh6kg","category_id":"ckuy1kd92000z5ojt671k4kv8","_id":"ckuy1kd9e001o5ojtb0xa7d6o"},{"post_id":"ckuy1kd8u000l5ojt0ztvh1ka","category_id":"ckuy1kd9c001h5ojt7g29faep","_id":"ckuy1kd9g001t5ojt7d3o9qyy"},{"post_id":"ckuy1kd8z000s5ojt53icd6m5","category_id":"ckuy1kd9e001p5ojt6kcu4wkw","_id":"ckuy1kd9i00205ojte813avna"},{"post_id":"ckuy1kd90000v5ojt78m86vu8","category_id":"ckuy1kd9g001v5ojt9vm94mat","_id":"ckuy1kd9k00255ojthfpphjvh"}],"PostTag":[{"post_id":"ckuy1kd8400005ojtcmdz5xyl","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd90000u5ojt5r2jdw3i"},{"post_id":"ckuy1kd8400005ojtcmdz5xyl","tag_id":"ckuy1kd8n000c5ojt4gf70gto","_id":"ckuy1kd92000x5ojt9a9k68oc"},{"post_id":"ckuy1kd8400005ojtcmdz5xyl","tag_id":"ckuy1kd8t000k5ojtgwiw2c6q","_id":"ckuy1kd9300125ojtfzreavk7"},{"post_id":"ckuy1kd8c00025ojtgtat5xby","tag_id":"ckuy1kd8x000r5ojt70kh5lsk","_id":"ckuy1kd9700185ojtdj2556b3"},{"post_id":"ckuy1kd8c00025ojtgtat5xby","tag_id":"ckuy1kd9200105ojt3c1hfijk","_id":"ckuy1kd98001a5ojt6q5w42f9"},{"post_id":"ckuy1kd8i00065ojtfamx5ag3","tag_id":"ckuy1kd9400165ojt77he49fy","_id":"ckuy1kd9d001k5ojt33or5dtu"},{"post_id":"ckuy1kd8i00065ojtfamx5ag3","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd9e001m5ojt8oh342ux"},{"post_id":"ckuy1kd8k00085ojtgudrbcz7","tag_id":"ckuy1kd9d001j5ojth4tu7z82","_id":"ckuy1kd9h001x5ojt26ta9h5v"},{"post_id":"ckuy1kd8k00085ojtgudrbcz7","tag_id":"ckuy1kd9200105ojt3c1hfijk","_id":"ckuy1kd9i001z5ojtcgsz8pz1"},{"post_id":"ckuy1kd8m000a5ojtavtk4idc","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd9k00275ojt9iob6nie"},{"post_id":"ckuy1kd8m000a5ojtavtk4idc","tag_id":"ckuy1kd9g001u5ojtbg2w7p20","_id":"ckuy1kd9l00295ojt7tf0bfwo"},{"post_id":"ckuy1kd8m000a5ojtavtk4idc","tag_id":"ckuy1kd8t000k5ojtgwiw2c6q","_id":"ckuy1kd9m002b5ojt0n5pgr5k"},{"post_id":"ckuy1kd8p000e5ojt3ri3396i","tag_id":"ckuy1kd9k00245ojt20g0bgjo","_id":"ckuy1kd9m002d5ojt2awh22io"},{"post_id":"ckuy1kd8p000e5ojt3ri3396i","tag_id":"ckuy1kd9200105ojt3c1hfijk","_id":"ckuy1kd9m002e5ojt2ykzbbsj"},{"post_id":"ckuy1kd8r000g5ojth0twh6kg","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd9n002i5ojtefip6n5x"},{"post_id":"ckuy1kd8r000g5ojth0twh6kg","tag_id":"ckuy1kd9g001u5ojtbg2w7p20","_id":"ckuy1kd9n002j5ojt88u8fa00"},{"post_id":"ckuy1kd8r000g5ojth0twh6kg","tag_id":"ckuy1kd8t000k5ojtgwiw2c6q","_id":"ckuy1kd9o002l5ojtb0ky118z"},{"post_id":"ckuy1kd8r000g5ojth0twh6kg","tag_id":"ckuy1kd9n002g5ojt6rs9cbuq","_id":"ckuy1kd9o002m5ojt3c6fbxzh"},{"post_id":"ckuy1kd8u000l5ojt0ztvh1ka","tag_id":"ckuy1kd9n002h5ojt53vw022e","_id":"ckuy1kd9o002o5ojt4fg1dfyd"},{"post_id":"ckuy1kd8u000l5ojt0ztvh1ka","tag_id":"ckuy1kd9n002k5ojt72ag7a7r","_id":"ckuy1kd9o002p5ojtfb231fn4"},{"post_id":"ckuy1kd8u000l5ojt0ztvh1ka","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd9o002r5ojt2okleyjo"},{"post_id":"ckuy1kd8v000n5ojtdj4eg5lk","tag_id":"ckuy1kd9o002n5ojtawvxemwi","_id":"ckuy1kd9p002s5ojt5th2btet"},{"post_id":"ckuy1kd8z000s5ojt53icd6m5","tag_id":"ckuy1kd9o002q5ojte2795s1i","_id":"ckuy1kd9q002w5ojt7xxfg5ie"},{"post_id":"ckuy1kd8z000s5ojt53icd6m5","tag_id":"ckuy1kd9p002t5ojt89312i5x","_id":"ckuy1kd9q002x5ojtbz1jetkq"},{"post_id":"ckuy1kd8z000s5ojt53icd6m5","tag_id":"ckuy1kd9g001u5ojtbg2w7p20","_id":"ckuy1kd9q002z5ojt46ii6dew"},{"post_id":"ckuy1kd8z000s5ojt53icd6m5","tag_id":"ckuy1kd8t000k5ojtgwiw2c6q","_id":"ckuy1kd9q00305ojthwxxeli5"},{"post_id":"ckuy1kd90000v5ojt78m86vu8","tag_id":"ckuy1kd9p002v5ojt4oq71dbo","_id":"ckuy1kd9r00315ojt4rci6gv8"},{"post_id":"ckuy1kd90000v5ojt78m86vu8","tag_id":"ckuy1kd8h00055ojt3q5x38ax","_id":"ckuy1kd9r00325ojt28rzd9mf"},{"post_id":"ckuy1kd90000v5ojt78m86vu8","tag_id":"ckuy1kd9g001u5ojtbg2w7p20","_id":"ckuy1kd9r00335ojtczlq5n7e"},{"post_id":"ckuy1kd90000v5ojt78m86vu8","tag_id":"ckuy1kd8t000k5ojtgwiw2c6q","_id":"ckuy1kd9r00345ojtedm376f0"}],"Tag":[{"name":"教學","_id":"ckuy1kd8h00055ojt3q5x38ax"},{"name":"CSS","_id":"ckuy1kd8n000c5ojt4gf70gto"},{"name":"前端","_id":"ckuy1kd8t000k5ojtgwiw2c6q"},{"name":"git","_id":"ckuy1kd8x000r5ojt70kh5lsk"},{"name":"note","_id":"ckuy1kd9200105ojt3c1hfijk"},{"name":"Hexo","_id":"ckuy1kd9400165ojt77he49fy"},{"name":"android","_id":"ckuy1kd9d001j5ojth4tu7z82"},{"name":"JavaScript","_id":"ckuy1kd9g001u5ojtbg2w7p20"},{"name":"kotlin","_id":"ckuy1kd9k00245ojt20g0bgjo"},{"name":"es6","_id":"ckuy1kd9n002g5ojt6rs9cbuq"},{"name":"JAVA","_id":"ckuy1kd9n002h5ojt53vw022e"},{"name":"Spring","_id":"ckuy1kd9n002k5ojt72ag7a7r"},{"name":"react-js","_id":"ckuy1kd9o002n5ojtawvxemwi"},{"name":"ReactJs","_id":"ckuy1kd9o002q5ojte2795s1i"},{"name":"介紹","_id":"ckuy1kd9p002t5ojt89312i5x"},{"name":"webpack","_id":"ckuy1kd9p002v5ojt4oq71dbo"}]}}