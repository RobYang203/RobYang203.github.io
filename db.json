{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/NexT/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/NexT/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1579882003269},{"_id":"themes/NexT/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579882003269},{"_id":"themes/NexT/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1579882003270},{"_id":"themes/NexT/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1579882003279},{"_id":"themes/NexT/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579882003279},{"_id":"themes/NexT/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579882003280},{"_id":"themes/NexT/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579882003280},{"_id":"themes/NexT/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579882003281},{"_id":"themes/NexT/_config.yml","hash":"62404dd3112372f5674d6d5a7fc64d620686412a","modified":1579882003282},{"_id":"themes/NexT/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579882003282},{"_id":"themes/NexT/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579882003294},{"_id":"themes/NexT/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1579882003335},{"_id":"source/Eclipse-Spring-Project-Setting/index.md","hash":"838748499f05ba143a4876d8c07b71a6dc29d11e","modified":1581269072679},{"_id":"source/HexoTech/index.md","hash":"ea9b0f5930ac643c5cddb32fa04dadf5b52b5313","modified":1579882003266},{"_id":"source/JAVA-JPA-Setting/index.md","hash":"82d77c83cff134dc8f52d7129c30a0b4afbd5979","modified":1582749175969},{"_id":"source/JAVA-Spring-QList/index.md","hash":"ede00a56feb4db2a7fe3c0fb4d2e5fbf43e1b728","modified":1580932792770},{"_id":"source/JAVA-ServletTech/index.md","hash":"58b42c68f6ae6d722cede28267da929218a8b5ba","modified":1579895722014},{"_id":"source/JAVA-Spring-Tech/index.md","hash":"e5b79c324bd7b515f687c8b84a600b9584bf06db","modified":1580031785802},{"_id":"source/JAVA-Spring-WebSite-for-Eclipse/index.md","hash":"0db2731314893ea9a8c919b2b08926929cd8652c","modified":1581359348572},{"_id":"source/JSLearningNote-2019-12-10/index.md","hash":"111dcd55cd1617722074e5e41d2f1af37bfdfebd","modified":1584633295996},{"_id":"source/JAVA-Spring-WebSite-for-Eclipse2/index.md","hash":"7217dd49d6e8ba268b9577d23a6f953fb9697d3a","modified":1582652296062},{"_id":"source/JSLearningNote-2019-12-17/index.md","hash":"affa70911a1a1d9e9185fca0204ff117436eab5f","modified":1584633311342},{"_id":"source/Jave-Learning/index.md","hash":"1c0da34a18002c29e70d17e1fec573143644b915","modified":1580318278783},{"_id":"source/JSLearningNote-2020-01-02/index.md","hash":"a6e7db33b77f59099ada7c5cf23e583db11b8cc8","modified":1585080230060},{"_id":"source/JSLearningNote-2019-12-24/index.md","hash":"c1840175bb6da4f3f27f840915ed5a454e35305d","modified":1584633329512},{"_id":"source/SpringIntro/index.md","hash":"c40cb74292c242e20678b4b6f1bc04438cb69540","modified":1579976565664},{"_id":"source/ReactIntro/index.md","hash":"42941bd560dccd79a37d277380e1fbfa299bdd9f","modified":1585835354470},{"_id":"source/_posts/Hexo教學.md","hash":"9173957e504fc937549a3ff376fce42ae0877892","modified":1579882003267},{"_id":"source/_posts/JAVA-Spring-WebSite-for-Eclipse.md","hash":"e93a5150d0d118cbf5160661c9590c7e5d4374ae","modified":1582652436514},{"_id":"source/_posts/JSLearningNote.md","hash":"5dd49fb5d9d7a35fbd3bb979d660394627caf72b","modified":1584963458302},{"_id":"source/_posts/React-Tutorial.md","hash":"c04d666584f72f7ddcdcc3826670edc027e2bad8","modified":1585845933134},{"_id":"source/eclipse-setting/index.md","hash":"191c1016c17d7cb4be7775a5faa492ac6682daa3","modified":1580029951254},{"_id":"source/categories/index.md","hash":"3268430b80538a118c25a6d052899b6cb26de68e","modified":1579882003268},{"_id":"source/otherLearning/index.md","hash":"d6d86baaaf9b8bb7772a8aa9646783ec1ad529e2","modified":1580308282293},{"_id":"source/reac-todolist/index.md","hash":"dd7c52af9e090c170cee6121cab5a676b7788fc3","modified":1585845846299},{"_id":"source/react-setting/index.md","hash":"f71976d9f9727b6760fea262d0aace9b10d87c69","modified":1585590803836},{"_id":"source/tags/index.md","hash":"f30b641c5c08fcccf98b75ce4f9586ab635aefb5","modified":1579882003268},{"_id":"source/webpackNote/index.md","hash":"be5366e5e903e6898a3cfc90b7934a20f69b13f3","modified":1585214157760},{"_id":"themes/NexT/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1579882003270},{"_id":"themes/NexT/.github/CONTRIBUTING.md","hash":"f4825dd07e8c524f4be3fe99d36069828c1b8535","modified":1579882003271},{"_id":"themes/NexT/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1579882003273},{"_id":"themes/NexT/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1579882003274},{"_id":"themes/NexT/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1579882003274},{"_id":"themes/NexT/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1579882003275},{"_id":"themes/NexT/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1579882003275},{"_id":"themes/NexT/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1579882003276},{"_id":"themes/NexT/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1579882003276},{"_id":"themes/NexT/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1579882003277},{"_id":"themes/NexT/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1579882003278},{"_id":"themes/NexT/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1579882003278},{"_id":"themes/NexT/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579882003283},{"_id":"themes/NexT/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579882003284},{"_id":"themes/NexT/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579882003284},{"_id":"themes/NexT/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1579882003285},{"_id":"themes/NexT/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579882003285},{"_id":"themes/NexT/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579882003286},{"_id":"themes/NexT/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579882003286},{"_id":"themes/NexT/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579882003287},{"_id":"themes/NexT/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1579882003287},{"_id":"themes/NexT/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579882003294},{"_id":"themes/NexT/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579882003295},{"_id":"themes/NexT/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579882003295},{"_id":"themes/NexT/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579882003296},{"_id":"themes/NexT/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579882003296},{"_id":"themes/NexT/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579882003296},{"_id":"themes/NexT/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579882003297},{"_id":"themes/NexT/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579882003297},{"_id":"themes/NexT/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579882003297},{"_id":"themes/NexT/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579882003298},{"_id":"themes/NexT/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579882003298},{"_id":"themes/NexT/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579882003299},{"_id":"themes/NexT/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579882003299},{"_id":"themes/NexT/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579882003299},{"_id":"themes/NexT/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579882003300},{"_id":"themes/NexT/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579882003300},{"_id":"themes/NexT/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579882003300},{"_id":"themes/NexT/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579882003301},{"_id":"themes/NexT/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579882003301},{"_id":"themes/NexT/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579882003301},{"_id":"themes/NexT/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579882003302},{"_id":"themes/NexT/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1579882003302},{"_id":"themes/NexT/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1579882003332},{"_id":"themes/NexT/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579882003333},{"_id":"themes/NexT/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579882003333},{"_id":"themes/NexT/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579882003333},{"_id":"themes/NexT/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579882003334},{"_id":"themes/NexT/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579882003335},{"_id":"themes/NexT/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579882003349},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/bug-report.md","hash":"80c31b258f404a16ffc19706c5e5aa3ccb8c887e","modified":1579882003271},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1579882003272},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1579882003272},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE/question.md","hash":"2f85f500781124b1848cc419f864797399fcdabc","modified":1579882003273},{"_id":"themes/NexT/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579882003290},{"_id":"themes/NexT/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1579882003290},{"_id":"themes/NexT/docs/zh-CN/CONTRIBUTING.md","hash":"bc159df1260e0c912c509090d54dd20a08201100","modified":1579882003291},{"_id":"themes/NexT/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1579882003291},{"_id":"themes/NexT/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579882003292},{"_id":"themes/NexT/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1579882003292},{"_id":"themes/NexT/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1579882003293},{"_id":"themes/NexT/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579882003293},{"_id":"themes/NexT/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1579882003294},{"_id":"themes/NexT/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1579882003288},{"_id":"themes/NexT/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579882003288},{"_id":"themes/NexT/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579882003289},{"_id":"themes/NexT/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579882003289},{"_id":"themes/NexT/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579882003302},{"_id":"themes/NexT/layout/_macro/post.swig","hash":"d80862f005ccbb1d583e40b6e0e6226cced1b925","modified":1579882003303},{"_id":"themes/NexT/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579882003303},{"_id":"themes/NexT/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1579882003303},{"_id":"themes/NexT/layout/_partials/footer.swig","hash":"434a4979c376c1ff27380c778d0261fea8d0a0a4","modified":1579882003304},{"_id":"themes/NexT/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579882003307},{"_id":"themes/NexT/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579882003311},{"_id":"themes/NexT/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579882003311},{"_id":"themes/NexT/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579882003312},{"_id":"themes/NexT/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1579882003312},{"_id":"themes/NexT/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579882003314},{"_id":"themes/NexT/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579882003315},{"_id":"themes/NexT/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579882003317},{"_id":"themes/NexT/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579882003322},{"_id":"themes/NexT/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579882003324},{"_id":"themes/NexT/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579882003325},{"_id":"themes/NexT/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579882003336},{"_id":"themes/NexT/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579882003344},{"_id":"themes/NexT/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579882003345},{"_id":"themes/NexT/scripts/filters/locals.js","hash":"ffa0e122c1cdf9c86ddca104ddb2dfbaccaa1bb5","modified":1579882003346},{"_id":"themes/NexT/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579882003346},{"_id":"themes/NexT/scripts/filters/post.js","hash":"ec740559866c0a6697e6cd6fc364b2231aa36575","modified":1579882003347},{"_id":"themes/NexT/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1579882003347},{"_id":"themes/NexT/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579882003348},{"_id":"themes/NexT/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579882003348},{"_id":"themes/NexT/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579882003349},{"_id":"themes/NexT/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579882003350},{"_id":"themes/NexT/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579882003350},{"_id":"themes/NexT/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579882003351},{"_id":"themes/NexT/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579882003351},{"_id":"themes/NexT/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579882003352},{"_id":"themes/NexT/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579882003352},{"_id":"themes/NexT/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579882003352},{"_id":"themes/NexT/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579882003353},{"_id":"themes/NexT/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579882003353},{"_id":"themes/NexT/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579882003401},{"_id":"themes/NexT/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579882003402},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579882003402},{"_id":"themes/NexT/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579882003403},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579882003403},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579882003404},{"_id":"themes/NexT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579882003404},{"_id":"themes/NexT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579882003405},{"_id":"themes/NexT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579882003405},{"_id":"themes/NexT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579882003406},{"_id":"themes/NexT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579882003406},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579882003407},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579882003407},{"_id":"themes/NexT/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579882003407},{"_id":"themes/NexT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579882003408},{"_id":"themes/NexT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579882003408},{"_id":"themes/NexT/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579882003408},{"_id":"themes/NexT/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1579882003409},{"_id":"themes/NexT/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579882003409},{"_id":"themes/NexT/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1579882003410},{"_id":"themes/NexT/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579882003410},{"_id":"themes/NexT/source/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1579882003411},{"_id":"themes/NexT/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579882003412},{"_id":"themes/NexT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579882003389},{"_id":"themes/NexT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579882003390},{"_id":"themes/NexT/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1579882003304},{"_id":"themes/NexT/layout/_partials/head/head.swig","hash":"955f68e2c1d3753436141c04fafd57d8fbb265c6","modified":1579882003304},{"_id":"themes/NexT/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579882003305},{"_id":"themes/NexT/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579882003305},{"_id":"themes/NexT/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1579882003305},{"_id":"themes/NexT/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1579882003306},{"_id":"themes/NexT/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1579882003306},{"_id":"themes/NexT/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579882003307},{"_id":"themes/NexT/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579882003307},{"_id":"themes/NexT/layout/_partials/post/post-copyright.swig","hash":"0572a4c685fe5c49021a465b717397217ee04df8","modified":1579882003308},{"_id":"themes/NexT/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579882003308},{"_id":"themes/NexT/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579882003308},{"_id":"themes/NexT/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1579882003309},{"_id":"themes/NexT/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579882003309},{"_id":"themes/NexT/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579882003310},{"_id":"themes/NexT/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579882003310},{"_id":"themes/NexT/layout/_partials/sidebar/site-overview.swig","hash":"6cc891f0f5553fc3f9ebd3cab8d6a081c20efe56","modified":1579882003310},{"_id":"themes/NexT/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1579882003312},{"_id":"themes/NexT/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579882003313},{"_id":"themes/NexT/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579882003313},{"_id":"themes/NexT/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579882003314},{"_id":"themes/NexT/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579882003314},{"_id":"themes/NexT/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579882003316},{"_id":"themes/NexT/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579882003316},{"_id":"themes/NexT/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579882003316},{"_id":"themes/NexT/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579882003317},{"_id":"themes/NexT/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579882003318},{"_id":"themes/NexT/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579882003318},{"_id":"themes/NexT/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1579882003319},{"_id":"themes/NexT/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1579882003319},{"_id":"themes/NexT/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1579882003320},{"_id":"themes/NexT/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1579882003320},{"_id":"themes/NexT/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1579882003321},{"_id":"themes/NexT/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1579882003321},{"_id":"themes/NexT/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579882003322},{"_id":"themes/NexT/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579882003323},{"_id":"themes/NexT/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579882003324},{"_id":"themes/NexT/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579882003326},{"_id":"themes/NexT/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579882003326},{"_id":"themes/NexT/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579882003327},{"_id":"themes/NexT/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579882003328},{"_id":"themes/NexT/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579882003329},{"_id":"themes/NexT/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579882003329},{"_id":"themes/NexT/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579882003329},{"_id":"themes/NexT/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1579882003330},{"_id":"themes/NexT/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579882003331},{"_id":"themes/NexT/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579882003332},{"_id":"themes/NexT/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579882003337},{"_id":"themes/NexT/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579882003337},{"_id":"themes/NexT/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579882003338},{"_id":"themes/NexT/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1579882003339},{"_id":"themes/NexT/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579882003339},{"_id":"themes/NexT/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579882003340},{"_id":"themes/NexT/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1579882003341},{"_id":"themes/NexT/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1579882003341},{"_id":"themes/NexT/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579882003342},{"_id":"themes/NexT/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1579882003343},{"_id":"themes/NexT/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1579882003344},{"_id":"themes/NexT/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579882003389},{"_id":"themes/NexT/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579882003390},{"_id":"themes/NexT/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579882003390},{"_id":"themes/NexT/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579882003399},{"_id":"themes/NexT/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579882003399},{"_id":"themes/NexT/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579882003399},{"_id":"themes/NexT/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579882003400},{"_id":"themes/NexT/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579882003401},{"_id":"themes/NexT/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1579882003410},{"_id":"themes/NexT/source/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1579882003411},{"_id":"themes/NexT/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579882003412},{"_id":"themes/NexT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579882003413},{"_id":"themes/NexT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579882003413},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579882003413},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579882003414},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579882003421},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579882003422},{"_id":"themes/NexT/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579882003354},{"_id":"themes/NexT/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579882003354},{"_id":"themes/NexT/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579882003355},{"_id":"themes/NexT/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1579882003365},{"_id":"themes/NexT/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579882003365},{"_id":"themes/NexT/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579882003372},{"_id":"themes/NexT/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579882003373},{"_id":"themes/NexT/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579882003380},{"_id":"themes/NexT/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579882003380},{"_id":"themes/NexT/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579882003381},{"_id":"themes/NexT/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579882003383},{"_id":"themes/NexT/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579882003384},{"_id":"themes/NexT/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579882003384},{"_id":"themes/NexT/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1579882003385},{"_id":"themes/NexT/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579882003389},{"_id":"themes/NexT/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579882003391},{"_id":"themes/NexT/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579882003391},{"_id":"themes/NexT/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579882003392},{"_id":"themes/NexT/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579882003392},{"_id":"themes/NexT/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579882003393},{"_id":"themes/NexT/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579882003393},{"_id":"themes/NexT/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579882003393},{"_id":"themes/NexT/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579882003394},{"_id":"themes/NexT/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1579882003394},{"_id":"themes/NexT/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579882003394},{"_id":"themes/NexT/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579882003395},{"_id":"themes/NexT/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579882003395},{"_id":"themes/NexT/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579882003396},{"_id":"themes/NexT/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1579882003396},{"_id":"themes/NexT/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1579882003397},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1579882003397},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579882003398},{"_id":"themes/NexT/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579882003398},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579882003414},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579882003415},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579882003415},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579882003421},{"_id":"themes/NexT/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579882003356},{"_id":"themes/NexT/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579882003356},{"_id":"themes/NexT/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579882003356},{"_id":"themes/NexT/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579882003357},{"_id":"themes/NexT/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1579882003357},{"_id":"themes/NexT/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579882003357},{"_id":"themes/NexT/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579882003358},{"_id":"themes/NexT/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579882003358},{"_id":"themes/NexT/source/css/_common/components/post/post-expand.styl","hash":"7a683e254646d32b3336774c0cdcf88c1966c0b1","modified":1579882003359},{"_id":"themes/NexT/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1579882003360},{"_id":"themes/NexT/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579882003361},{"_id":"themes/NexT/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579882003361},{"_id":"themes/NexT/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579882003362},{"_id":"themes/NexT/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579882003362},{"_id":"themes/NexT/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579882003363},{"_id":"themes/NexT/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579882003364},{"_id":"themes/NexT/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579882003364},{"_id":"themes/NexT/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579882003366},{"_id":"themes/NexT/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579882003367},{"_id":"themes/NexT/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579882003367},{"_id":"themes/NexT/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1579882003367},{"_id":"themes/NexT/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579882003368},{"_id":"themes/NexT/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1579882003368},{"_id":"themes/NexT/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579882003369},{"_id":"themes/NexT/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579882003370},{"_id":"themes/NexT/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579882003370},{"_id":"themes/NexT/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579882003370},{"_id":"themes/NexT/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579882003371},{"_id":"themes/NexT/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579882003371},{"_id":"themes/NexT/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1579882003372},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579882003373},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579882003374},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579882003375},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579882003375},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579882003376},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1579882003377},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1579882003377},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579882003378},{"_id":"themes/NexT/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1579882003378},{"_id":"themes/NexT/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579882003379},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579882003381},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579882003382},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1579882003382},{"_id":"themes/NexT/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579882003383},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579882003385},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"42a12c718b5832cd535a4631759376910c549d94","modified":1579882003386},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579882003386},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579882003387},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579882003387},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579882003388},{"_id":"themes/NexT/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579882003388},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579882003419},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579882003418},{"_id":"public/Eclipse-Spring-Project-Setting/index.html","hash":"805c5b9cbe4c40ee6b5c5d18f46543ae6879f4c0","modified":1585845971066},{"_id":"public/JAVA-Spring-QList/index.html","hash":"100fbb22d5d8cc8fc591a2f620905fcef092e3ee","modified":1585845971066},{"_id":"public/JAVA-ServletTech/index.html","hash":"c8a5a0e56dd176a5421f90d38efedc71432b6ae7","modified":1585845971066},{"_id":"public/JAVA-Spring-Tech/index.html","hash":"3ba411ef21849b9cfcc91d1bf08bdfa030f74a97","modified":1585845971066},{"_id":"public/JAVA-Spring-WebSite-for-Eclipse/index.html","hash":"3b3a92e20312fdf5db47b1271de69bf99427c651","modified":1585845971066},{"_id":"public/Jave-Learning/index.html","hash":"5dc326264ee5cc33332c34ddfecff0d0818c9ccd","modified":1585845971066},{"_id":"public/SpringIntro/index.html","hash":"35a150c1cd0044ab3c0d2953672caf64c58e0730","modified":1585845971066},{"_id":"public/categories/index.html","hash":"2bd01ff5b8d200ade84e7a45a00f6545bae059fe","modified":1585845971066},{"_id":"public/eclipse-setting/index.html","hash":"d9456c41e358724c065f22294ae1642bf577435e","modified":1585845971066},{"_id":"public/otherLearning/index.html","hash":"252b855fe7f7584c15817300b3c0c672a09c55d8","modified":1585845971066},{"_id":"public/reac-todolist/index.html","hash":"bc30e80666f94fdfad6307d1616ce662df26ab73","modified":1585845971066},{"_id":"public/tags/index.html","hash":"336427e011c7cdfd712d128ff603556340d50d23","modified":1585845971066},{"_id":"public/2020/03/03/JSLearningNote/index.html","hash":"9d691600d5d4325ea13c2fb314963468ac19e56d","modified":1585845971066},{"_id":"public/2020/02/28/React-Tutorial/index.html","hash":"2ed2db201263985f904cc220674fbd2eee938e2b","modified":1585845971066},{"_id":"public/2020/01/24/JAVA-Spring-WebSite-for-Eclipse/index.html","hash":"30eb1a85dc2e52033cad683561a69b6dc06a65b0","modified":1585845971066},{"_id":"public/2020/01/24/Hexo教學/index.html","hash":"9fccbb41f2346b960507bf473033139916c83e7d","modified":1585845971066},{"_id":"public/tags/Hexo/index.html","hash":"91f356caae1e37e304acf9be9893cfcd7331fcb3","modified":1585845971066},{"_id":"public/tags/教學/index.html","hash":"9568913c19f8905da3d2aed60b47469f36e4431a","modified":1585845971066},{"_id":"public/tags/JAVA/index.html","hash":"999e218d23aada8f3399d8965c0554cf99eaf86a","modified":1585845971066},{"_id":"public/tags/Spring/index.html","hash":"13f55f992c95e68b824e01b07564b08deddc3302","modified":1585845971066},{"_id":"public/tags/JavaScript/index.html","hash":"7d90847fea248007c9cfb7e13aae9b44d1e4ea04","modified":1585845971066},{"_id":"public/tags/前端/index.html","hash":"2c083d5605dc7c7e74d25bcf752450f08b61c198","modified":1585845971066},{"_id":"public/tags/ReactJs/index.html","hash":"ffd359d997a6d6082bbe417c6aafafd81d323b24","modified":1585845971066},{"_id":"public/archives/index.html","hash":"b758247ea9ef1f6cfb4e64586e0ba785e5664e94","modified":1585845971066},{"_id":"public/archives/2020/index.html","hash":"354bc983c2edf08f9cf487b205670be615270b16","modified":1585845971066},{"_id":"public/archives/2020/01/index.html","hash":"4f787b8da0aafb0056e551de0d3288eba1d13081","modified":1585845971066},{"_id":"public/archives/2020/02/index.html","hash":"092010c619668385eeb0a66559828f146af66a69","modified":1585845971066},{"_id":"public/archives/2020/03/index.html","hash":"cd4acff40d2d4277112653c77197a11afc72df7b","modified":1585845971066},{"_id":"public/categories/Hexo/index.html","hash":"9d2b7ae2c4304c54cbabd32acc42e722ae189c29","modified":1585845971066},{"_id":"public/categories/JAVA-Spring/index.html","hash":"19516687627735cbbe3d7d519f6c8b4fb0b725f0","modified":1585845971066},{"_id":"public/categories/jsNote/index.html","hash":"736b380323d9bbf76fc1c2c9742f49fac1861743","modified":1585845971066},{"_id":"public/categories/ReactJs/index.html","hash":"0dc803abf071890d3f344e477cff439766b392f9","modified":1585845971066},{"_id":"public/HexoTech/index.html","hash":"cf3c6293b54d99d325d5bb6ba8adadc55b984d45","modified":1585845971066},{"_id":"public/JAVA-JPA-Setting/index.html","hash":"636cd4ca6ca47cc441c68a40651b66b736b77dac","modified":1585845971066},{"_id":"public/JSLearningNote-2019-12-10/index.html","hash":"0062cdaf7baf6326effa8d1c2fa46c85e9d45140","modified":1585845971066},{"_id":"public/JAVA-Spring-WebSite-for-Eclipse2/index.html","hash":"6f4feb2f6f6283cb96553c46ce9dc42b7b115e5b","modified":1585845971066},{"_id":"public/JSLearningNote-2019-12-17/index.html","hash":"cf9fbe4e96c2ef2cc72c052496aa19ed04ec0ccd","modified":1585845971066},{"_id":"public/JSLearningNote-2020-01-02/index.html","hash":"375e74fe63f8a406de1b2e34f1f85d625b09ef4d","modified":1585845971066},{"_id":"public/JSLearningNote-2019-12-24/index.html","hash":"123cb212852b333a8ca992ccb4e41a08a8a45a2f","modified":1585845971066},{"_id":"public/ReactIntro/index.html","hash":"04bab099056181715f4e7626f8b3de27ea7d70af","modified":1585845971066},{"_id":"public/react-setting/index.html","hash":"dd36007b3bcda0d942f9feced278689d00a562c2","modified":1585845971066},{"_id":"public/webpackNote/index.html","hash":"ce6c362793f24c34303ad94feb374e60160e8971","modified":1585845971066},{"_id":"public/index.html","hash":"0c0bb779425432fe45f764c8b2818062da766960","modified":1585845971066},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585845971066},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585845971066},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585845971066},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585845971066},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585845971066},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585845971066},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585845971066},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585845971066},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585845971066},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585845971066},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585845971066},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585845971066},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585845971066},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585845971066},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585845971066},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585845971066},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585845971066},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585845971066},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585845971066},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1585845971066},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1585845971066},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1585845971066},{"_id":"public/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1585845971066},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1585845971066},{"_id":"public/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1585845971066},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1585845971066},{"_id":"public/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1585845971066},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1585845971066},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585845971066},{"_id":"public/css/main.css","hash":"520fc4ef7ad6a9eb58623c612354dacb5b4f5772","modified":1585845971066},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585845971066},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585845971066},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585845971066},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585845971066},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585845971066}],"Category":[{"name":"Hexo","_id":"ck8izquw20004n5jt42rahamh"},{"name":"JAVA-Spring","_id":"ck8izquw8000bn5jt6f657vlh"},{"name":"jsNote","_id":"ck8izquwc000gn5jt3iff594n"},{"name":"ReactJs","_id":"ck8izquwe000nn5jt8zutdvi0"}],"Data":[],"Page":[{"title":"Eclipse_Spring_Project_Setting","date":"2020-02-09T17:22:47.000Z","_content":"\n##  Eclipse Spring Project Setting\n* 打開 Eclipse ，在新增專案裡找到 **Web**資料夾，選擇 **Dynamic Web Project**\n* 設定 `project name`，完成\n* 手動載入 **Spring Framework**\n\n##  Spring Maven Web Project\n* 打開 Eclipse ，在新增專案裡找到 **Maven**資料夾，選擇 **Maven Project**\n* 在 **Select an Archetype** 選擇 \n    * `Group ID`: **com.apache.maven.archetypes**<br>\n    * `Artifact Id`: **maven-archetype-webapp**\n* 編輯 `pom.xml` 載入 **Spring Framework**\n```xml\n<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>4.3.14.RELEASE</version>\n</dependency>\n```\n* 確認 JRE 在 JAVA8 以上，否則會有 `springmvc/main/java(missing)`\n## WebContent 架構\n* META-INF\n    * 主要是在打包(.jar .war)時內容會自動建立\n    * 存放 **Package**, **額外設定(版本,安全,擴展,服務)**  \n    * 主要檔案\n        * Manifast.MF\n    * 參考資料：\n        * https://blog.csdn.net/umi2008/article/details/84211141\n* WEB-INF\n    * 網站資訊存放區，不過客戶端**不可直接存取**\n    * 目錄\n        * lib/\n        * web.xml\n        * classes/\n\n","source":"Eclipse-Spring-Project-Setting/index.md","raw":"---\ntitle: Eclipse_Spring_Project_Setting\ndate: 2020-02-10 01:22:47\n---\n\n##  Eclipse Spring Project Setting\n* 打開 Eclipse ，在新增專案裡找到 **Web**資料夾，選擇 **Dynamic Web Project**\n* 設定 `project name`，完成\n* 手動載入 **Spring Framework**\n\n##  Spring Maven Web Project\n* 打開 Eclipse ，在新增專案裡找到 **Maven**資料夾，選擇 **Maven Project**\n* 在 **Select an Archetype** 選擇 \n    * `Group ID`: **com.apache.maven.archetypes**<br>\n    * `Artifact Id`: **maven-archetype-webapp**\n* 編輯 `pom.xml` 載入 **Spring Framework**\n```xml\n<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>4.3.14.RELEASE</version>\n</dependency>\n```\n* 確認 JRE 在 JAVA8 以上，否則會有 `springmvc/main/java(missing)`\n## WebContent 架構\n* META-INF\n    * 主要是在打包(.jar .war)時內容會自動建立\n    * 存放 **Package**, **額外設定(版本,安全,擴展,服務)**  \n    * 主要檔案\n        * Manifast.MF\n    * 參考資料：\n        * https://blog.csdn.net/umi2008/article/details/84211141\n* WEB-INF\n    * 網站資訊存放區，不過客戶端**不可直接存取**\n    * 目錄\n        * lib/\n        * web.xml\n        * classes/\n\n","updated":"2020-02-09T17:24:32.679Z","path":"Eclipse-Spring-Project-Setting/index.html","comments":1,"layout":"page","_id":"ck8izquvu0000n5jt68dxcezz","content":"<h2 id=\"Eclipse-Spring-Project-Setting\"><a href=\"#Eclipse-Spring-Project-Setting\" class=\"headerlink\" title=\"Eclipse Spring Project Setting\"></a>Eclipse Spring Project Setting</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Web</strong>資料夾，選擇 <strong>Dynamic Web Project</strong></li>\n<li>設定 <code>project name</code>，完成</li>\n<li>手動載入 <strong>Spring Framework</strong></li>\n</ul>\n<h2 id=\"Spring-Maven-Web-Project\"><a href=\"#Spring-Maven-Web-Project\" class=\"headerlink\" title=\"Spring Maven Web Project\"></a>Spring Maven Web Project</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Maven</strong>資料夾，選擇 <strong>Maven Project</strong></li>\n<li>在 <strong>Select an Archetype</strong> 選擇 <ul>\n<li><code>Group ID</code>: <strong>com.apache.maven.archetypes</strong><br></li>\n<li><code>Artifact Id</code>: <strong>maven-archetype-webapp</strong></li>\n</ul>\n</li>\n<li>編輯 <code>pom.xml</code> 載入 <strong>Spring Framework</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.14.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>確認 JRE 在 JAVA8 以上，否則會有 <code>springmvc/main/java(missing)</code><h2 id=\"WebContent-架構\"><a href=\"#WebContent-架構\" class=\"headerlink\" title=\"WebContent 架構\"></a>WebContent 架構</h2></li>\n<li>META-INF<ul>\n<li>主要是在打包(.jar .war)時內容會自動建立</li>\n<li>存放 <strong>Package</strong>, <strong>額外設定(版本,安全,擴展,服務)</strong>  </li>\n<li>主要檔案<ul>\n<li>Manifast.MF</li>\n</ul>\n</li>\n<li>參考資料：<ul>\n<li><a href=\"https://blog.csdn.net/umi2008/article/details/84211141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/umi2008/article/details/84211141</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WEB-INF<ul>\n<li>網站資訊存放區，不過客戶端<strong>不可直接存取</strong></li>\n<li>目錄<ul>\n<li>lib/</li>\n<li>web.xml</li>\n<li>classes/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Eclipse-Spring-Project-Setting\"><a href=\"#Eclipse-Spring-Project-Setting\" class=\"headerlink\" title=\"Eclipse Spring Project Setting\"></a>Eclipse Spring Project Setting</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Web</strong>資料夾，選擇 <strong>Dynamic Web Project</strong></li>\n<li>設定 <code>project name</code>，完成</li>\n<li>手動載入 <strong>Spring Framework</strong></li>\n</ul>\n<h2 id=\"Spring-Maven-Web-Project\"><a href=\"#Spring-Maven-Web-Project\" class=\"headerlink\" title=\"Spring Maven Web Project\"></a>Spring Maven Web Project</h2><ul>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Maven</strong>資料夾，選擇 <strong>Maven Project</strong></li>\n<li>在 <strong>Select an Archetype</strong> 選擇 <ul>\n<li><code>Group ID</code>: <strong>com.apache.maven.archetypes</strong><br></li>\n<li><code>Artifact Id</code>: <strong>maven-archetype-webapp</strong></li>\n</ul>\n</li>\n<li>編輯 <code>pom.xml</code> 載入 <strong>Spring Framework</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.14.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>確認 JRE 在 JAVA8 以上，否則會有 <code>springmvc/main/java(missing)</code><h2 id=\"WebContent-架構\"><a href=\"#WebContent-架構\" class=\"headerlink\" title=\"WebContent 架構\"></a>WebContent 架構</h2></li>\n<li>META-INF<ul>\n<li>主要是在打包(.jar .war)時內容會自動建立</li>\n<li>存放 <strong>Package</strong>, <strong>額外設定(版本,安全,擴展,服務)</strong>  </li>\n<li>主要檔案<ul>\n<li>Manifast.MF</li>\n</ul>\n</li>\n<li>參考資料：<ul>\n<li><a href=\"https://blog.csdn.net/umi2008/article/details/84211141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/umi2008/article/details/84211141</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WEB-INF<ul>\n<li>網站資訊存放區，不過客戶端<strong>不可直接存取</strong></li>\n<li>目錄<ul>\n<li>lib/</li>\n<li>web.xml</li>\n<li>classes/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hexo教學","date":"2020-01-24T14:29:20.000Z","categories":["Hexo"],"tags":["Hexo","教學"],"_content":"\n# Hexo\n\n##  說明\n* 可以自動建立一個 Blog \n* 可以把生成的 Blog 檔案放在 Git Page 裡\n* 安裝 `(需要先安裝 npm)`\n    > npm install -g hexo-cli\n* 有多種指令可以來對 Blog 作設定\n\n## Hexo 命令 \n> `[content]` 裡的內容代表可以省略\n* > hexo init [project name] \n    *  初始化          \n        1. **project name** : 這 Blog 專案的名稱 \n        2. 有填寫的話，會建立一個 **project name** 的資料夾 \n        3. 沒有填寫的話，則會在當下資料夾建立專案 *(非空白會報錯)*\n\n*  hexo g[enerate]\n    *  編譯檔案為 **html 文件**\n    *  編譯後會新增 **public資料夾** 在 `專案根目錄`\n* hexo clean\n    * 清除編譯後的 **public資料夾**\n* hexo d[eploy]\n    * 部屬到指定的 Server\n    * 要在 _confing.yml 的 deploy 選項設定\n* hexo s[erver]\n    * 以本機啟動 Server\n    * 默認 Url : `localhost:4000`\n\n* hexo new [layout] < title >\n    * 建立新文章\n    * 內建三種 [layout](#Layout)\n    * 預設為 post **layout**\n\n\n\n## _config.yml\n* 針對這專案 blog 的設定\n* 格式\n    * 以 **key： `[空白]` value** \n    * **value** 跟 **:** 之間一定要空白，不然會報錯\n``` yml\n    url: https://robyang203.github.io/\n    root: /TestBlog2\n```\n* 分類 `目前有用到的`\n    * Site\n        * Blog 資訊\n    ``` yml\n        title: TestBlog2    # 部落格名稱\n        subtitle: ''    \n        description: ''     # 描述\n        keywords:\n        author: Tony    #作者\n        language: en    #語系\n        timezone: ''\n    ```\n    * URL\n        * Blog 路由設定\n    ``` yml\n    url: https://robyang203.github.io/ # Domain\n    root: /TestBlog2 # 此網站的根目錄\n    permalink: :year/:month/:day/:title/ # 文章固定網址\n    permalink_defaults:\n    pretty_urls:\n    trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n    trailing_html: true # Set to false to remove trailing '.html' from permalinks\n    ```\n    * Extension\n        * 額外添加插件，目前用到 theme\n    ``` yml\n    theme: Next \n    ```\n    * Deploymemt\n        * 部署到哪個地方 ， 目前使用 **Github-Pages**\n    ``` yml\n    deploy:\n        type: git #類型\n        repo: git@github.com:RobYang203/TestBlog2.git #要部署到哪個 repo\n        branch: gh-pages #repo 的分支\n    ```\n\n    \n## Layout\n* 預設三種，提供不同的寫作模式\n    * post\n        * 會發佈在主頁 **(Home)** 上\n        * 會在 **source/_post** 資料夾下新增 `<title>.md`檔\n    * page\n        * 獨立新增一頁，路徑會是 domain/title\n        * 會在 **source/** 路徑 ，新增 `<title>` 資料夾，裡面會預設放有 `index.md` \n    * draft\n        * 草稿類型，不會顯示在頁面上\n\n# Categories & Tags\n* 可提供文章分類的功能\n* **Categories** 每篇文章只能有一個 ， **Tags** 可以有多個\n* 只能在 Post文章有\n* 新增 **Page** 來保存 \n> hexo new page [ tags | categories ]\n* 再新增文章加入 `type`\n``` markdown\n    ---\n    title: new Page Namw\n    date: 2017-05-27 13:47:40\n    type: [\"tags\" | \"categories\"] \n    ---\n```\n* 之後當新增文章時，在資訊頁面添加上\n``` md\n    ---\n    title: Page\n    date: 2017-05-26 12:12:57\n    categories: \n    - category1\n    tags:\n    - tag1\n    - tag2\n    - tag3\n    ---\n```\n\n# NexT 主題\n* 從 [HexT Github](https://github.com/theme-next/hexo-theme-next/releases)下載\n* 下載後解壓縮，命名資料夾 `Next`\n* 移置 `ProjectName/theme` 資料夾下\n* 設定 _config.yml， **theme** 改為 `Next` \n ``` yml\n    theme: Next \n ```\n##  部屬到 Github 上\n\n* 修改 `_config.yml`  **deploy 選項**\n    * type 類型\n    * repo 儲存庫\n    * branch 分支\n``` \n    deploy:\n        type: git \n        repo: git@github.com:yourusername/yourprojectname.git\n        branch: gh-pages\n```\n\n* 設定完後，輸入 `hexo d` 會自動 push 到指定的 **github branch**\n\n## Q-List\n* Q.更新文章後發現內容沒變\n> A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次\n\n* Q. ","source":"HexoTech/index.md","raw":"---\ntitle: Hexo教學\ndate: 2020-01-24 22:29:20\ncategories:\n- Hexo\ntags: \n- Hexo\n- 教學\n\n---\n\n# Hexo\n\n##  說明\n* 可以自動建立一個 Blog \n* 可以把生成的 Blog 檔案放在 Git Page 裡\n* 安裝 `(需要先安裝 npm)`\n    > npm install -g hexo-cli\n* 有多種指令可以來對 Blog 作設定\n\n## Hexo 命令 \n> `[content]` 裡的內容代表可以省略\n* > hexo init [project name] \n    *  初始化          \n        1. **project name** : 這 Blog 專案的名稱 \n        2. 有填寫的話，會建立一個 **project name** 的資料夾 \n        3. 沒有填寫的話，則會在當下資料夾建立專案 *(非空白會報錯)*\n\n*  hexo g[enerate]\n    *  編譯檔案為 **html 文件**\n    *  編譯後會新增 **public資料夾** 在 `專案根目錄`\n* hexo clean\n    * 清除編譯後的 **public資料夾**\n* hexo d[eploy]\n    * 部屬到指定的 Server\n    * 要在 _confing.yml 的 deploy 選項設定\n* hexo s[erver]\n    * 以本機啟動 Server\n    * 默認 Url : `localhost:4000`\n\n* hexo new [layout] < title >\n    * 建立新文章\n    * 內建三種 [layout](#Layout)\n    * 預設為 post **layout**\n\n\n\n## _config.yml\n* 針對這專案 blog 的設定\n* 格式\n    * 以 **key： `[空白]` value** \n    * **value** 跟 **:** 之間一定要空白，不然會報錯\n``` yml\n    url: https://robyang203.github.io/\n    root: /TestBlog2\n```\n* 分類 `目前有用到的`\n    * Site\n        * Blog 資訊\n    ``` yml\n        title: TestBlog2    # 部落格名稱\n        subtitle: ''    \n        description: ''     # 描述\n        keywords:\n        author: Tony    #作者\n        language: en    #語系\n        timezone: ''\n    ```\n    * URL\n        * Blog 路由設定\n    ``` yml\n    url: https://robyang203.github.io/ # Domain\n    root: /TestBlog2 # 此網站的根目錄\n    permalink: :year/:month/:day/:title/ # 文章固定網址\n    permalink_defaults:\n    pretty_urls:\n    trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n    trailing_html: true # Set to false to remove trailing '.html' from permalinks\n    ```\n    * Extension\n        * 額外添加插件，目前用到 theme\n    ``` yml\n    theme: Next \n    ```\n    * Deploymemt\n        * 部署到哪個地方 ， 目前使用 **Github-Pages**\n    ``` yml\n    deploy:\n        type: git #類型\n        repo: git@github.com:RobYang203/TestBlog2.git #要部署到哪個 repo\n        branch: gh-pages #repo 的分支\n    ```\n\n    \n## Layout\n* 預設三種，提供不同的寫作模式\n    * post\n        * 會發佈在主頁 **(Home)** 上\n        * 會在 **source/_post** 資料夾下新增 `<title>.md`檔\n    * page\n        * 獨立新增一頁，路徑會是 domain/title\n        * 會在 **source/** 路徑 ，新增 `<title>` 資料夾，裡面會預設放有 `index.md` \n    * draft\n        * 草稿類型，不會顯示在頁面上\n\n# Categories & Tags\n* 可提供文章分類的功能\n* **Categories** 每篇文章只能有一個 ， **Tags** 可以有多個\n* 只能在 Post文章有\n* 新增 **Page** 來保存 \n> hexo new page [ tags | categories ]\n* 再新增文章加入 `type`\n``` markdown\n    ---\n    title: new Page Namw\n    date: 2017-05-27 13:47:40\n    type: [\"tags\" | \"categories\"] \n    ---\n```\n* 之後當新增文章時，在資訊頁面添加上\n``` md\n    ---\n    title: Page\n    date: 2017-05-26 12:12:57\n    categories: \n    - category1\n    tags:\n    - tag1\n    - tag2\n    - tag3\n    ---\n```\n\n# NexT 主題\n* 從 [HexT Github](https://github.com/theme-next/hexo-theme-next/releases)下載\n* 下載後解壓縮，命名資料夾 `Next`\n* 移置 `ProjectName/theme` 資料夾下\n* 設定 _config.yml， **theme** 改為 `Next` \n ``` yml\n    theme: Next \n ```\n##  部屬到 Github 上\n\n* 修改 `_config.yml`  **deploy 選項**\n    * type 類型\n    * repo 儲存庫\n    * branch 分支\n``` \n    deploy:\n        type: git \n        repo: git@github.com:yourusername/yourprojectname.git\n        branch: gh-pages\n```\n\n* 設定完後，輸入 `hexo d` 會自動 push 到指定的 **github branch**\n\n## Q-List\n* Q.更新文章後發現內容沒變\n> A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次\n\n* Q. ","updated":"2020-01-24T16:06:43.266Z","path":"HexoTech/index.html","comments":1,"layout":"page","_id":"ck8izquw00002n5jtfchz5g7k","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h2><ul>\n<li>可以自動建立一個 Blog </li>\n<li>可以把生成的 Blog 檔案放在 Git Page 裡</li>\n<li>安裝 <code>(需要先安裝 npm)</code><blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li>有多種指令可以來對 Blog 作設定</li>\n</ul>\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><blockquote>\n<p><code>[content]</code> 裡的內容代表可以省略</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>hexo init [project name] </p>\n</blockquote>\n<ul>\n<li>初始化          <ol>\n<li><strong>project name</strong> : 這 Blog 專案的名稱 </li>\n<li>有填寫的話，會建立一個 <strong>project name</strong> 的資料夾 </li>\n<li>沒有填寫的話，則會在當下資料夾建立專案 <em>(非空白會報錯)</em></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>hexo g[enerate]</p>\n<ul>\n<li>編譯檔案為 <strong>html 文件</strong></li>\n<li>編譯後會新增 <strong>public資料夾</strong> 在 <code>專案根目錄</code></li>\n</ul>\n</li>\n<li><p>hexo clean</p>\n<ul>\n<li>清除編譯後的 <strong>public資料夾</strong></li>\n</ul>\n</li>\n<li><p>hexo d[eploy]</p>\n<ul>\n<li>部屬到指定的 Server</li>\n<li>要在 _confing.yml 的 deploy 選項設定</li>\n</ul>\n</li>\n<li><p>hexo s[erver]</p>\n<ul>\n<li>以本機啟動 Server</li>\n<li>默認 Url : <code>localhost:4000</code></li>\n</ul>\n</li>\n<li><p>hexo new [layout] &lt; title &gt;</p>\n<ul>\n<li>建立新文章</li>\n<li>內建三種 <a href=\"#Layout\">layout</a></li>\n<li>預設為 post <strong>layout</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><ul>\n<li>針對這專案 blog 的設定</li>\n<li>格式<ul>\n<li>以 <strong>key： <code>[空白]</code> value</strong> </li>\n<li><strong>value</strong> 跟 <strong>:</strong> 之間一定要空白，不然會報錯<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>分類 <code>目前有用到的</code><ul>\n<li>Site<ul>\n<li>Blog 資訊<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">TestBlog2</span>    <span class=\"comment\"># 部落格名稱</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">''</span>    </span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">''</span>     <span class=\"comment\"># 描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Tony</span>    <span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span>    <span class=\"comment\">#語系</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>URL<ul>\n<li>Blog 路由設定<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span> <span class=\"comment\"># Domain</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span> <span class=\"comment\"># 此網站的根目錄</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span> <span class=\"comment\"># 文章固定網址</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\"><span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\"><span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Extension<ul>\n<li>額外添加插件，目前用到 theme<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Deploymemt<ul>\n<li>部署到哪個地方 ， 目前使用 <strong>Github-Pages</strong><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">#類型</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:RobYang203/TestBlog2.git</span> <span class=\"comment\">#要部署到哪個 repo</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#repo 的分支</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><ul>\n<li>預設三種，提供不同的寫作模式<ul>\n<li>post<ul>\n<li>會發佈在主頁 <strong>(Home)</strong> 上</li>\n<li>會在 <strong>source/_post</strong> 資料夾下新增 <code>&lt;title&gt;.md</code>檔</li>\n</ul>\n</li>\n<li>page<ul>\n<li>獨立新增一頁，路徑會是 domain/title</li>\n<li>會在 <strong>source/</strong> 路徑 ，新增 <code>&lt;title&gt;</code> 資料夾，裡面會預設放有 <code>index.md</code> </li>\n</ul>\n</li>\n<li>draft<ul>\n<li>草稿類型，不會顯示在頁面上</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Categories-amp-Tags\"><a href=\"#Categories-amp-Tags\" class=\"headerlink\" title=\"Categories &amp; Tags\"></a>Categories &amp; Tags</h1><ul>\n<li>可提供文章分類的功能</li>\n<li><strong>Categories</strong> 每篇文章只能有一個 ， <strong>Tags</strong> 可以有多個</li>\n<li>只能在 Post文章有</li>\n<li>新增 <strong>Page</strong> 來保存 <blockquote>\n<p>hexo new page [ tags | categories ]</p>\n</blockquote>\n</li>\n<li>再新增文章加入 <code>type</code><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new Page Namw</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: [\"tags\" | \"categories\"] </span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>之後當新增文章時，在資訊頁面添加上<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Page</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"bullet\">- </span>category1</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag1</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag2</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag3</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"NexT-主題\"><a href=\"#NexT-主題\" class=\"headerlink\" title=\"NexT 主題\"></a>NexT 主題</h1><ul>\n<li><p>從 <a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">HexT Github</a>下載</p>\n</li>\n<li><p>下載後解壓縮，命名資料夾 <code>Next</code></p>\n</li>\n<li><p>移置 <code>ProjectName/theme</code> 資料夾下</p>\n</li>\n<li><p>設定 _config.yml， <strong>theme</strong> 改為 <code>Next</code> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"部屬到-Github-上\"><a href=\"#部屬到-Github-上\" class=\"headerlink\" title=\"部屬到 Github 上\"></a>部屬到 Github 上</h2></li>\n<li><p>修改 <code>_config.yml</code>  <strong>deploy 選項</strong></p>\n<ul>\n<li>type 類型</li>\n<li>repo 儲存庫</li>\n<li>branch 分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git </span><br><span class=\"line\">    repo: git@github.com:yourusername&#x2F;yourprojectname.git</span><br><span class=\"line\">    branch: gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>設定完後，輸入 <code>hexo d</code> 會自動 push 到指定的 <strong>github branch</strong></p>\n</li>\n</ul>\n<h2 id=\"Q-List\"><a href=\"#Q-List\" class=\"headerlink\" title=\"Q-List\"></a>Q-List</h2><ul>\n<li><p>Q.更新文章後發現內容沒變</p>\n<blockquote>\n<p>A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次</p>\n</blockquote>\n</li>\n<li><p>Q. </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h2><ul>\n<li>可以自動建立一個 Blog </li>\n<li>可以把生成的 Blog 檔案放在 Git Page 裡</li>\n<li>安裝 <code>(需要先安裝 npm)</code><blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li>有多種指令可以來對 Blog 作設定</li>\n</ul>\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><blockquote>\n<p><code>[content]</code> 裡的內容代表可以省略</p>\n</blockquote>\n<ul>\n<li><blockquote>\n<p>hexo init [project name] </p>\n</blockquote>\n<ul>\n<li>初始化          <ol>\n<li><strong>project name</strong> : 這 Blog 專案的名稱 </li>\n<li>有填寫的話，會建立一個 <strong>project name</strong> 的資料夾 </li>\n<li>沒有填寫的話，則會在當下資料夾建立專案 <em>(非空白會報錯)</em></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>hexo g[enerate]</p>\n<ul>\n<li>編譯檔案為 <strong>html 文件</strong></li>\n<li>編譯後會新增 <strong>public資料夾</strong> 在 <code>專案根目錄</code></li>\n</ul>\n</li>\n<li><p>hexo clean</p>\n<ul>\n<li>清除編譯後的 <strong>public資料夾</strong></li>\n</ul>\n</li>\n<li><p>hexo d[eploy]</p>\n<ul>\n<li>部屬到指定的 Server</li>\n<li>要在 _confing.yml 的 deploy 選項設定</li>\n</ul>\n</li>\n<li><p>hexo s[erver]</p>\n<ul>\n<li>以本機啟動 Server</li>\n<li>默認 Url : <code>localhost:4000</code></li>\n</ul>\n</li>\n<li><p>hexo new [layout] &lt; title &gt;</p>\n<ul>\n<li>建立新文章</li>\n<li>內建三種 <a href=\"#Layout\">layout</a></li>\n<li>預設為 post <strong>layout</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><ul>\n<li>針對這專案 blog 的設定</li>\n<li>格式<ul>\n<li>以 <strong>key： <code>[空白]</code> value</strong> </li>\n<li><strong>value</strong> 跟 <strong>:</strong> 之間一定要空白，不然會報錯<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>分類 <code>目前有用到的</code><ul>\n<li>Site<ul>\n<li>Blog 資訊<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">TestBlog2</span>    <span class=\"comment\"># 部落格名稱</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">''</span>    </span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">''</span>     <span class=\"comment\"># 描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Tony</span>    <span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span>    <span class=\"comment\">#語系</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>URL<ul>\n<li>Blog 路由設定<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://robyang203.github.io/</span> <span class=\"comment\"># Domain</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/TestBlog2</span> <span class=\"comment\"># 此網站的根目錄</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span> <span class=\"comment\"># 文章固定網址</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"attr\">pretty_urls:</span></span><br><span class=\"line\"><span class=\"attr\">trailing_index:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class=\"line\"><span class=\"attr\">trailing_html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Extension<ul>\n<li>額外添加插件，目前用到 theme<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Deploymemt<ul>\n<li>部署到哪個地方 ， 目前使用 <strong>Github-Pages</strong><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">#類型</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:RobYang203/TestBlog2.git</span> <span class=\"comment\">#要部署到哪個 repo</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#repo 的分支</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><ul>\n<li>預設三種，提供不同的寫作模式<ul>\n<li>post<ul>\n<li>會發佈在主頁 <strong>(Home)</strong> 上</li>\n<li>會在 <strong>source/_post</strong> 資料夾下新增 <code>&lt;title&gt;.md</code>檔</li>\n</ul>\n</li>\n<li>page<ul>\n<li>獨立新增一頁，路徑會是 domain/title</li>\n<li>會在 <strong>source/</strong> 路徑 ，新增 <code>&lt;title&gt;</code> 資料夾，裡面會預設放有 <code>index.md</code> </li>\n</ul>\n</li>\n<li>draft<ul>\n<li>草稿類型，不會顯示在頁面上</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Categories-amp-Tags\"><a href=\"#Categories-amp-Tags\" class=\"headerlink\" title=\"Categories &amp; Tags\"></a>Categories &amp; Tags</h1><ul>\n<li>可提供文章分類的功能</li>\n<li><strong>Categories</strong> 每篇文章只能有一個 ， <strong>Tags</strong> 可以有多個</li>\n<li>只能在 Post文章有</li>\n<li>新增 <strong>Page</strong> 來保存 <blockquote>\n<p>hexo new page [ tags | categories ]</p>\n</blockquote>\n</li>\n<li>再新增文章加入 <code>type</code><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new Page Namw</span><br><span class=\"line\">date: 2017-05-27 13:47:40</span><br><span class=\"line\">type: [\"tags\" | \"categories\"] </span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li>之後當新增文章時，在資訊頁面添加上<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Page</span><br><span class=\"line\">date: 2017-05-26 12:12:57</span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"bullet\">- </span>category1</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag1</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag2</span><br><span class=\"line\"><span class=\"bullet\">- </span>tag3</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"NexT-主題\"><a href=\"#NexT-主題\" class=\"headerlink\" title=\"NexT 主題\"></a>NexT 主題</h1><ul>\n<li><p>從 <a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">HexT Github</a>下載</p>\n</li>\n<li><p>下載後解壓縮，命名資料夾 <code>Next</code></p>\n</li>\n<li><p>移置 <code>ProjectName/theme</code> 資料夾下</p>\n</li>\n<li><p>設定 _config.yml， <strong>theme</strong> 改為 <code>Next</code> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">Next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"部屬到-Github-上\"><a href=\"#部屬到-Github-上\" class=\"headerlink\" title=\"部屬到 Github 上\"></a>部屬到 Github 上</h2></li>\n<li><p>修改 <code>_config.yml</code>  <strong>deploy 選項</strong></p>\n<ul>\n<li>type 類型</li>\n<li>repo 儲存庫</li>\n<li>branch 分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git </span><br><span class=\"line\">    repo: git@github.com:yourusername&#x2F;yourprojectname.git</span><br><span class=\"line\">    branch: gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>設定完後，輸入 <code>hexo d</code> 會自動 push 到指定的 <strong>github branch</strong></p>\n</li>\n</ul>\n<h2 id=\"Q-List\"><a href=\"#Q-List\" class=\"headerlink\" title=\"Q-List\"></a>Q-List</h2><ul>\n<li><p>Q.更新文章後發現內容沒變</p>\n<blockquote>\n<p>A. 有變動文章時會有機率被 cache ，所以最好更新文章後清一次</p>\n</blockquote>\n</li>\n<li><p>Q. </p>\n</li>\n</ul>\n"},{"title":"JAVA-JPA-Setting","date":"2020-02-25T17:39:58.000Z","_content":"\n## JPA (Java Persistence API)\n\n* Java 持久化 API\n* 是 Java 對 **ORM(Object-Relation Mapping)** 做出的規範，一個`介面(Interface)`\n* 讓 `Model class`跟 `DB Table` 做映射,取代直接跟 DB要資料\n* 以 **hibernate**實作 JPA\n* 設定 `persistence.xml`\n    ```xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <persistence version=\"1.0\" \n    xmlns=\"http://java.sun.com/xml/ns/persistence\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n    <persistence-unit name=\"ContactPU\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n        <class>Contact.Contact</class>\n        <properties>\n        <property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.NoCacheProvider\"/>\n        <property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"hibernate.connection.url\" value=\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"/>\n        <property name=\"hibernate.connection.username\" value=\"資料庫帳號\"/>\n        <property name=\"hibernate.connection.password\" value=\"資料庫密碼\"/>\n        </properties>\n    </persistence-unit>\n    </persistence>\n    ```\n* 建立 Table 對 物件的映射\n    ```java\n    @Entity\n    public class Customer {\n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        private Long id;\n        private String name;\n        private String email;\n        private String address;\n        \n        protected Customer() {\n            \n        }\n        \n        protected Customer(String name,String email,String address) {\n            this.name = name;\n            this.address = address;\n            this.email = email;\t\t\n        }\n        \n        public Long getId() {\n            return this.id;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n        public void setName(String name) {\n            this.name=name;\n        }\n        \n        public String getEmail() {\n            return this.email;\n        }\n        public void setEmail(String email) {\n            this.email=email;\n        }\n        \n        public String getAddress() {\n            return this.address;\n        }\n        public void setAddress(String address) {\n            this.address=address;\n        }\n\n    }\n    ```\n* 建立 `CrudRepository`\n    ```java\n    public interface CustomerRepository extends CrudRepository<Customer, Long>{\n\n        //要做複雜的 Query\n        @Query(value = \n                \"SELECT c \"\n                + \"FROM Customer c \"\n                + \"WHERE c.name LIKE '%' || :keyword || '%'\"\n                + \" OR c.email LIKE '%' || :keyword || '%'\"\n                + \" OR c.address LIKE '%' || :keyword || '%'\")\n        public List<Customer> search(@Param(\"keyword\") String keyword);\n    }\n    ```\n* 建立 `Service`\n\n    ```java\n\n    @Service\n    @Transactional\n    public class CustomerService {\n        @Autowired CustomerRepository repo;\n        \n        public void save(Customer customer) {\n            repo.save(customer);\t\t\n        }\n        \n        public List<Customer> listAll() {\n            return (List<Customer>)repo.findAll();\t\t\n        }\n        \n        public Customer get(Long Id) {\n            return repo.findById(Id).get();\n        }\n        \n        public void delete(Long Id) {\n            repo.deleteById(Id);\n        }\n        \n        public List<Customer> search(String keyword) {\n            return repo.search(keyword);\n        }\n    }\n    ```\n\n ","source":"JAVA-JPA-Setting/index.md","raw":"---\ntitle: JAVA-JPA-Setting\ndate: 2020-02-26 01:39:58\n---\n\n## JPA (Java Persistence API)\n\n* Java 持久化 API\n* 是 Java 對 **ORM(Object-Relation Mapping)** 做出的規範，一個`介面(Interface)`\n* 讓 `Model class`跟 `DB Table` 做映射,取代直接跟 DB要資料\n* 以 **hibernate**實作 JPA\n* 設定 `persistence.xml`\n    ```xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <persistence version=\"1.0\" \n    xmlns=\"http://java.sun.com/xml/ns/persistence\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n    <persistence-unit name=\"ContactPU\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n        <class>Contact.Contact</class>\n        <properties>\n        <property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.NoCacheProvider\"/>\n        <property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"hibernate.connection.url\" value=\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"/>\n        <property name=\"hibernate.connection.username\" value=\"資料庫帳號\"/>\n        <property name=\"hibernate.connection.password\" value=\"資料庫密碼\"/>\n        </properties>\n    </persistence-unit>\n    </persistence>\n    ```\n* 建立 Table 對 物件的映射\n    ```java\n    @Entity\n    public class Customer {\n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        private Long id;\n        private String name;\n        private String email;\n        private String address;\n        \n        protected Customer() {\n            \n        }\n        \n        protected Customer(String name,String email,String address) {\n            this.name = name;\n            this.address = address;\n            this.email = email;\t\t\n        }\n        \n        public Long getId() {\n            return this.id;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n        public void setName(String name) {\n            this.name=name;\n        }\n        \n        public String getEmail() {\n            return this.email;\n        }\n        public void setEmail(String email) {\n            this.email=email;\n        }\n        \n        public String getAddress() {\n            return this.address;\n        }\n        public void setAddress(String address) {\n            this.address=address;\n        }\n\n    }\n    ```\n* 建立 `CrudRepository`\n    ```java\n    public interface CustomerRepository extends CrudRepository<Customer, Long>{\n\n        //要做複雜的 Query\n        @Query(value = \n                \"SELECT c \"\n                + \"FROM Customer c \"\n                + \"WHERE c.name LIKE '%' || :keyword || '%'\"\n                + \" OR c.email LIKE '%' || :keyword || '%'\"\n                + \" OR c.address LIKE '%' || :keyword || '%'\")\n        public List<Customer> search(@Param(\"keyword\") String keyword);\n    }\n    ```\n* 建立 `Service`\n\n    ```java\n\n    @Service\n    @Transactional\n    public class CustomerService {\n        @Autowired CustomerRepository repo;\n        \n        public void save(Customer customer) {\n            repo.save(customer);\t\t\n        }\n        \n        public List<Customer> listAll() {\n            return (List<Customer>)repo.findAll();\t\t\n        }\n        \n        public Customer get(Long Id) {\n            return repo.findById(Id).get();\n        }\n        \n        public void delete(Long Id) {\n            repo.deleteById(Id);\n        }\n        \n        public List<Customer> search(String keyword) {\n            return repo.search(keyword);\n        }\n    }\n    ```\n\n ","updated":"2020-02-26T20:32:55.969Z","path":"JAVA-JPA-Setting/index.html","comments":1,"layout":"page","_id":"ck8izquw40006n5jt6j1ff7cx","content":"<h2 id=\"JPA-Java-Persistence-API\"><a href=\"#JPA-Java-Persistence-API\" class=\"headerlink\" title=\"JPA (Java Persistence API)\"></a>JPA (Java Persistence API)</h2><ul>\n<li><p>Java 持久化 API</p>\n</li>\n<li><p>是 Java 對 <strong>ORM(Object-Relation Mapping)</strong> 做出的規範，一個<code>介面(Interface)</code></p>\n</li>\n<li><p>讓 <code>Model class</code>跟 <code>DB Table</code> 做映射,取代直接跟 DB要資料</p>\n</li>\n<li><p>以 <strong>hibernate</strong>實作 JPA</p>\n</li>\n<li><p>設定 <code>persistence.xml</code></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence-unit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ContactPU\"</span> <span class=\"attr\">transaction-type</span>=<span class=\"string\">\"RESOURCE_LOCAL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span>&gt;</span>Contact.Contact<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.cache.NoCacheProvider\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫帳號\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫密碼\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence-unit</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立 Table 對 物件的映射</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">(String name,String email,String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email=email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address=address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>CrudRepository</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Customer</span>, <span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要做複雜的 Query</span></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(value = </span><br><span class=\"line\">            <span class=\"string\">\"SELECT c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"FROM Customer c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"WHERE c.name LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.email LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.address LIKE '%' || :keyword || '%'\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(@Param(<span class=\"string\">\"keyword\"</span>)</span> String keyword)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>Service</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> CustomerRepository repo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        repo.save(customer);\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (List&lt;Customer&gt;)repo.findAll();\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Customer <span class=\"title\">get</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.findById(Id).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        repo.deleteById(Id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(String keyword)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.search(keyword);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JPA-Java-Persistence-API\"><a href=\"#JPA-Java-Persistence-API\" class=\"headerlink\" title=\"JPA (Java Persistence API)\"></a>JPA (Java Persistence API)</h2><ul>\n<li><p>Java 持久化 API</p>\n</li>\n<li><p>是 Java 對 <strong>ORM(Object-Relation Mapping)</strong> 做出的規範，一個<code>介面(Interface)</code></p>\n</li>\n<li><p>讓 <code>Model class</code>跟 <code>DB Table</code> 做映射,取代直接跟 DB要資料</p>\n</li>\n<li><p>以 <strong>hibernate</strong>實作 JPA</p>\n</li>\n<li><p>設定 <code>persistence.xml</code></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">persistence-unit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ContactPU\"</span> <span class=\"attr\">transaction-type</span>=<span class=\"string\">\"RESOURCE_LOCAL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span>&gt;</span>Contact.Contact<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.cache.NoCacheProvider\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://資料庫-IP:資料庫服務-TCP-埠號/資料庫名稱\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫帳號\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"資料庫密碼\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence-unit</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立 Table 對 物件的映射</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Customer</span><span class=\"params\">(String name,String email,String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email=email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address=address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>CrudRepository</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Customer</span>, <span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要做複雜的 Query</span></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(value = </span><br><span class=\"line\">            <span class=\"string\">\"SELECT c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"FROM Customer c \"</span></span><br><span class=\"line\">            + <span class=\"string\">\"WHERE c.name LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.email LIKE '%' || :keyword || '%'\"</span></span><br><span class=\"line\">            + <span class=\"string\">\" OR c.address LIKE '%' || :keyword || '%'\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(@Param(<span class=\"string\">\"keyword\"</span>)</span> String keyword)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>Service</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> CustomerRepository repo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        repo.save(customer);\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (List&lt;Customer&gt;)repo.findAll();\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Customer <span class=\"title\">get</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.findById(Id).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long Id)</span> </span>&#123;</span><br><span class=\"line\">        repo.deleteById(Id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">search</span><span class=\"params\">(String keyword)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repo.search(keyword);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"JAVA-Spring-QList","date":"2020-01-29T17:21:11.000Z","_content":"* 關於`Inversion Of Control (IOC)`\n    * 控制(流程)反轉\n    * 程式整體的架構流程由開發者轉移到第三方來做控制\n* 什麼是`依賴 (Dependency)`\n    * 當一個類別需要實作其他類別時，就是**依賴(Dependency)** 關係\n* 什麼是`Dependency Injection`\n    * 可使類別之間的耦合不那麼緊密\n    * 對於在類別要使用另外的類別採取**注入**的方式\n    * **注入**方式可以是用setter取得...等，採取由外部供應\n        * 建構子注入\n        * setter注入\n        * interface注入\n    * 類別裡不主動實作其他類別\n* 什麼是`POJO`\n* 什麼是`bean`\n* 什麼是`JSP`\n* 什麼是`JPA`\n* 什麼是`hibernate`\n* 什麼是`contextConfigLocation`\n* `context-param` & `init-param` 區別\n* `dispather-servlet.xml` & `applcationContext.xml` 差別\n* 在儲存 `web.xml`loading會很久\n* 關於在 `Maven Project` 找不到 **Run Server**\n* 關於 `The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application`\n    > 指定 uri: [http://java.sun.com/jsp/jstl/core] 有重複無法解析，刪除多餘的就可以了\n* 關於 Error org.springframework.beans.factory.BeanDefinitionStoreException ...ASM ClassReader failed to parse class\n    > JRE 版本跟 Spring版本對不上\n* 關於 Java compiler level does not match \n    > 到專案根目錄找`.setting`資料夾(隱藏)，找 `org.eclipse.wst.common.project.facet.core.xml` 修改 java版本\n\n* 關於 Bean property 'name' is not readable or has an invalid getter method\n    > 沒有設定變數 `name`的 getter | setter\n* 關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer\n    > 找不到 WebApplicationInitializer ，是因為用 Maven\n    * 解決辦法\n        * 在管理資源，在專案右鍵 -> properties -> Deployment Assembly -> 按下Add \n        * 選擇 Java Build Path Entries\n        * 選擇 Maven Dependencies  \n        * Apply\n    * 參考資料\n        * https://dotblogs.com.tw/raylee/2019/04/22/104236\n\n* 關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named\n    > 因為沒讀到 persistence.xml ，要放在 `META-INF`資料夾下，資料夾要在`Java Build Path` > `Source`下新增\n\n* 關於 WebAppInitializer class 在 Server 啟動時，沒有被實作\n    * Servlet Container 要支援 **Servlet 3.0**\n    * 實作 `SpringServletContainerInitializer`\n    ``` Java\n    @HandlesTypes({WebApplicationInitializer.class})  \n    public class SpringServletContainerInitializer implements ServletContainerInitializer{\n        @Override\n        public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n\n            \n        }\n    }\n    ```\n    * 在 `src`底下新增 `resources` > `META-INF` > `services`\n        * 新建檔案 `javax.servlet.ServletContainerInitializer`\n        * 內容輸入完整的 `SpringServletContainerInitializer`\n   \n\n* Q. Server Tomcat v9.0 Server at localhost failed to start.\n    > A. 發現是專案出現 **More than one fragment with the name [spring_web] was found. This is not legal ...”**\n\n* Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal ...”\n    > A. 在 web.xml 的 `web-app`加上 `<absolute-ordering />`\n\n* Q. 什麼是 `<absolute-ordering />`\n    > A. 請參考 https://openhome.cc/Gossip/ServletJSP/Pluggability.html\n\n\n    \n","source":"JAVA-Spring-QList/index.md","raw":"---\ntitle: JAVA-Spring-QList\ndate: 2020-01-30 01:21:11\n---\n* 關於`Inversion Of Control (IOC)`\n    * 控制(流程)反轉\n    * 程式整體的架構流程由開發者轉移到第三方來做控制\n* 什麼是`依賴 (Dependency)`\n    * 當一個類別需要實作其他類別時，就是**依賴(Dependency)** 關係\n* 什麼是`Dependency Injection`\n    * 可使類別之間的耦合不那麼緊密\n    * 對於在類別要使用另外的類別採取**注入**的方式\n    * **注入**方式可以是用setter取得...等，採取由外部供應\n        * 建構子注入\n        * setter注入\n        * interface注入\n    * 類別裡不主動實作其他類別\n* 什麼是`POJO`\n* 什麼是`bean`\n* 什麼是`JSP`\n* 什麼是`JPA`\n* 什麼是`hibernate`\n* 什麼是`contextConfigLocation`\n* `context-param` & `init-param` 區別\n* `dispather-servlet.xml` & `applcationContext.xml` 差別\n* 在儲存 `web.xml`loading會很久\n* 關於在 `Maven Project` 找不到 **Run Server**\n* 關於 `The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application`\n    > 指定 uri: [http://java.sun.com/jsp/jstl/core] 有重複無法解析，刪除多餘的就可以了\n* 關於 Error org.springframework.beans.factory.BeanDefinitionStoreException ...ASM ClassReader failed to parse class\n    > JRE 版本跟 Spring版本對不上\n* 關於 Java compiler level does not match \n    > 到專案根目錄找`.setting`資料夾(隱藏)，找 `org.eclipse.wst.common.project.facet.core.xml` 修改 java版本\n\n* 關於 Bean property 'name' is not readable or has an invalid getter method\n    > 沒有設定變數 `name`的 getter | setter\n* 關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer\n    > 找不到 WebApplicationInitializer ，是因為用 Maven\n    * 解決辦法\n        * 在管理資源，在專案右鍵 -> properties -> Deployment Assembly -> 按下Add \n        * 選擇 Java Build Path Entries\n        * 選擇 Maven Dependencies  \n        * Apply\n    * 參考資料\n        * https://dotblogs.com.tw/raylee/2019/04/22/104236\n\n* 關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named\n    > 因為沒讀到 persistence.xml ，要放在 `META-INF`資料夾下，資料夾要在`Java Build Path` > `Source`下新增\n\n* 關於 WebAppInitializer class 在 Server 啟動時，沒有被實作\n    * Servlet Container 要支援 **Servlet 3.0**\n    * 實作 `SpringServletContainerInitializer`\n    ``` Java\n    @HandlesTypes({WebApplicationInitializer.class})  \n    public class SpringServletContainerInitializer implements ServletContainerInitializer{\n        @Override\n        public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n\n            \n        }\n    }\n    ```\n    * 在 `src`底下新增 `resources` > `META-INF` > `services`\n        * 新建檔案 `javax.servlet.ServletContainerInitializer`\n        * 內容輸入完整的 `SpringServletContainerInitializer`\n   \n\n* Q. Server Tomcat v9.0 Server at localhost failed to start.\n    > A. 發現是專案出現 **More than one fragment with the name [spring_web] was found. This is not legal ...”**\n\n* Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal ...”\n    > A. 在 web.xml 的 `web-app`加上 `<absolute-ordering />`\n\n* Q. 什麼是 `<absolute-ordering />`\n    > A. 請參考 https://openhome.cc/Gossip/ServletJSP/Pluggability.html\n\n\n    \n","updated":"2020-02-05T19:59:52.770Z","path":"JAVA-Spring-QList/index.html","comments":1,"layout":"page","_id":"ck8izquw60008n5jt5szz6noj","content":"<ul>\n<li><p>關於<code>Inversion Of Control (IOC)</code></p>\n<ul>\n<li>控制(流程)反轉</li>\n<li>程式整體的架構流程由開發者轉移到第三方來做控制</li>\n</ul>\n</li>\n<li><p>什麼是<code>依賴 (Dependency)</code></p>\n<ul>\n<li>當一個類別需要實作其他類別時，就是<strong>依賴(Dependency)</strong> 關係</li>\n</ul>\n</li>\n<li><p>什麼是<code>Dependency Injection</code></p>\n<ul>\n<li>可使類別之間的耦合不那麼緊密</li>\n<li>對於在類別要使用另外的類別採取<strong>注入</strong>的方式</li>\n<li><strong>注入</strong>方式可以是用setter取得…等，採取由外部供應<ul>\n<li>建構子注入</li>\n<li>setter注入</li>\n<li>interface注入</li>\n</ul>\n</li>\n<li>類別裡不主動實作其他類別</li>\n</ul>\n</li>\n<li><p>什麼是<code>POJO</code></p>\n</li>\n<li><p>什麼是<code>bean</code></p>\n</li>\n<li><p>什麼是<code>JSP</code></p>\n</li>\n<li><p>什麼是<code>JPA</code></p>\n</li>\n<li><p>什麼是<code>hibernate</code></p>\n</li>\n<li><p>什麼是<code>contextConfigLocation</code></p>\n</li>\n<li><p><code>context-param</code> &amp; <code>init-param</code> 區別</p>\n</li>\n<li><p><code>dispather-servlet.xml</code> &amp; <code>applcationContext.xml</code> 差別</p>\n</li>\n<li><p>在儲存 <code>web.xml</code>loading會很久</p>\n</li>\n<li><p>關於在 <code>Maven Project</code> 找不到 <strong>Run Server</strong></p>\n</li>\n<li><p>關於 <code>The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application</code></p>\n<blockquote>\n<p>指定 uri: [<a href=\"http://java.sun.com/jsp/jstl/core]\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core]</a> 有重複無法解析，刪除多餘的就可以了</p>\n</blockquote>\n</li>\n<li><p>關於 Error org.springframework.beans.factory.BeanDefinitionStoreException …ASM ClassReader failed to parse class</p>\n<blockquote>\n<p>JRE 版本跟 Spring版本對不上</p>\n</blockquote>\n</li>\n<li><p>關於 Java compiler level does not match </p>\n<blockquote>\n<p>到專案根目錄找<code>.setting</code>資料夾(隱藏)，找 <code>org.eclipse.wst.common.project.facet.core.xml</code> 修改 java版本</p>\n</blockquote>\n</li>\n<li><p>關於 Bean property ‘name’ is not readable or has an invalid getter method</p>\n<blockquote>\n<p>沒有設定變數 <code>name</code>的 getter | setter</p>\n</blockquote>\n</li>\n<li><p>關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer</p>\n<blockquote>\n<p>找不到 WebApplicationInitializer ，是因為用 Maven</p>\n</blockquote>\n<ul>\n<li>解決辦法<ul>\n<li>在管理資源，在專案右鍵 -&gt; properties -&gt; Deployment Assembly -&gt; 按下Add </li>\n<li>選擇 Java Build Path Entries</li>\n<li>選擇 Maven Dependencies  </li>\n<li>Apply</li>\n</ul>\n</li>\n<li>參考資料<ul>\n<li><a href=\"https://dotblogs.com.tw/raylee/2019/04/22/104236\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/raylee/2019/04/22/104236</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named</p>\n<blockquote>\n<p>因為沒讀到 persistence.xml ，要放在 <code>META-INF</code>資料夾下，資料夾要在<code>Java Build Path</code> &gt; <code>Source</code>下新增</p>\n</blockquote>\n</li>\n<li><p>關於 WebAppInitializer class 在 Server 啟動時，沒有被實作</p>\n<ul>\n<li>Servlet Container 要支援 <strong>Servlet 3.0</strong></li>\n<li>實作 <code>SpringServletContainerInitializer</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>src</code>底下新增 <code>resources</code> &gt; <code>META-INF</code> &gt; <code>services</code><ul>\n<li>新建檔案 <code>javax.servlet.ServletContainerInitializer</code></li>\n<li>內容輸入完整的 <code>SpringServletContainerInitializer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Q. Server Tomcat v9.0 Server at localhost failed to start.</p>\n<blockquote>\n<p>A. 發現是專案出現 <strong>More than one fragment with the name [spring_web] was found. This is not legal …”</strong></p>\n</blockquote>\n</li>\n<li><p>Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal …”</p>\n<blockquote>\n<p>A. 在 web.xml 的 <code>web-app</code>加上 <code>&lt;absolute-ordering /&gt;</code></p>\n</blockquote>\n</li>\n<li><p>Q. 什麼是 <code>&lt;absolute-ordering /&gt;</code></p>\n<blockquote>\n<p>A. 請參考 <a href=\"https://openhome.cc/Gossip/ServletJSP/Pluggability.html\" target=\"_blank\" rel=\"noopener\">https://openhome.cc/Gossip/ServletJSP/Pluggability.html</a></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>關於<code>Inversion Of Control (IOC)</code></p>\n<ul>\n<li>控制(流程)反轉</li>\n<li>程式整體的架構流程由開發者轉移到第三方來做控制</li>\n</ul>\n</li>\n<li><p>什麼是<code>依賴 (Dependency)</code></p>\n<ul>\n<li>當一個類別需要實作其他類別時，就是<strong>依賴(Dependency)</strong> 關係</li>\n</ul>\n</li>\n<li><p>什麼是<code>Dependency Injection</code></p>\n<ul>\n<li>可使類別之間的耦合不那麼緊密</li>\n<li>對於在類別要使用另外的類別採取<strong>注入</strong>的方式</li>\n<li><strong>注入</strong>方式可以是用setter取得…等，採取由外部供應<ul>\n<li>建構子注入</li>\n<li>setter注入</li>\n<li>interface注入</li>\n</ul>\n</li>\n<li>類別裡不主動實作其他類別</li>\n</ul>\n</li>\n<li><p>什麼是<code>POJO</code></p>\n</li>\n<li><p>什麼是<code>bean</code></p>\n</li>\n<li><p>什麼是<code>JSP</code></p>\n</li>\n<li><p>什麼是<code>JPA</code></p>\n</li>\n<li><p>什麼是<code>hibernate</code></p>\n</li>\n<li><p>什麼是<code>contextConfigLocation</code></p>\n</li>\n<li><p><code>context-param</code> &amp; <code>init-param</code> 區別</p>\n</li>\n<li><p><code>dispather-servlet.xml</code> &amp; <code>applcationContext.xml</code> 差別</p>\n</li>\n<li><p>在儲存 <code>web.xml</code>loading會很久</p>\n</li>\n<li><p>關於在 <code>Maven Project</code> 找不到 <strong>Run Server</strong></p>\n</li>\n<li><p>關於 <code>The absolute uri: [http://java.sun.com/jsp/jstl/core] cannot be resolved in either web.xml or the jar files deployed with this application</code></p>\n<blockquote>\n<p>指定 uri: [<a href=\"http://java.sun.com/jsp/jstl/core]\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core]</a> 有重複無法解析，刪除多餘的就可以了</p>\n</blockquote>\n</li>\n<li><p>關於 Error org.springframework.beans.factory.BeanDefinitionStoreException …ASM ClassReader failed to parse class</p>\n<blockquote>\n<p>JRE 版本跟 Spring版本對不上</p>\n</blockquote>\n</li>\n<li><p>關於 Java compiler level does not match </p>\n<blockquote>\n<p>到專案根目錄找<code>.setting</code>資料夾(隱藏)，找 <code>org.eclipse.wst.common.project.facet.core.xml</code> 修改 java版本</p>\n</blockquote>\n</li>\n<li><p>關於 Bean property ‘name’ is not readable or has an invalid getter method</p>\n<blockquote>\n<p>沒有設定變數 <code>name</code>的 getter | setter</p>\n</blockquote>\n</li>\n<li><p>關於 java.lang.ClassNotFoundException: org.springframework.web.WebApplicationInitializer</p>\n<blockquote>\n<p>找不到 WebApplicationInitializer ，是因為用 Maven</p>\n</blockquote>\n<ul>\n<li>解決辦法<ul>\n<li>在管理資源，在專案右鍵 -&gt; properties -&gt; Deployment Assembly -&gt; 按下Add </li>\n<li>選擇 Java Build Path Entries</li>\n<li>選擇 Maven Dependencies  </li>\n<li>Apply</li>\n</ul>\n</li>\n<li>參考資料<ul>\n<li><a href=\"https://dotblogs.com.tw/raylee/2019/04/22/104236\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/raylee/2019/04/22/104236</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>關於 javax.persistence.PersistenceException: No Persistence provider for EntityManager named</p>\n<blockquote>\n<p>因為沒讀到 persistence.xml ，要放在 <code>META-INF</code>資料夾下，資料夾要在<code>Java Build Path</code> &gt; <code>Source</code>下新增</p>\n</blockquote>\n</li>\n<li><p>關於 WebAppInitializer class 在 Server 啟動時，沒有被實作</p>\n<ul>\n<li>Servlet Container 要支援 <strong>Servlet 3.0</strong></li>\n<li>實作 <code>SpringServletContainerInitializer</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>src</code>底下新增 <code>resources</code> &gt; <code>META-INF</code> &gt; <code>services</code><ul>\n<li>新建檔案 <code>javax.servlet.ServletContainerInitializer</code></li>\n<li>內容輸入完整的 <code>SpringServletContainerInitializer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Q. Server Tomcat v9.0 Server at localhost failed to start.</p>\n<blockquote>\n<p>A. 發現是專案出現 <strong>More than one fragment with the name [spring_web] was found. This is not legal …”</strong></p>\n</blockquote>\n</li>\n<li><p>Q. 出現 More than one fragment with the name [spring_web] was found. This is not legal …”</p>\n<blockquote>\n<p>A. 在 web.xml 的 <code>web-app</code>加上 <code>&lt;absolute-ordering /&gt;</code></p>\n</blockquote>\n</li>\n<li><p>Q. 什麼是 <code>&lt;absolute-ordering /&gt;</code></p>\n<blockquote>\n<p>A. 請參考 <a href=\"https://openhome.cc/Gossip/ServletJSP/Pluggability.html\" target=\"_blank\" rel=\"noopener\">https://openhome.cc/Gossip/ServletJSP/Pluggability.html</a></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"JAVA Servlet","date":"2020-01-24T19:54:46.000Z","_content":"# JAVA Servlet ","source":"JAVA-ServletTech/index.md","raw":"---\ntitle: JAVA Servlet \ndate: 2020-01-25 03:54:46\n---\n# JAVA Servlet ","updated":"2020-01-24T19:55:22.014Z","path":"JAVA-ServletTech/index.html","comments":1,"layout":"page","_id":"ck8izquw8000an5jtfnu3d58w","content":"<h1 id=\"JAVA-Servlet\"><a href=\"#JAVA-Servlet\" class=\"headerlink\" title=\"JAVA Servlet\"></a>JAVA Servlet</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-Servlet\"><a href=\"#JAVA-Servlet\" class=\"headerlink\" title=\"JAVA Servlet\"></a>JAVA Servlet</h1>"},{"title":"JAVA-Spring Simple Test","date":"2020-01-26T08:20:11.000Z","_content":"## Spring 簡單測試專案\n* 新增 **Java Project**\n* 建立測試物件\n    * 建立 IGun 介面，設定 Gun 系列標準\n    * 以 IGun 為基礎，建立 FireGun & IceGun\n* 建立 POJO\n    * 建立 Role class \n        * 參數\n            * name\n            * Gun\n    * 實作 getter & setter 對 Gun & name\n* 建立 Bean.xml 描述物件\n    * Role\n    * FireGun\n    * IceGun\n* 在 `main class` 讀取 **Bean.xml** ，建立 Role物件，並呼叫 ","source":"JAVA-Spring-Tech/index.md","raw":"---\ntitle: JAVA-Spring Simple Test\ndate: 2020-01-26 16:20:11\n---\n## Spring 簡單測試專案\n* 新增 **Java Project**\n* 建立測試物件\n    * 建立 IGun 介面，設定 Gun 系列標準\n    * 以 IGun 為基礎，建立 FireGun & IceGun\n* 建立 POJO\n    * 建立 Role class \n        * 參數\n            * name\n            * Gun\n    * 實作 getter & setter 對 Gun & name\n* 建立 Bean.xml 描述物件\n    * Role\n    * FireGun\n    * IceGun\n* 在 `main class` 讀取 **Bean.xml** ，建立 Role物件，並呼叫 ","updated":"2020-01-26T09:43:05.802Z","path":"JAVA-Spring-Tech/index.html","comments":1,"layout":"page","_id":"ck8izquw9000dn5jt1hz3gngo","content":"<h2 id=\"Spring-簡單測試專案\"><a href=\"#Spring-簡單測試專案\" class=\"headerlink\" title=\"Spring 簡單測試專案\"></a>Spring 簡單測試專案</h2><ul>\n<li>新增 <strong>Java Project</strong></li>\n<li>建立測試物件<ul>\n<li>建立 IGun 介面，設定 Gun 系列標準</li>\n<li>以 IGun 為基礎，建立 FireGun &amp; IceGun</li>\n</ul>\n</li>\n<li>建立 POJO<ul>\n<li>建立 Role class <ul>\n<li>參數<ul>\n<li>name</li>\n<li>Gun</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 getter &amp; setter 對 Gun &amp; name</li>\n</ul>\n</li>\n<li>建立 Bean.xml 描述物件<ul>\n<li>Role</li>\n<li>FireGun</li>\n<li>IceGun</li>\n</ul>\n</li>\n<li>在 <code>main class</code> 讀取 <strong>Bean.xml</strong> ，建立 Role物件，並呼叫 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-簡單測試專案\"><a href=\"#Spring-簡單測試專案\" class=\"headerlink\" title=\"Spring 簡單測試專案\"></a>Spring 簡單測試專案</h2><ul>\n<li>新增 <strong>Java Project</strong></li>\n<li>建立測試物件<ul>\n<li>建立 IGun 介面，設定 Gun 系列標準</li>\n<li>以 IGun 為基礎，建立 FireGun &amp; IceGun</li>\n</ul>\n</li>\n<li>建立 POJO<ul>\n<li>建立 Role class <ul>\n<li>參數<ul>\n<li>name</li>\n<li>Gun</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>實作 getter &amp; setter 對 Gun &amp; name</li>\n</ul>\n</li>\n<li>建立 Bean.xml 描述物件<ul>\n<li>Role</li>\n<li>FireGun</li>\n<li>IceGun</li>\n</ul>\n</li>\n<li>在 <code>main class</code> 讀取 <strong>Bean.xml</strong> ，建立 Role物件，並呼叫 </li>\n</ul>\n"},{"title":"JAVA-Spring WebSite for Eclipse for XML 設定","date":"2020-01-24T15:01:56.000Z","_content":"## JAVA-Spring WebSite for Eclipse for XML 設定\n### Web.xml 設定\n* 在 `<context-param>` 把 `mvc-config.xml` 設定在**contextConfigLocation**\n```xml\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/mvc-config.xml</param-value>\t\t\n\t</context-param>\n```\n* 在設定 `<listener>`\n```xml\n    <listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n```\n> P.S. 有在 `<context-param>` 設定**contextConfigLocation**，就要設定`<listener>`\n\n### For MVC\n* 在 `<servlet>` 設定 **DispatherServlet**，建立**前端控制器(front controller)** \n```xml\n\t<servlet>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value></param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n```\n> 當 `contextConfigLocation` 尚未設定時，預設會讀取 `Servlet名稱- servlet.xml`\n\n* 在 `<servlet-mapping>` 設定 **Controller**條件\n```xml\n    <servlet-mapping>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<url-pattern>*.action</url-pattern>\t\t\n\t</servlet-mapping>\n```\n\n* 流程\n   1. client request \n   2. servlet-mapping 驗證 url，是否有符合\n   3. 連結到 mapping 的 dispatcherServlet  \n   4. 根據 dispatcher-servlet.xml 連接到 Controller\n","source":"JAVA-Spring-WebSite-for-Eclipse/index.md","raw":"---\ntitle: JAVA-Spring WebSite for Eclipse for XML 設定\ndate: 2020-01-24 23:01:56\n---\n## JAVA-Spring WebSite for Eclipse for XML 設定\n### Web.xml 設定\n* 在 `<context-param>` 把 `mvc-config.xml` 設定在**contextConfigLocation**\n```xml\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/mvc-config.xml</param-value>\t\t\n\t</context-param>\n```\n* 在設定 `<listener>`\n```xml\n    <listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n```\n> P.S. 有在 `<context-param>` 設定**contextConfigLocation**，就要設定`<listener>`\n\n### For MVC\n* 在 `<servlet>` 設定 **DispatherServlet**，建立**前端控制器(front controller)** \n```xml\n\t<servlet>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value></param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n```\n> 當 `contextConfigLocation` 尚未設定時，預設會讀取 `Servlet名稱- servlet.xml`\n\n* 在 `<servlet-mapping>` 設定 **Controller**條件\n```xml\n    <servlet-mapping>\n\t\t<servlet-name>translator</servlet-name>\n\t\t<url-pattern>*.action</url-pattern>\t\t\n\t</servlet-mapping>\n```\n\n* 流程\n   1. client request \n   2. servlet-mapping 驗證 url，是否有符合\n   3. 連結到 mapping 的 dispatcherServlet  \n   4. 根據 dispatcher-servlet.xml 連接到 Controller\n","updated":"2020-02-10T18:29:08.572Z","path":"JAVA-Spring-WebSite-for-Eclipse/index.html","comments":1,"layout":"page","_id":"ck8izquwb000en5jt9xq5gfji","content":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for XML 設定\"></a>JAVA-Spring WebSite for Eclipse for XML 設定</h2><h3 id=\"Web-xml-設定\"><a href=\"#Web-xml-設定\" class=\"headerlink\" title=\"Web.xml 設定\"></a>Web.xml 設定</h3><ul>\n<li>在 <code>&lt;context-param&gt;</code> 把 <code>mvc-config.xml</code> 設定在<strong>contextConfigLocation</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/mvc-config.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在設定 <code>&lt;listener&gt;</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 有在 <code>&lt;context-param&gt;</code> 設定<strong>contextConfigLocation</strong>，就要設定<code>&lt;listener&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"For-MVC\"><a href=\"#For-MVC\" class=\"headerlink\" title=\"For MVC\"></a>For MVC</h3><ul>\n<li><p>在 <code>&lt;servlet&gt;</code> 設定 <strong>DispatherServlet</strong>，建立<strong>前端控制器(front controller)</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>當 <code>contextConfigLocation</code> 尚未設定時，預設會讀取 <code>Servlet名稱- servlet.xml</code></p>\n</blockquote>\n</li>\n<li><p>在 <code>&lt;servlet-mapping&gt;</code> 設定 <strong>Controller</strong>條件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流程</p>\n<ol>\n<li>client request </li>\n<li>servlet-mapping 驗證 url，是否有符合</li>\n<li>連結到 mapping 的 dispatcherServlet  </li>\n<li>根據 dispatcher-servlet.xml 連接到 Controller</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-XML-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for XML 設定\"></a>JAVA-Spring WebSite for Eclipse for XML 設定</h2><h3 id=\"Web-xml-設定\"><a href=\"#Web-xml-設定\" class=\"headerlink\" title=\"Web.xml 設定\"></a>Web.xml 設定</h3><ul>\n<li>在 <code>&lt;context-param&gt;</code> 把 <code>mvc-config.xml</code> 設定在<strong>contextConfigLocation</strong><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/mvc-config.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在設定 <code>&lt;listener&gt;</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 有在 <code>&lt;context-param&gt;</code> 設定<strong>contextConfigLocation</strong>，就要設定<code>&lt;listener&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"For-MVC\"><a href=\"#For-MVC\" class=\"headerlink\" title=\"For MVC\"></a>For MVC</h3><ul>\n<li><p>在 <code>&lt;servlet&gt;</code> 設定 <strong>DispatherServlet</strong>，建立<strong>前端控制器(front controller)</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>當 <code>contextConfigLocation</code> 尚未設定時，預設會讀取 <code>Servlet名稱- servlet.xml</code></p>\n</blockquote>\n</li>\n<li><p>在 <code>&lt;servlet-mapping&gt;</code> 設定 <strong>Controller</strong>條件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>translator<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>\t\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流程</p>\n<ol>\n<li>client request </li>\n<li>servlet-mapping 驗證 url，是否有符合</li>\n<li>連結到 mapping 的 dispatcherServlet  </li>\n<li>根據 dispatcher-servlet.xml 連接到 Controller</li>\n</ol>\n</li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-10","date":"2020-03-02T15:56:14.000Z","_content":"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\n\n### 關於 || 運算子\n* 用於判斷左右兩側值是否存在\n    * 其中一方存在，回傳已存在一方\n    * 兩方都存在，回傳左邊的值\n* 不存在的定義為\n   * null | undefined | false | 0 | \"\"\n```js\nconst v1 = true;\nconst v2 = false;\nconsole.log(v1 || v2);// true\n\nconst v3 = \"\";\nconst v4 = \"goood day~\";\nconsole.log(v3 || v4);// goood day~\n\nconst v5 = 0;\nconst v6 = 10;\nconsole.log(v5 || v6);// 10\n\nconst v7 = {};\nconst v8 = null;\nconsole.log(v7 || v8);// {}\n```\n\n### 關於 Object\n* 有關連的變數 or 方法 的集合體 \n* **基礎型別**之一   \n* 建立物件\n   ```js\n   var obj1 = {};\n   var obj2 = new Object();\n   ```\n* 在集合體內的`屬性(property)`為**物件成員**\n* \b\b\b\b\b`屬性`以 `key ＝ value `的形式保存\n   * 放入**number\b or string** 是以 `call by value` ， 放入 **function** or **object**則是 `call by reference`\n   * 建立物件屬性方式有 **dot notation** `.` & **bracket notation**`[]`\n   ```js\n   //變數(call by value)\n   obj1[\"arg\"] = 1;\n   obj2.arg = 2;\n\n   //function (call by reference)\n   obj1[\"func\"] =func1\n   obj2.func = func1;\n\n   //因為 function 會提升，所以可以放在後面\n   function func1(v){\n      console.log(\"this is func \"+ v);\n   };\n   ```\n\n* 呼叫 \n   ```js\n   //1\n   console.log(obj1[\"arg\"]);\n   //2\n   console.log(obj2.arg);\n   //this is func 1\n   console.log(obj1[\"func\"](1));\n   //this is func 2\n   console.log(obj2.func(2));\n   ```\n\n### Operator \".\"\n>  ObjectName.PropertyName\n* `Member Access`\n* 由左至右\n* 可以訪問物件的屬性內容\n* 優先度 19 \n* 當右邊有等號時，會把右邊值給予該屬性\n```js\nvar obj = {};\nobj.arg = 2;\n```\n\n### JSON\n* JavaScript Object Notation\n* 結構化資料(Structured Data)\n* 用於傳輸資料\n   * 傳輸資料的 MIME Type 是 `application/json`\n* 以 JavaScript 物件格式儲存資料\n* 只包含基本資料結構，不會有 **function**\n* 單筆資料以`{}`包住，多筆資料以`[]`包住單筆資料\n* 屬性資料格式是 `\"key\":value`，key值必須要有**雙引號(\")**包住\n```json\n{\n   \"human\":[//array\n      {\n         \"name\":\"Tony\",\n         \"age\" :29,\n         \"single\": true,\n         \"height\": 176,\n         \"weight\":  70\n      },\n      {//objecy\n         \"name\":\"Ross\",\n         \"age\" :19,\n         \"single\": false,\n         \"height\": 166,\n         \"weight\":  50,\n         \"sex\":\"female\"\n      }\n   ],\n   \"car\":[\n      \"Toyota\",\n      \"Mazda\",\n      \"Honda\"\n   ],\n   \"acount\":1000,//number\n   \"local\":\"Taipei\"//string\n}\n```\n\n### Statement(陳述句) ＆ Expression(表達示)\n* 程式碼一段功能的單位\n* Statement 執行其程式碼**不會有返回值**\n```js\ntry{\n   //do something\n}catch(e){\n   //\n}\n\nfor(var i = 0 ; i < 10 ;i++){\n   //do something\n}\n\nif(a > b){\n   //do something\n}\n\nfunction StatementFunc(){\n   console.log(\"function Statement\");\n}\n```\n* Expression 執行其程式碼**會有返回值**\n```js\nvar i = 10;\n//Function Expression\nvar fExp = function(){\n   console.log(\"function Expression\");\n}\n```","source":"JSLearningNote-2019-12-10/index.md","raw":"---\ntitle: JSLearningNote_2019-12-10\ndate: 2020-03-02 23:56:14\n---\nhttps://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\n\n### 關於 || 運算子\n* 用於判斷左右兩側值是否存在\n    * 其中一方存在，回傳已存在一方\n    * 兩方都存在，回傳左邊的值\n* 不存在的定義為\n   * null | undefined | false | 0 | \"\"\n```js\nconst v1 = true;\nconst v2 = false;\nconsole.log(v1 || v2);// true\n\nconst v3 = \"\";\nconst v4 = \"goood day~\";\nconsole.log(v3 || v4);// goood day~\n\nconst v5 = 0;\nconst v6 = 10;\nconsole.log(v5 || v6);// 10\n\nconst v7 = {};\nconst v8 = null;\nconsole.log(v7 || v8);// {}\n```\n\n### 關於 Object\n* 有關連的變數 or 方法 的集合體 \n* **基礎型別**之一   \n* 建立物件\n   ```js\n   var obj1 = {};\n   var obj2 = new Object();\n   ```\n* 在集合體內的`屬性(property)`為**物件成員**\n* \b\b\b\b\b`屬性`以 `key ＝ value `的形式保存\n   * 放入**number\b or string** 是以 `call by value` ， 放入 **function** or **object**則是 `call by reference`\n   * 建立物件屬性方式有 **dot notation** `.` & **bracket notation**`[]`\n   ```js\n   //變數(call by value)\n   obj1[\"arg\"] = 1;\n   obj2.arg = 2;\n\n   //function (call by reference)\n   obj1[\"func\"] =func1\n   obj2.func = func1;\n\n   //因為 function 會提升，所以可以放在後面\n   function func1(v){\n      console.log(\"this is func \"+ v);\n   };\n   ```\n\n* 呼叫 \n   ```js\n   //1\n   console.log(obj1[\"arg\"]);\n   //2\n   console.log(obj2.arg);\n   //this is func 1\n   console.log(obj1[\"func\"](1));\n   //this is func 2\n   console.log(obj2.func(2));\n   ```\n\n### Operator \".\"\n>  ObjectName.PropertyName\n* `Member Access`\n* 由左至右\n* 可以訪問物件的屬性內容\n* 優先度 19 \n* 當右邊有等號時，會把右邊值給予該屬性\n```js\nvar obj = {};\nobj.arg = 2;\n```\n\n### JSON\n* JavaScript Object Notation\n* 結構化資料(Structured Data)\n* 用於傳輸資料\n   * 傳輸資料的 MIME Type 是 `application/json`\n* 以 JavaScript 物件格式儲存資料\n* 只包含基本資料結構，不會有 **function**\n* 單筆資料以`{}`包住，多筆資料以`[]`包住單筆資料\n* 屬性資料格式是 `\"key\":value`，key值必須要有**雙引號(\")**包住\n```json\n{\n   \"human\":[//array\n      {\n         \"name\":\"Tony\",\n         \"age\" :29,\n         \"single\": true,\n         \"height\": 176,\n         \"weight\":  70\n      },\n      {//objecy\n         \"name\":\"Ross\",\n         \"age\" :19,\n         \"single\": false,\n         \"height\": 166,\n         \"weight\":  50,\n         \"sex\":\"female\"\n      }\n   ],\n   \"car\":[\n      \"Toyota\",\n      \"Mazda\",\n      \"Honda\"\n   ],\n   \"acount\":1000,//number\n   \"local\":\"Taipei\"//string\n}\n```\n\n### Statement(陳述句) ＆ Expression(表達示)\n* 程式碼一段功能的單位\n* Statement 執行其程式碼**不會有返回值**\n```js\ntry{\n   //do something\n}catch(e){\n   //\n}\n\nfor(var i = 0 ; i < 10 ;i++){\n   //do something\n}\n\nif(a > b){\n   //do something\n}\n\nfunction StatementFunc(){\n   console.log(\"function Statement\");\n}\n```\n* Expression 執行其程式碼**會有返回值**\n```js\nvar i = 10;\n//Function Expression\nvar fExp = function(){\n   console.log(\"function Expression\");\n}\n```","updated":"2020-03-19T15:54:55.996Z","path":"JSLearningNote-2019-12-10/index.html","comments":1,"layout":"page","_id":"ck8izquwd000in5jt4brnep0c","content":"<p><a href=\"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view</a></p>\n<h3 id=\"關於-運算子\"><a href=\"#關於-運算子\" class=\"headerlink\" title=\"關於 || 運算子\"></a>關於 || 運算子</h3><ul>\n<li>用於判斷左右兩側值是否存在<ul>\n<li>其中一方存在，回傳已存在一方</li>\n<li>兩方都存在，回傳左邊的值</li>\n</ul>\n</li>\n<li>不存在的定義為<ul>\n<li>null | undefined | false | 0 | “”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1 || v2);<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v4 = <span class=\"string\">\"goood day~\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v3 || v4);<span class=\"comment\">// goood day~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v6 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v5 || v6);<span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v7 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v8 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v7 || v8);<span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"關於-Object\"><a href=\"#關於-Object\" class=\"headerlink\" title=\"關於 Object\"></a>關於 Object</h3><ul>\n<li><p>有關連的變數 or 方法 的集合體 </p>\n</li>\n<li><p><strong>基礎型別</strong>之一   </p>\n</li>\n<li><p>建立物件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure></li>\n<li><p>在集合體內的<code>屬性(property)</code>為<strong>物件成員</strong></p>\n</li>\n<li><p>\b\b\b\b\b<code>屬性</code>以 <code>key ＝ value</code>的形式保存</p>\n<ul>\n<li>放入<strong>number\b or string</strong> 是以 <code>call by value</code> ， 放入 <strong>function</strong> or <strong>object</strong>則是 <code>call by reference</code></li>\n<li>建立物件屬性方式有 <strong>dot notation</strong> <code>.</code> &amp; <strong>bracket notation</strong><code>[]</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//變數(call by value)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"arg\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj2.arg = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function (call by reference)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"func\"</span>] =func1</span><br><span class=\"line\">obj2.func = func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因為 function 會提升，所以可以放在後面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is func \"</span>+ v);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>呼叫 </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"arg\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.arg);</span><br><span class=\"line\"><span class=\"comment\">//this is func 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"func\"</span>](<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//this is func 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.func(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Operator-“-”\"><a href=\"#Operator-“-”\" class=\"headerlink\" title=\"Operator “.”\"></a>Operator “.”</h3><blockquote>\n<p> ObjectName.PropertyName</p>\n</blockquote>\n<ul>\n<li><code>Member Access</code></li>\n<li>由左至右</li>\n<li>可以訪問物件的屬性內容</li>\n<li>優先度 19 </li>\n<li>當右邊有等號時，會把右邊值給予該屬性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.arg = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>JavaScript Object Notation</li>\n<li>結構化資料(Structured Data)</li>\n<li>用於傳輸資料<ul>\n<li>傳輸資料的 MIME Type 是 <code>application/json</code></li>\n</ul>\n</li>\n<li>以 JavaScript 物件格式儲存資料</li>\n<li>只包含基本資料結構，不會有 <strong>function</strong></li>\n<li>單筆資料以<code>{}</code>包住，多筆資料以<code>[]</code>包住單筆資料</li>\n<li>屬性資料格式是 <code>&quot;key&quot;:value</code>，key值必須要有<strong>雙引號(“)</strong>包住<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"human\"</span>:[<span class=\"comment\">//array</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">29</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">176</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">70</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;<span class=\"comment\">//objecy</span></span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ross\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">19</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">166</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">50</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"female\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"car\"</span>:[</span><br><span class=\"line\">      <span class=\"string\">\"Toyota\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Mazda\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Honda\"</span></span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"acount\"</span>:<span class=\"number\">1000</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">   <span class=\"attr\">\"local\"</span>:<span class=\"string\">\"Taipei\"</span><span class=\"comment\">//string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Statement-陳述句-＆-Expression-表達示\"><a href=\"#Statement-陳述句-＆-Expression-表達示\" class=\"headerlink\" title=\"Statement(陳述句) ＆ Expression(表達示)\"></a>Statement(陳述句) ＆ Expression(表達示)</h3><ul>\n<li>程式碼一段功能的單位</li>\n<li>Statement 執行其程式碼<strong>不會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StatementFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Statement\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Expression 執行其程式碼<strong>會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fExp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Expression\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/zUtFlU_UT4OpODLQJ8nZyA?view</a></p>\n<h3 id=\"關於-運算子\"><a href=\"#關於-運算子\" class=\"headerlink\" title=\"關於 || 運算子\"></a>關於 || 運算子</h3><ul>\n<li>用於判斷左右兩側值是否存在<ul>\n<li>其中一方存在，回傳已存在一方</li>\n<li>兩方都存在，回傳左邊的值</li>\n</ul>\n</li>\n<li>不存在的定義為<ul>\n<li>null | undefined | false | 0 | “”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v1 || v2);<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v4 = <span class=\"string\">\"goood day~\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v3 || v4);<span class=\"comment\">// goood day~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v6 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v5 || v6);<span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v7 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v8 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(v7 || v8);<span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"關於-Object\"><a href=\"#關於-Object\" class=\"headerlink\" title=\"關於 Object\"></a>關於 Object</h3><ul>\n<li><p>有關連的變數 or 方法 的集合體 </p>\n</li>\n<li><p><strong>基礎型別</strong>之一   </p>\n</li>\n<li><p>建立物件</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure></li>\n<li><p>在集合體內的<code>屬性(property)</code>為<strong>物件成員</strong></p>\n</li>\n<li><p>\b\b\b\b\b<code>屬性</code>以 <code>key ＝ value</code>的形式保存</p>\n<ul>\n<li>放入<strong>number\b or string</strong> 是以 <code>call by value</code> ， 放入 <strong>function</strong> or <strong>object</strong>則是 <code>call by reference</code></li>\n<li>建立物件屬性方式有 <strong>dot notation</strong> <code>.</code> &amp; <strong>bracket notation</strong><code>[]</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//變數(call by value)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"arg\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj2.arg = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//function (call by reference)</span></span><br><span class=\"line\">obj1[<span class=\"string\">\"func\"</span>] =func1</span><br><span class=\"line\">obj2.func = func1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因為 function 會提升，所以可以放在後面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is func \"</span>+ v);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>呼叫 </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"arg\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.arg);</span><br><span class=\"line\"><span class=\"comment\">//this is func 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1[<span class=\"string\">\"func\"</span>](<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//this is func 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.func(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Operator-“-”\"><a href=\"#Operator-“-”\" class=\"headerlink\" title=\"Operator “.”\"></a>Operator “.”</h3><blockquote>\n<p> ObjectName.PropertyName</p>\n</blockquote>\n<ul>\n<li><code>Member Access</code></li>\n<li>由左至右</li>\n<li>可以訪問物件的屬性內容</li>\n<li>優先度 19 </li>\n<li>當右邊有等號時，會把右邊值給予該屬性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.arg = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>JavaScript Object Notation</li>\n<li>結構化資料(Structured Data)</li>\n<li>用於傳輸資料<ul>\n<li>傳輸資料的 MIME Type 是 <code>application/json</code></li>\n</ul>\n</li>\n<li>以 JavaScript 物件格式儲存資料</li>\n<li>只包含基本資料結構，不會有 <strong>function</strong></li>\n<li>單筆資料以<code>{}</code>包住，多筆資料以<code>[]</code>包住單筆資料</li>\n<li>屬性資料格式是 <code>&quot;key&quot;:value</code>，key值必須要有<strong>雙引號(“)</strong>包住<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"human\"</span>:[<span class=\"comment\">//array</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">29</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">176</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">70</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;<span class=\"comment\">//objecy</span></span><br><span class=\"line\">         <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ross\"</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"age\"</span> :<span class=\"number\">19</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"single\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"height\"</span>: <span class=\"number\">166</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"weight\"</span>:  <span class=\"number\">50</span>,</span><br><span class=\"line\">         <span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"female\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"car\"</span>:[</span><br><span class=\"line\">      <span class=\"string\">\"Toyota\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Mazda\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Honda\"</span></span><br><span class=\"line\">   ],</span><br><span class=\"line\">   <span class=\"attr\">\"acount\"</span>:<span class=\"number\">1000</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">   <span class=\"attr\">\"local\"</span>:<span class=\"string\">\"Taipei\"</span><span class=\"comment\">//string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Statement-陳述句-＆-Expression-表達示\"><a href=\"#Statement-陳述句-＆-Expression-表達示\" class=\"headerlink\" title=\"Statement(陳述句) ＆ Expression(表達示)\"></a>Statement(陳述句) ＆ Expression(表達示)</h3><ul>\n<li>程式碼一段功能的單位</li>\n<li>Statement 執行其程式碼<strong>不會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StatementFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Statement\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Expression 執行其程式碼<strong>會有返回值</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fExp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function Expression\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"JAVA-Spring-WebSite-for-Eclipse2","date":"2020-02-13T16:46:21.000Z","_content":"\n## JAVA-Spring WebSite for Eclipse for JavaConfig 設定\n\n### Web <-> Server \n\n* 設定 WebInitializer.java\n    * 設定 `DispatcherServlet`\n\n        ``` java\n        @Configuration\n        public class WebAppInitializer implements WebApplicationInitializer{\n\n            @Override\n            public void onStartup(ServletContext servletContext) throws ServletException{\n                System.out.println(\"MVC WebAppInitializer StartUp!\");\n                AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext();\n                appContext.register(WebMvcConfig.class);\n                \n                ServletRegistration.Dynamic dispather =servletContext.addServlet(\n                        \"SpringDispatcher\", new DispatcherServlet(appContext));\n                dispather.setLoadOnStartup(1);\n                dispather.addMapping(\"/\");\n                \n            }\n            \n        }\n\n        ```\n* 設定 WebConfig\n    * 加上 `annotation`\n\n        ``` java\n        @Configuration\n        @EnableWebMvc\n        @ComponentScan(\"com.test \")//設定要掃描的 Component package\n        public class WebMvcConfig extends WebMvcConfigurerAdapter{\n        ```\n    * 設定將要載入的`bean`\n\n        ``` java\n        //設定從 Controller 返回 String or ModelAndView 提取 view 的解析器\n        @Bean(name = \"viewResolver\")\n        public InternalResourceViewResolver getViewResolver() {\n            InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n            viewResolver.setPrefix(\"/WEB-INF/views/\");\n            viewResolver.setSuffix(\".jsp\");\n            return viewResolver;\n        }\n\n\n        ```\n    * 有需要接收 json 格式 ，需加載`mappingJackson2HttpMessageConverter`，否則會出現 ERROR:`Completed 415 UNSUPPORTED_MEDIA_TYPE`\n\n        ```java\n        @Bean\n        public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter(\n                @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,\n                @Autowired ContentNegotiationManager mvcContentNegotiationManager) {\n            RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();\n            requestMappingHandlerAdapter\n                    .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));\n            requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);\n            return requestMappingHandlerAdapter;\n        }\n\n        @Bean\n        public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {\n            return new MappingJackson2HttpMessageConverter();\n        }\n        ```\n* 設定 Controller\n    * 建立 Controller.java\n        ```java\n        @Controller\n        public class Controller {\n        \n        ```\n    * 針對 url 設定 `RequestMapping`\n        * 由頁面初始化時觸發\n        * 前端接資料由 **jsp** 方式去接\n        * 回傳 string，代表指定頁面\n        * 需要帶值傳遞，回傳 **ModelAndView class**\n        * 有參數要帶入加上 `@RequestParam` annotation\n\n        ```java\n        @RequestMapping(\"/edit\")\n        public ModelAndView editCustomerForm(@RequestParam Long id) {\n            System.out.println(\"action edit\");\n            Customer customer = customerService.get(id);\n            ModelAndView mv = new ModelAndView(\"edit_customer\");\n            mv.addObject(\"customer\", customer);\n            return mv;\n        }\n        ```\n    * 以 api 方式呼叫，設定\n        * `RequestMapping`需帶入\n            * value : api url\n            * method : 回傳方式 POST or GET\n        * 回傳自定格式需加上 `@ResponseBody` annotation\n        \n        ```java\n        @RequestMapping(value = \"/hello.action\",method = RequestMethod.POST)\n        @ResponseBody\n        public User jsontest(@RequestBody UseInfo use) {\n            System.out.println(\"received jsontest\");\n            \n            Date dNow = new Date( );\n            SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n            User u= new User(use.getName() ,ft.format(dNow) ,use.getPrice());\n            return u;\n            \n        }\n  \n      ```\n* 要讓 `Tomcat Server`在啟動時，自動的讀取 `WebInitializer`\n    * 設定 `SpringServletContainerInitializer.java`\n\n        ```java\n        //設定 onStartup要啟動的 class\n        @HandlesTypes({WebApplicationInitializer.class})\n        public class SpringServletContainerInitializer implements ServletContainerInitializer{\n            public  SpringServletContainerInitializer() {\n                \n            }\n            \n            @Override\n            public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n                System.out.println(\"MVC StartUp!\");\n\n\n            \n            }\n\n        }\n\n        ```\n    * 建立 `javax.servlet.ServletContainerInitializer` \n        * 在專案按右鍵 \b> Build Path > Configure Build Path \n        * 選擇 Source\n        * 在 src底下建立 /resources/META-INF/services/ 資料夾\n        * 新增檔案 `javax.servlet.ServletContainerInitializer`(無附檔名)\n            * 加入內容\n\n                ```\n                com.test.config.SpringServletContainerInitializer\n                ```\n    * 不建立 `javax.servlet.ServletContainerInitializer` 會無法啟動  **SpringServletContainerInitializer**   \n\n    \n\n\n\n","source":"JAVA-Spring-WebSite-for-Eclipse2/index.md","raw":"---\ntitle: JAVA-Spring-WebSite-for-Eclipse2\ndate: 2020-02-14 00:46:21\n---\n\n## JAVA-Spring WebSite for Eclipse for JavaConfig 設定\n\n### Web <-> Server \n\n* 設定 WebInitializer.java\n    * 設定 `DispatcherServlet`\n\n        ``` java\n        @Configuration\n        public class WebAppInitializer implements WebApplicationInitializer{\n\n            @Override\n            public void onStartup(ServletContext servletContext) throws ServletException{\n                System.out.println(\"MVC WebAppInitializer StartUp!\");\n                AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext();\n                appContext.register(WebMvcConfig.class);\n                \n                ServletRegistration.Dynamic dispather =servletContext.addServlet(\n                        \"SpringDispatcher\", new DispatcherServlet(appContext));\n                dispather.setLoadOnStartup(1);\n                dispather.addMapping(\"/\");\n                \n            }\n            \n        }\n\n        ```\n* 設定 WebConfig\n    * 加上 `annotation`\n\n        ``` java\n        @Configuration\n        @EnableWebMvc\n        @ComponentScan(\"com.test \")//設定要掃描的 Component package\n        public class WebMvcConfig extends WebMvcConfigurerAdapter{\n        ```\n    * 設定將要載入的`bean`\n\n        ``` java\n        //設定從 Controller 返回 String or ModelAndView 提取 view 的解析器\n        @Bean(name = \"viewResolver\")\n        public InternalResourceViewResolver getViewResolver() {\n            InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n            viewResolver.setPrefix(\"/WEB-INF/views/\");\n            viewResolver.setSuffix(\".jsp\");\n            return viewResolver;\n        }\n\n\n        ```\n    * 有需要接收 json 格式 ，需加載`mappingJackson2HttpMessageConverter`，否則會出現 ERROR:`Completed 415 UNSUPPORTED_MEDIA_TYPE`\n\n        ```java\n        @Bean\n        public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter(\n                @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,\n                @Autowired ContentNegotiationManager mvcContentNegotiationManager) {\n            RequestMappingHandlerAdapter requestMappingHandlerAdapter = new RequestMappingHandlerAdapter();\n            requestMappingHandlerAdapter\n                    .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));\n            requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);\n            return requestMappingHandlerAdapter;\n        }\n\n        @Bean\n        public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {\n            return new MappingJackson2HttpMessageConverter();\n        }\n        ```\n* 設定 Controller\n    * 建立 Controller.java\n        ```java\n        @Controller\n        public class Controller {\n        \n        ```\n    * 針對 url 設定 `RequestMapping`\n        * 由頁面初始化時觸發\n        * 前端接資料由 **jsp** 方式去接\n        * 回傳 string，代表指定頁面\n        * 需要帶值傳遞，回傳 **ModelAndView class**\n        * 有參數要帶入加上 `@RequestParam` annotation\n\n        ```java\n        @RequestMapping(\"/edit\")\n        public ModelAndView editCustomerForm(@RequestParam Long id) {\n            System.out.println(\"action edit\");\n            Customer customer = customerService.get(id);\n            ModelAndView mv = new ModelAndView(\"edit_customer\");\n            mv.addObject(\"customer\", customer);\n            return mv;\n        }\n        ```\n    * 以 api 方式呼叫，設定\n        * `RequestMapping`需帶入\n            * value : api url\n            * method : 回傳方式 POST or GET\n        * 回傳自定格式需加上 `@ResponseBody` annotation\n        \n        ```java\n        @RequestMapping(value = \"/hello.action\",method = RequestMethod.POST)\n        @ResponseBody\n        public User jsontest(@RequestBody UseInfo use) {\n            System.out.println(\"received jsontest\");\n            \n            Date dNow = new Date( );\n            SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n            User u= new User(use.getName() ,ft.format(dNow) ,use.getPrice());\n            return u;\n            \n        }\n  \n      ```\n* 要讓 `Tomcat Server`在啟動時，自動的讀取 `WebInitializer`\n    * 設定 `SpringServletContainerInitializer.java`\n\n        ```java\n        //設定 onStartup要啟動的 class\n        @HandlesTypes({WebApplicationInitializer.class})\n        public class SpringServletContainerInitializer implements ServletContainerInitializer{\n            public  SpringServletContainerInitializer() {\n                \n            }\n            \n            @Override\n            public void onStartup(@Nullable Set<Class<?>> webApplicationInitializerClasss, javax.servlet.ServletContext servletContext) throws javax.servlet.ServletException{\n                System.out.println(\"MVC StartUp!\");\n\n\n            \n            }\n\n        }\n\n        ```\n    * 建立 `javax.servlet.ServletContainerInitializer` \n        * 在專案按右鍵 \b> Build Path > Configure Build Path \n        * 選擇 Source\n        * 在 src底下建立 /resources/META-INF/services/ 資料夾\n        * 新增檔案 `javax.servlet.ServletContainerInitializer`(無附檔名)\n            * 加入內容\n\n                ```\n                com.test.config.SpringServletContainerInitializer\n                ```\n    * 不建立 `javax.servlet.ServletContainerInitializer` 會無法啟動  **SpringServletContainerInitializer**   \n\n    \n\n\n\n","updated":"2020-02-25T17:38:16.062Z","path":"JAVA-Spring-WebSite-for-Eclipse2/index.html","comments":1,"layout":"page","_id":"ck8izquwd000kn5jt1kkk2lno","content":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for JavaConfig 設定\"></a>JAVA-Spring WebSite for Eclipse for JavaConfig 設定</h2><h3 id=\"Web-lt-gt-Server\"><a href=\"#Web-lt-gt-Server\" class=\"headerlink\" title=\"Web &lt;-&gt; Server\"></a>Web &lt;-&gt; Server</h3><ul>\n<li><p>設定 WebInitializer.java</p>\n<ul>\n<li><p>設定 <code>DispatcherServlet</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebApplicationInitializer</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(ServletContext servletContext)</span> <span class=\"keyword\">throws</span> ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC WebAppInitializer StartUp!\"</span>);</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext appContext = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        appContext.register(WebMvcConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ServletRegistration.Dynamic dispather =servletContext.addServlet(</span><br><span class=\"line\">                <span class=\"string\">\"SpringDispatcher\"</span>, <span class=\"keyword\">new</span> DispatcherServlet(appContext));</span><br><span class=\"line\">        dispather.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        dispather.addMapping(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 WebConfig</p>\n<ul>\n<li><p>加上 <code>annotation</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.test \"</span>)<span class=\"comment\">//設定要掃描的 Component package</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>設定將要載入的<code>bean</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定從 Controller 返回 String or ModelAndView 提取 view 的解析器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"viewResolver\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InternalResourceViewResolver <span class=\"title\">getViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    InternalResourceViewResolver viewResolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">    viewResolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">    viewResolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> viewResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要接收 json 格式 ，需加載<code>mappingJackson2HttpMessageConverter</code>，否則會出現 ERROR:<code>Completed 415 UNSUPPORTED_MEDIA_TYPE</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerAdapter <span class=\"title\">getRequestMappingHandlerAdapter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingHandlerAdapter requestMappingHandlerAdapter = <span class=\"keyword\">new</span> RequestMappingHandlerAdapter();</span><br><span class=\"line\">    requestMappingHandlerAdapter</span><br><span class=\"line\">            .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));</span><br><span class=\"line\">    requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestMappingHandlerAdapter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 Controller</p>\n<ul>\n<li><p>建立 Controller.java</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>針對 url 設定 <code>RequestMapping</code></p>\n<ul>\n<li><p>由頁面初始化時觸發</p>\n</li>\n<li><p>前端接資料由 <strong>jsp</strong> 方式去接</p>\n</li>\n<li><p>回傳 string，代表指定頁面</p>\n</li>\n<li><p>需要帶值傳遞，回傳 <strong>ModelAndView class</strong></p>\n</li>\n<li><p>有參數要帶入加上 <code>@RequestParam</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/edit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editCustomerForm</span><span class=\"params\">(@RequestParam Long id)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"action edit\"</span>);</span><br><span class=\"line\">    Customer customer = customerService.get(id);</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"edit_customer\"</span>);</span><br><span class=\"line\">    mv.addObject(<span class=\"string\">\"customer\"</span>, customer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>以 api 方式呼叫，設定</p>\n<ul>\n<li><p><code>RequestMapping</code>需帶入</p>\n<ul>\n<li>value : api url</li>\n<li>method : 回傳方式 POST or GET</li>\n</ul>\n</li>\n<li><p>回傳自定格式需加上 <code>@ResponseBody</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello.action\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">jsontest</span><span class=\"params\">(@RequestBody UseInfo use)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"received jsontest\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Date dNow = <span class=\"keyword\">new</span> Date( );</span><br><span class=\"line\">    SimpleDateFormat ft = <span class=\"keyword\">new</span> SimpleDateFormat (<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</span><br><span class=\"line\">    User u= <span class=\"keyword\">new</span> User(use.getName() ,ft.format(dNow) ,use.getPrice());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要讓 <code>Tomcat Server</code>在啟動時，自動的讀取 <code>WebInitializer</code></p>\n<ul>\n<li><p>設定 <code>SpringServletContainerInitializer.java</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定 onStartup要啟動的 class</span></span><br><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">SpringServletContainerInitializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC StartUp!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>javax.servlet.ServletContainerInitializer</code> </p>\n<ul>\n<li><p>在專案按右鍵 \b&gt; Build Path &gt; Configure Build Path </p>\n</li>\n<li><p>選擇 Source</p>\n</li>\n<li><p>在 src底下建立 /resources/META-INF/services/ 資料夾</p>\n</li>\n<li><p>新增檔案 <code>javax.servlet.ServletContainerInitializer</code>(無附檔名)</p>\n<ul>\n<li><p>加入內容</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.test.config.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>不建立 <code>javax.servlet.ServletContainerInitializer</code> 會無法啟動  <strong>SpringServletContainerInitializer</strong>   </p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\"><a href=\"#JAVA-Spring-WebSite-for-Eclipse-for-JavaConfig-設定\" class=\"headerlink\" title=\"JAVA-Spring WebSite for Eclipse for JavaConfig 設定\"></a>JAVA-Spring WebSite for Eclipse for JavaConfig 設定</h2><h3 id=\"Web-lt-gt-Server\"><a href=\"#Web-lt-gt-Server\" class=\"headerlink\" title=\"Web &lt;-&gt; Server\"></a>Web &lt;-&gt; Server</h3><ul>\n<li><p>設定 WebInitializer.java</p>\n<ul>\n<li><p>設定 <code>DispatcherServlet</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebApplicationInitializer</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(ServletContext servletContext)</span> <span class=\"keyword\">throws</span> ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC WebAppInitializer StartUp!\"</span>);</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext appContext = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        appContext.register(WebMvcConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ServletRegistration.Dynamic dispather =servletContext.addServlet(</span><br><span class=\"line\">                <span class=\"string\">\"SpringDispatcher\"</span>, <span class=\"keyword\">new</span> DispatcherServlet(appContext));</span><br><span class=\"line\">        dispather.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        dispather.addMapping(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 WebConfig</p>\n<ul>\n<li><p>加上 <code>annotation</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.test \"</span>)<span class=\"comment\">//設定要掃描的 Component package</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>設定將要載入的<code>bean</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定從 Controller 返回 String or ModelAndView 提取 view 的解析器</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"viewResolver\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InternalResourceViewResolver <span class=\"title\">getViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    InternalResourceViewResolver viewResolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">    viewResolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">    viewResolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> viewResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>有需要接收 json 格式 ，需加載<code>mappingJackson2HttpMessageConverter</code>，否則會出現 ERROR:<code>Completed 415 UNSUPPORTED_MEDIA_TYPE</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerAdapter <span class=\"title\">getRequestMappingHandlerAdapter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Autowired ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingHandlerAdapter requestMappingHandlerAdapter = <span class=\"keyword\">new</span> RequestMappingHandlerAdapter();</span><br><span class=\"line\">    requestMappingHandlerAdapter</span><br><span class=\"line\">            .setMessageConverters(Collections.singletonList(mappingJackson2HttpMessageConverter));</span><br><span class=\"line\">    requestMappingHandlerAdapter.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> requestMappingHandlerAdapter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">mappingJackson2HttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定 Controller</p>\n<ul>\n<li><p>建立 Controller.java</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>針對 url 設定 <code>RequestMapping</code></p>\n<ul>\n<li><p>由頁面初始化時觸發</p>\n</li>\n<li><p>前端接資料由 <strong>jsp</strong> 方式去接</p>\n</li>\n<li><p>回傳 string，代表指定頁面</p>\n</li>\n<li><p>需要帶值傳遞，回傳 <strong>ModelAndView class</strong></p>\n</li>\n<li><p>有參數要帶入加上 <code>@RequestParam</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/edit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editCustomerForm</span><span class=\"params\">(@RequestParam Long id)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"action edit\"</span>);</span><br><span class=\"line\">    Customer customer = customerService.get(id);</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"edit_customer\"</span>);</span><br><span class=\"line\">    mv.addObject(<span class=\"string\">\"customer\"</span>, customer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>以 api 方式呼叫，設定</p>\n<ul>\n<li><p><code>RequestMapping</code>需帶入</p>\n<ul>\n<li>value : api url</li>\n<li>method : 回傳方式 POST or GET</li>\n</ul>\n</li>\n<li><p>回傳自定格式需加上 <code>@ResponseBody</code> annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello.action\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">jsontest</span><span class=\"params\">(@RequestBody UseInfo use)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"received jsontest\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Date dNow = <span class=\"keyword\">new</span> Date( );</span><br><span class=\"line\">    SimpleDateFormat ft = <span class=\"keyword\">new</span> SimpleDateFormat (<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</span><br><span class=\"line\">    User u= <span class=\"keyword\">new</span> User(use.getName() ,ft.format(dNow) ,use.getPrice());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要讓 <code>Tomcat Server</code>在啟動時，自動的讀取 <code>WebInitializer</code></p>\n<ul>\n<li><p>設定 <code>SpringServletContainerInitializer.java</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//設定 onStartup要啟動的 class</span></span><br><span class=\"line\"><span class=\"meta\">@HandlesTypes</span>(&#123;WebApplicationInitializer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">SpringServletContainerInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContainerInitializer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"title\">SpringServletContainerInitializer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartup</span><span class=\"params\">(@Nullable Set&lt;Class&lt;?&gt;&gt; webApplicationInitializerClasss, javax.servlet.ServletContext servletContext)</span> <span class=\"keyword\">throws</span> javax.servlet.ServletException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MVC StartUp!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建立 <code>javax.servlet.ServletContainerInitializer</code> </p>\n<ul>\n<li><p>在專案按右鍵 \b&gt; Build Path &gt; Configure Build Path </p>\n</li>\n<li><p>選擇 Source</p>\n</li>\n<li><p>在 src底下建立 /resources/META-INF/services/ 資料夾</p>\n</li>\n<li><p>新增檔案 <code>javax.servlet.ServletContainerInitializer</code>(無附檔名)</p>\n<ul>\n<li><p>加入內容</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.test.config.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>不建立 <code>javax.servlet.ServletContainerInitializer</code> 會無法啟動  <strong>SpringServletContainerInitializer</strong>   </p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-17","date":"2020-03-02T15:56:34.000Z","_content":"\nhttps://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\n\n### Primitive type & Object type\n* 在賦值給變數時會決定好是什麼type\n* 賦值給變數\n    * 會把數據放在一個記憶體位置，再把記憶體位置丟給變數\n* **Primitive type** 原始型別\n    * 唯一值，不會被其他變數參考`call by value`\n    * 型別\n        * Number\n        * String\n        * Boolean\n        * Null\n        * Undefined\n\n* **non-Primitive type** 非原始型別\n    * 非唯一值，所有變數可共同參考`call by referance`\n    * 型別\n        * Object\n        * Array\n        * Regx\n        * Function\n        * Date\n\n### call by value\n* 賦值給變數時，會新建數據\n\n### call by referance\n* 賦值給變數時，會直接把記憶體位置丟給變數\n\n```js\n//call by value\nvar i = 1;\nvar b = i;\ni = 4;\n\n//i=4,b=1\nconsole.log(\"i=\"+ i + \",b=\"+ b);\n\n//call by referance\nvar g = {\n    age:10,\n    sex:\"man\"\n};\n\nvar h = g;\n\ng.age = 20;\ng.sex = \"woman\";\n\n\nconsole.log(\"this is g object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(g);\nconsole.log(\"this is h object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(h);\n```\n\n### deep copy\n* 深拷貝\n* 把**變數a**的值經過特殊處理丟給**變數b**\n    * 建立全新的物件\n* 兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連\n* 使用 `Object.assign`\n    ```js\n    //只能複製一層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = Object.assign({} , a);\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//20\n    ```\n* 使用 `JSON.stringify` & `JSON.parse`\n    *  不過無法拷貝 Function、Set、Map…等型態\n    ```js\n    // 轉成 JSON string 在轉成全新的物件，可深拷貝所有層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = JSON.parse(JSON.stringify(a));\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n    ```\n\n### shallow copy\n* 淺拷貝\n* 把**變數a**的值直接丟給**變數b**，不做額外處理\n    * 僅只會把**變數a**的記憶體位置丟給**變數b**\n* 參考到的會是同一個物件，動a會連b的值一起變\n```js\nvar a = {\n    age:10,\n    sex:\"man\"\n};\n\nvar b = a;\nconsole.log(\"b value is \");\nconsole.log(b);\n\na.age = 20;\nconsole.log(\"after change a age , b value is \");\nconsole.log(b);\n```\n\n### this\n* js 的關鍵字\n* 代表物件本身\n* 最外層的 **this** 即是 `global object`\n* 有建立新物件 **this**的參考指向才會轉成該物件\n* 當function 沒有綁定物件時，內部 **this**會直接參考 `global object`\n```js\nconsole.log(this);//global object\nfunction gFunc(){\n    console.log(this);//global object\n}\ngFunc();\n\nthis.name = \"Mr.w\";\nvar a = {\n    name : \"Mr.A\",\n    callName:function(w){\n        console.log(\"a name is \" + this.name);//Mr.A\n        console.log(\"w name is \" + w.name);//Mr.A\n        function changeName(){\n            console.log(\"Start change name\");\n            console.log(this);//global object\n            this.name = \"Mr.Change\";\n        }\n        changeName();\n        console.log(\"w name is \" + w.name);//Mr.A\n        console.log(\"a change name is \" + this.name);//Mr.A\n    }\n\n};\n//a.callName(this);\nconsole.log(\"===========================\");\nvar c = {\n    name : \"Mr.C\",\n    callName:function(){\n        console.log(\"c name is \" + this.name);//Mr.A\n        a.callName(this);\n        \n    }\n\n};\nc.callName();\n```","source":"JSLearningNote-2019-12-17/index.md","raw":"---\ntitle: JSLearningNote_2019-12-17\ndate: 2020-03-02 23:56:34\n---\n\nhttps://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\n\n### Primitive type & Object type\n* 在賦值給變數時會決定好是什麼type\n* 賦值給變數\n    * 會把數據放在一個記憶體位置，再把記憶體位置丟給變數\n* **Primitive type** 原始型別\n    * 唯一值，不會被其他變數參考`call by value`\n    * 型別\n        * Number\n        * String\n        * Boolean\n        * Null\n        * Undefined\n\n* **non-Primitive type** 非原始型別\n    * 非唯一值，所有變數可共同參考`call by referance`\n    * 型別\n        * Object\n        * Array\n        * Regx\n        * Function\n        * Date\n\n### call by value\n* 賦值給變數時，會新建數據\n\n### call by referance\n* 賦值給變數時，會直接把記憶體位置丟給變數\n\n```js\n//call by value\nvar i = 1;\nvar b = i;\ni = 4;\n\n//i=4,b=1\nconsole.log(\"i=\"+ i + \",b=\"+ b);\n\n//call by referance\nvar g = {\n    age:10,\n    sex:\"man\"\n};\n\nvar h = g;\n\ng.age = 20;\ng.sex = \"woman\";\n\n\nconsole.log(\"this is g object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(g);\nconsole.log(\"this is h object\");\n//{age: 20, sex: \"woman\"}\nconsole.log(h);\n```\n\n### deep copy\n* 深拷貝\n* 把**變數a**的值經過特殊處理丟給**變數b**\n    * 建立全新的物件\n* 兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連\n* 使用 `Object.assign`\n    ```js\n    //只能複製一層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = Object.assign({} , a);\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//20\n    ```\n* 使用 `JSON.stringify` & `JSON.parse`\n    *  不過無法拷貝 Function、Set、Map…等型態\n    ```js\n    // 轉成 JSON string 在轉成全新的物件，可深拷貝所有層\n    var a = { \n        ages: \n        { \n            value: 10 \n        },\n        sex:\"man\"\n    };\n\n    var b = JSON.parse(JSON.stringify(a));\n    console.log(\"b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n\n    a.sex = \"woman\";\n    a.ages.value = 20;\n    console.log(\"after change a age , b value is \");\n    console.log(b.sex);//man\n    console.log(b.ages);//10\n    ```\n\n### shallow copy\n* 淺拷貝\n* 把**變數a**的值直接丟給**變數b**，不做額外處理\n    * 僅只會把**變數a**的記憶體位置丟給**變數b**\n* 參考到的會是同一個物件，動a會連b的值一起變\n```js\nvar a = {\n    age:10,\n    sex:\"man\"\n};\n\nvar b = a;\nconsole.log(\"b value is \");\nconsole.log(b);\n\na.age = 20;\nconsole.log(\"after change a age , b value is \");\nconsole.log(b);\n```\n\n### this\n* js 的關鍵字\n* 代表物件本身\n* 最外層的 **this** 即是 `global object`\n* 有建立新物件 **this**的參考指向才會轉成該物件\n* 當function 沒有綁定物件時，內部 **this**會直接參考 `global object`\n```js\nconsole.log(this);//global object\nfunction gFunc(){\n    console.log(this);//global object\n}\ngFunc();\n\nthis.name = \"Mr.w\";\nvar a = {\n    name : \"Mr.A\",\n    callName:function(w){\n        console.log(\"a name is \" + this.name);//Mr.A\n        console.log(\"w name is \" + w.name);//Mr.A\n        function changeName(){\n            console.log(\"Start change name\");\n            console.log(this);//global object\n            this.name = \"Mr.Change\";\n        }\n        changeName();\n        console.log(\"w name is \" + w.name);//Mr.A\n        console.log(\"a change name is \" + this.name);//Mr.A\n    }\n\n};\n//a.callName(this);\nconsole.log(\"===========================\");\nvar c = {\n    name : \"Mr.C\",\n    callName:function(){\n        console.log(\"c name is \" + this.name);//Mr.A\n        a.callName(this);\n        \n    }\n\n};\nc.callName();\n```","updated":"2020-03-19T15:55:11.342Z","path":"JSLearningNote-2019-12-17/index.html","comments":1,"layout":"page","_id":"ck8izquwf000pn5jtfa9k1z6r","content":"<p><a href=\"https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw</a></p>\n<h3 id=\"Primitive-type-amp-Object-type\"><a href=\"#Primitive-type-amp-Object-type\" class=\"headerlink\" title=\"Primitive type &amp; Object type\"></a>Primitive type &amp; Object type</h3><ul>\n<li><p>在賦值給變數時會決定好是什麼type</p>\n</li>\n<li><p>賦值給變數</p>\n<ul>\n<li>會把數據放在一個記憶體位置，再把記憶體位置丟給變數</li>\n</ul>\n</li>\n<li><p><strong>Primitive type</strong> 原始型別</p>\n<ul>\n<li>唯一值，不會被其他變數參考<code>call by value</code></li>\n<li>型別<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>non-Primitive type</strong> 非原始型別</p>\n<ul>\n<li>非唯一值，所有變數可共同參考<code>call by referance</code></li>\n<li>型別<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Regx</li>\n<li>Function</li>\n<li>Date</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"call-by-value\"><a href=\"#call-by-value\" class=\"headerlink\" title=\"call by value\"></a>call by value</h3><ul>\n<li>賦值給變數時，會新建數據</li>\n</ul>\n<h3 id=\"call-by-referance\"><a href=\"#call-by-referance\" class=\"headerlink\" title=\"call by referance\"></a>call by referance</h3><ul>\n<li>賦值給變數時，會直接把記憶體位置丟給變數</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//call by value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">i = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i=4,b=1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"i=\"</span>+ i + <span class=\"string\">\",b=\"</span>+ b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call by referance</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> h = g;</span><br><span class=\"line\"></span><br><span class=\"line\">g.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">g.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is g object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is h object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy\"><a href=\"#deep-copy\" class=\"headerlink\" title=\"deep copy\"></a>deep copy</h3><ul>\n<li>深拷貝</li>\n<li>把<strong>變數a</strong>的值經過特殊處理丟給<strong>變數b</strong><ul>\n<li>建立全新的物件</li>\n</ul>\n</li>\n<li>兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連</li>\n<li>使用 <code>Object.assign</code>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能複製一層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125; , a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JSON.stringify</code> &amp; <code>JSON.parse</code><ul>\n<li>不過無法拷貝 Function、Set、Map…等型態<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 轉成 JSON string 在轉成全新的物件，可深拷貝所有層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"shallow-copy\"><a href=\"#shallow-copy\" class=\"headerlink\" title=\"shallow copy\"></a>shallow copy</h3><ul>\n<li>淺拷貝</li>\n<li>把<strong>變數a</strong>的值直接丟給<strong>變數b</strong>，不做額外處理<ul>\n<li>僅只會把<strong>變數a</strong>的記憶體位置丟給<strong>變數b</strong></li>\n</ul>\n</li>\n<li>參考到的會是同一個物件，動a會連b的值一起變<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ul>\n<li>js 的關鍵字</li>\n<li>代表物件本身</li>\n<li>最外層的 <strong>this</strong> 即是 <code>global object</code></li>\n<li>有建立新物件 <strong>this</strong>的參考指向才會轉成該物件</li>\n<li>當function 沒有綁定物件時，內部 <strong>this</strong>會直接參考 <code>global object</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.w\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.A\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Start change name\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.Change\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        changeName();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a change name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a.callName(this);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"===========================\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.C\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        a.callName(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">c.callName();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/yY9M-aGiTuCI0ioZfrN7Vw</a></p>\n<h3 id=\"Primitive-type-amp-Object-type\"><a href=\"#Primitive-type-amp-Object-type\" class=\"headerlink\" title=\"Primitive type &amp; Object type\"></a>Primitive type &amp; Object type</h3><ul>\n<li><p>在賦值給變數時會決定好是什麼type</p>\n</li>\n<li><p>賦值給變數</p>\n<ul>\n<li>會把數據放在一個記憶體位置，再把記憶體位置丟給變數</li>\n</ul>\n</li>\n<li><p><strong>Primitive type</strong> 原始型別</p>\n<ul>\n<li>唯一值，不會被其他變數參考<code>call by value</code></li>\n<li>型別<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>non-Primitive type</strong> 非原始型別</p>\n<ul>\n<li>非唯一值，所有變數可共同參考<code>call by referance</code></li>\n<li>型別<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Regx</li>\n<li>Function</li>\n<li>Date</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"call-by-value\"><a href=\"#call-by-value\" class=\"headerlink\" title=\"call by value\"></a>call by value</h3><ul>\n<li>賦值給變數時，會新建數據</li>\n</ul>\n<h3 id=\"call-by-referance\"><a href=\"#call-by-referance\" class=\"headerlink\" title=\"call by referance\"></a>call by referance</h3><ul>\n<li>賦值給變數時，會直接把記憶體位置丟給變數</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//call by value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">i = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//i=4,b=1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"i=\"</span>+ i + <span class=\"string\">\",b=\"</span>+ b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call by referance</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> h = g;</span><br><span class=\"line\"></span><br><span class=\"line\">g.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">g.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is g object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is h object\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//&#123;age: 20, sex: \"woman\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy\"><a href=\"#deep-copy\" class=\"headerlink\" title=\"deep copy\"></a>deep copy</h3><ul>\n<li>深拷貝</li>\n<li>把<strong>變數a</strong>的值經過特殊處理丟給<strong>變數b</strong><ul>\n<li>建立全新的物件</li>\n</ul>\n</li>\n<li>兩個變數的記憶體位置是不一樣的，兩個變數之間毫無關連</li>\n<li>使用 <code>Object.assign</code>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能複製一層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125; , a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JSON.stringify</code> &amp; <code>JSON.parse</code><ul>\n<li>不過無法拷貝 Function、Set、Map…等型態<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 轉成 JSON string 在轉成全新的物件，可深拷貝所有層</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">    ages: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        value: <span class=\"number\">10</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.sex = <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">a.ages.value = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.sex);<span class=\"comment\">//man</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.ages);<span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"shallow-copy\"><a href=\"#shallow-copy\" class=\"headerlink\" title=\"shallow copy\"></a>shallow copy</h3><ul>\n<li>淺拷貝</li>\n<li>把<strong>變數a</strong>的值直接丟給<strong>變數b</strong>，不做額外處理<ul>\n<li>僅只會把<strong>變數a</strong>的記憶體位置丟給<strong>變數b</strong></li>\n</ul>\n</li>\n<li>參考到的會是同一個物件，動a會連b的值一起變<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    age:<span class=\"number\">10</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">\"man\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after change a age , b value is \"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><ul>\n<li>js 的關鍵字</li>\n<li>代表物件本身</li>\n<li>最外層的 <strong>this</strong> 即是 <code>global object</code></li>\n<li>有建立新物件 <strong>this</strong>的參考指向才會轉成該物件</li>\n<li>當function 沒有綁定物件時，內部 <strong>this</strong>會直接參考 <code>global object</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.w\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.A\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Start change name\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);<span class=\"comment\">//global object</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Mr.Change\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        changeName();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"w name is \"</span> + w.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a change name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a.callName(this);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"===========================\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Mr.C\"</span>,</span><br><span class=\"line\">    callName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c name is \"</span> + <span class=\"keyword\">this</span>.name);<span class=\"comment\">//Mr.A</span></span><br><span class=\"line\">        a.callName(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">c.callName();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Jave Learning","date":"2020-01-28T20:13:13.000Z","_content":"\n* @ 符號\n    * 註解 **annotation**\n    * 使用範圍\n        * 給**編譯器**檢視\n        * 給**開發者**做設定\n    * 類型\n        * 系統定義\n            * @Override\n        * 元註解\n            * @Target\n            * @Retention\n            * @Documented\n            * @Inherited\n        * 自定義註解\n            * 宣告 `Interface` 前面加上 `@`\n        ```java\n        public @interface MyAnnotation1 {\n        }\n        ```\n\n\n","source":"Jave-Learning/index.md","raw":"---\ntitle: Jave Learning\ndate: 2020-01-29 04:13:13\n---\n\n* @ 符號\n    * 註解 **annotation**\n    * 使用範圍\n        * 給**編譯器**檢視\n        * 給**開發者**做設定\n    * 類型\n        * 系統定義\n            * @Override\n        * 元註解\n            * @Target\n            * @Retention\n            * @Documented\n            * @Inherited\n        * 自定義註解\n            * 宣告 `Interface` 前面加上 `@`\n        ```java\n        public @interface MyAnnotation1 {\n        }\n        ```\n\n\n","updated":"2020-01-29T17:17:58.783Z","path":"Jave-Learning/index.html","comments":1,"layout":"page","_id":"ck8izquwf000qn5jtec1e7y5y","content":"<ul>\n<li>@ 符號<ul>\n<li>註解 <strong>annotation</strong></li>\n<li>使用範圍<ul>\n<li>給<strong>編譯器</strong>檢視</li>\n<li>給<strong>開發者</strong>做設定</li>\n</ul>\n</li>\n<li>類型<ul>\n<li>系統定義<ul>\n<li>@Override</li>\n</ul>\n</li>\n<li>元註解<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Documented</li>\n<li>@Inherited</li>\n</ul>\n</li>\n<li>自定義註解<ul>\n<li>宣告 <code>Interface</code> 前面加上 <code>@</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation1 &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>@ 符號<ul>\n<li>註解 <strong>annotation</strong></li>\n<li>使用範圍<ul>\n<li>給<strong>編譯器</strong>檢視</li>\n<li>給<strong>開發者</strong>做設定</li>\n</ul>\n</li>\n<li>類型<ul>\n<li>系統定義<ul>\n<li>@Override</li>\n</ul>\n</li>\n<li>元註解<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Documented</li>\n<li>@Inherited</li>\n</ul>\n</li>\n<li>自定義註解<ul>\n<li>宣告 <code>Interface</code> 前面加上 <code>@</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation1 &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JSLearningNote_2020-01-02","date":"2020-03-02T15:57:04.000Z","_content":"### Scope\n* 程式執行的一個範圍\n* 圈定宣告的變數以及函式存取範圍\n* 分 `global scope (全域範圍)` & `local scope (區域範圍)` \n* 存取變數由 `內 -> 外`\n    * 稱為 `巢狀範疇 (Nested Scope)`\n    * 先判斷這變數是否是**在本區域建立的**\n    * 不是 **local scope** 則會往一層一層往外層找\n    * 最外層是 **global scope**\n    * 找到變數時立即停止動作，稱為**shadowing**  \n    * 外層無法調用內層的資訊\n\n### Lexical Scope\n* 稱為 `語彙範疇`\n* 在建立`執行環境(excution context)`時，會去判別哪些變數是 **global(外部)** 或是 **local(本身)**\n\n    ```js\n    var va = 'globalA';\n    var vg = 'globalG';\n\n    //local:  vb,va\n    //global: vg\n    function testScope(){\n        console.log(\"===== outter func start======\");\n        var vb = 'outterB';\n        var va = '@@clone globalA@@';\n        console.log(va,vb,vg);\n\n        testScope2();\n        //local:  vc\n        //global: va,vb,vg\n        function testScope2(){\n            console.log(\"===== inner func start======\");\n            var vc = 'innerC';\n            vb = '@@outterB change in testScope2@@';\n            vg = '@@globalG change in testScope2@@';\n            console.log(va,vb,vc,vg);\n            console.log(\"===== inner func end======\");\n        }\n        console.log(\"===== outter func end======\");\n    }\n\n    testScope();\n\n    console.log(va,vg);\n    ```\n\n### 閉包(Closure)\n* 當建立好 **excution context**，會把`scope`需要的參數都整理好\n* 變數是從 **外部** 引入時，數據會保存在此 `scope`\n* 把**非local variables**，拉進**excution context**\n* 確保數據的隱密性\n* 減少外部影響\n* 作為一個區域內的公用參數使用\n    ```js\n\n    function testClosure(message) {\n        setTimeout(function timer() {\n            console.log(message);\n        }, 1000);\n    }\n    \n    testClosure('Hello, 閉包!');\n\n    function testClosure2(a){\n\n        return function(){\n            console.log(\"closure = \" , a);\n        };\n    }\n    var ans = testClosure2(10);\n    ans();//closure = 10\n    ```\n\n### 柯里化(Currying)\n* 將 n 個參數的 function ， 拆解成 1 個參數 n 個 function \n* 即一個步驟，一個 function\n* 假如不是結尾，function return next function ，以 **closure** 帶入需要此階段的結果\n    ```js\n    // x + y\n    function normalFn(x,y){\n        console.log(\"normalFn x+y : \",x+y);\n    }\n    function curryingFn(x){\n        console.log(\"curryingStep1 x: \",x); \n        return function(y){\n            console.log(\"curryingStep2 x+y : \",x+y); \n        };\n    }\n\n    normalFn(2,3);\n    var step1 = curryingFn(2);\n\n    step1(3);//5\n    step1(4);//6\n    ```\n\n### Pure function\n* 相同的輸入，相同的輸出\n* 不會有額外的**副作用(Side Effect)**\n* 可移植、可測試\n* 不會因為外在環境的變化而改變**function**邏輯\n\n    ```js\n\n    var a = 10;\n    function impureFnc(b){\n        return a + b;\n    }\n    impureFnc(5);//15\n\n    function pureFnc(a,b){\n        retrun a + b;\n    }\n    pureFnc(5,10);//15\n    ```","source":"JSLearningNote-2020-01-02/index.md","raw":"---\ntitle: JSLearningNote_2020-01-02\ndate: 2020-03-02 23:57:04\n---\n### Scope\n* 程式執行的一個範圍\n* 圈定宣告的變數以及函式存取範圍\n* 分 `global scope (全域範圍)` & `local scope (區域範圍)` \n* 存取變數由 `內 -> 外`\n    * 稱為 `巢狀範疇 (Nested Scope)`\n    * 先判斷這變數是否是**在本區域建立的**\n    * 不是 **local scope** 則會往一層一層往外層找\n    * 最外層是 **global scope**\n    * 找到變數時立即停止動作，稱為**shadowing**  \n    * 外層無法調用內層的資訊\n\n### Lexical Scope\n* 稱為 `語彙範疇`\n* 在建立`執行環境(excution context)`時，會去判別哪些變數是 **global(外部)** 或是 **local(本身)**\n\n    ```js\n    var va = 'globalA';\n    var vg = 'globalG';\n\n    //local:  vb,va\n    //global: vg\n    function testScope(){\n        console.log(\"===== outter func start======\");\n        var vb = 'outterB';\n        var va = '@@clone globalA@@';\n        console.log(va,vb,vg);\n\n        testScope2();\n        //local:  vc\n        //global: va,vb,vg\n        function testScope2(){\n            console.log(\"===== inner func start======\");\n            var vc = 'innerC';\n            vb = '@@outterB change in testScope2@@';\n            vg = '@@globalG change in testScope2@@';\n            console.log(va,vb,vc,vg);\n            console.log(\"===== inner func end======\");\n        }\n        console.log(\"===== outter func end======\");\n    }\n\n    testScope();\n\n    console.log(va,vg);\n    ```\n\n### 閉包(Closure)\n* 當建立好 **excution context**，會把`scope`需要的參數都整理好\n* 變數是從 **外部** 引入時，數據會保存在此 `scope`\n* 把**非local variables**，拉進**excution context**\n* 確保數據的隱密性\n* 減少外部影響\n* 作為一個區域內的公用參數使用\n    ```js\n\n    function testClosure(message) {\n        setTimeout(function timer() {\n            console.log(message);\n        }, 1000);\n    }\n    \n    testClosure('Hello, 閉包!');\n\n    function testClosure2(a){\n\n        return function(){\n            console.log(\"closure = \" , a);\n        };\n    }\n    var ans = testClosure2(10);\n    ans();//closure = 10\n    ```\n\n### 柯里化(Currying)\n* 將 n 個參數的 function ， 拆解成 1 個參數 n 個 function \n* 即一個步驟，一個 function\n* 假如不是結尾，function return next function ，以 **closure** 帶入需要此階段的結果\n    ```js\n    // x + y\n    function normalFn(x,y){\n        console.log(\"normalFn x+y : \",x+y);\n    }\n    function curryingFn(x){\n        console.log(\"curryingStep1 x: \",x); \n        return function(y){\n            console.log(\"curryingStep2 x+y : \",x+y); \n        };\n    }\n\n    normalFn(2,3);\n    var step1 = curryingFn(2);\n\n    step1(3);//5\n    step1(4);//6\n    ```\n\n### Pure function\n* 相同的輸入，相同的輸出\n* 不會有額外的**副作用(Side Effect)**\n* 可移植、可測試\n* 不會因為外在環境的變化而改變**function**邏輯\n\n    ```js\n\n    var a = 10;\n    function impureFnc(b){\n        return a + b;\n    }\n    impureFnc(5);//15\n\n    function pureFnc(a,b){\n        retrun a + b;\n    }\n    pureFnc(5,10);//15\n    ```","updated":"2020-03-24T20:03:50.060Z","path":"JSLearningNote-2020-01-02/index.html","comments":1,"layout":"page","_id":"ck8izquwg000tn5jt92eubnju","content":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><ul>\n<li>程式執行的一個範圍</li>\n<li>圈定宣告的變數以及函式存取範圍</li>\n<li>分 <code>global scope (全域範圍)</code> &amp; <code>local scope (區域範圍)</code> </li>\n<li>存取變數由 <code>內 -&gt; 外</code><ul>\n<li>稱為 <code>巢狀範疇 (Nested Scope)</code></li>\n<li>先判斷這變數是否是<strong>在本區域建立的</strong></li>\n<li>不是 <strong>local scope</strong> 則會往一層一層往外層找</li>\n<li>最外層是 <strong>global scope</strong></li>\n<li>找到變數時立即停止動作，稱為<strong>shadowing</strong>  </li>\n<li>外層無法調用內層的資訊</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lexical-Scope\"><a href=\"#Lexical-Scope\" class=\"headerlink\" title=\"Lexical Scope\"></a>Lexical Scope</h3><ul>\n<li><p>稱為 <code>語彙範疇</code></p>\n</li>\n<li><p>在建立<code>執行環境(excution context)</code>時，會去判別哪些變數是 <strong>global(外部)</strong> 或是 <strong>local(本身)</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> va = <span class=\"string\">'globalA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vg = <span class=\"string\">'globalG'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//local:  vb,va</span></span><br><span class=\"line\"><span class=\"comment\">//global: vg</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func start======\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vb = <span class=\"string\">'outterB'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> va = <span class=\"string\">'@@clone globalA@@'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(va,vb,vg);</span><br><span class=\"line\"></span><br><span class=\"line\">    testScope2();</span><br><span class=\"line\">    <span class=\"comment\">//local:  vc</span></span><br><span class=\"line\">    <span class=\"comment\">//global: va,vb,vg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func start======\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vc = <span class=\"string\">'innerC'</span>;</span><br><span class=\"line\">        vb = <span class=\"string\">'@@outterB change in testScope2@@'</span>;</span><br><span class=\"line\">        vg = <span class=\"string\">'@@globalG change in testScope2@@'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(va,vb,vc,vg);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func end======\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func end======\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScope();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(va,vg);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"閉包-Closure\"><a href=\"#閉包-Closure\" class=\"headerlink\" title=\"閉包(Closure)\"></a>閉包(Closure)</h3><ul>\n<li>當建立好 <strong>excution context</strong>，會把<code>scope</code>需要的參數都整理好</li>\n<li>變數是從 <strong>外部</strong> 引入時，數據會保存在此 <code>scope</code></li>\n<li>把<strong>非local variables</strong>，拉進<strong>excution context</strong></li>\n<li>確保數據的隱密性</li>\n<li>減少外部影響</li>\n<li>作為一個區域內的公用參數使用  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testClosure(<span class=\"string\">'Hello, 閉包!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure2</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"closure = \"</span> , a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = testClosure2(<span class=\"number\">10</span>);</span><br><span class=\"line\">ans();<span class=\"comment\">//closure = 10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><ul>\n<li>將 n 個參數的 function ， 拆解成 1 個參數 n 個 function </li>\n<li>即一個步驟，一個 function</li>\n<li>假如不是結尾，function return next function ，以 <strong>closure</strong> 帶入需要此階段的結果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x + y</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalFn</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"normalFn x+y : \"</span>,x+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingFn</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep1 x: \"</span>,x); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep2 x+y : \"</span>,x+y); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">normalFn(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = curryingFn(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">step1(<span class=\"number\">3</span>);<span class=\"comment\">//5</span></span><br><span class=\"line\">step1(<span class=\"number\">4</span>);<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Pure-function\"><a href=\"#Pure-function\" class=\"headerlink\" title=\"Pure function\"></a>Pure function</h3><ul>\n<li><p>相同的輸入，相同的輸出</p>\n</li>\n<li><p>不會有額外的<strong>副作用(Side Effect)</strong></p>\n</li>\n<li><p>可移植、可測試</p>\n</li>\n<li><p>不會因為外在環境的變化而改變<strong>function</strong>邏輯</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impureFnc</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">impureFnc(<span class=\"number\">5</span>);<span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFnc</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    retrun a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pureFnc(<span class=\"number\">5</span>,<span class=\"number\">10</span>);<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><ul>\n<li>程式執行的一個範圍</li>\n<li>圈定宣告的變數以及函式存取範圍</li>\n<li>分 <code>global scope (全域範圍)</code> &amp; <code>local scope (區域範圍)</code> </li>\n<li>存取變數由 <code>內 -&gt; 外</code><ul>\n<li>稱為 <code>巢狀範疇 (Nested Scope)</code></li>\n<li>先判斷這變數是否是<strong>在本區域建立的</strong></li>\n<li>不是 <strong>local scope</strong> 則會往一層一層往外層找</li>\n<li>最外層是 <strong>global scope</strong></li>\n<li>找到變數時立即停止動作，稱為<strong>shadowing</strong>  </li>\n<li>外層無法調用內層的資訊</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lexical-Scope\"><a href=\"#Lexical-Scope\" class=\"headerlink\" title=\"Lexical Scope\"></a>Lexical Scope</h3><ul>\n<li><p>稱為 <code>語彙範疇</code></p>\n</li>\n<li><p>在建立<code>執行環境(excution context)</code>時，會去判別哪些變數是 <strong>global(外部)</strong> 或是 <strong>local(本身)</strong></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> va = <span class=\"string\">'globalA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vg = <span class=\"string\">'globalG'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//local:  vb,va</span></span><br><span class=\"line\"><span class=\"comment\">//global: vg</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func start======\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vb = <span class=\"string\">'outterB'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> va = <span class=\"string\">'@@clone globalA@@'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(va,vb,vg);</span><br><span class=\"line\"></span><br><span class=\"line\">    testScope2();</span><br><span class=\"line\">    <span class=\"comment\">//local:  vc</span></span><br><span class=\"line\">    <span class=\"comment\">//global: va,vb,vg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScope2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func start======\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> vc = <span class=\"string\">'innerC'</span>;</span><br><span class=\"line\">        vb = <span class=\"string\">'@@outterB change in testScope2@@'</span>;</span><br><span class=\"line\">        vg = <span class=\"string\">'@@globalG change in testScope2@@'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(va,vb,vc,vg);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== inner func end======\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"===== outter func end======\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScope();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(va,vg);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"閉包-Closure\"><a href=\"#閉包-Closure\" class=\"headerlink\" title=\"閉包(Closure)\"></a>閉包(Closure)</h3><ul>\n<li>當建立好 <strong>excution context</strong>，會把<code>scope</code>需要的參數都整理好</li>\n<li>變數是從 <strong>外部</strong> 引入時，數據會保存在此 <code>scope</code></li>\n<li>把<strong>非local variables</strong>，拉進<strong>excution context</strong></li>\n<li>確保數據的隱密性</li>\n<li>減少外部影響</li>\n<li>作為一個區域內的公用參數使用  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testClosure(<span class=\"string\">'Hello, 閉包!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testClosure2</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"closure = \"</span> , a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = testClosure2(<span class=\"number\">10</span>);</span><br><span class=\"line\">ans();<span class=\"comment\">//closure = 10</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><ul>\n<li>將 n 個參數的 function ， 拆解成 1 個參數 n 個 function </li>\n<li>即一個步驟，一個 function</li>\n<li>假如不是結尾，function return next function ，以 <strong>closure</strong> 帶入需要此階段的結果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x + y</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalFn</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"normalFn x+y : \"</span>,x+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingFn</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep1 x: \"</span>,x); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"curryingStep2 x+y : \"</span>,x+y); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">normalFn(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> step1 = curryingFn(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">step1(<span class=\"number\">3</span>);<span class=\"comment\">//5</span></span><br><span class=\"line\">step1(<span class=\"number\">4</span>);<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Pure-function\"><a href=\"#Pure-function\" class=\"headerlink\" title=\"Pure function\"></a>Pure function</h3><ul>\n<li><p>相同的輸入，相同的輸出</p>\n</li>\n<li><p>不會有額外的<strong>副作用(Side Effect)</strong></p>\n</li>\n<li><p>可移植、可測試</p>\n</li>\n<li><p>不會因為外在環境的變化而改變<strong>function</strong>邏輯</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impureFnc</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">impureFnc(<span class=\"number\">5</span>);<span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFnc</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    retrun a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pureFnc(<span class=\"number\">5</span>,<span class=\"number\">10</span>);<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"JSLearningNote_2019-12-24","date":"2020-03-02T15:56:45.000Z","_content":"\nhttps://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\n\n# 2019-12-24  Learning\n\n### array\n* 以 `[]` 為空陣列\n* 是一種`似列表(list-like)`的物件\n* 具有**長度(length)**\n* 每格位置可存放資訊\n    * 資訊包括 \n        * 物件 **(object)**\n        * 基礎類型 **(number 、 string 、 boolean )**\n        * 陣列 **(array)**\n        * 函式 **(function)**\n* 一個陣列裡可以存放不同的資訊\n\n``` javascript\n    var i = [\n        0,//number\n        'greeting',//string\n        false,//boolean\n        {\n            name : \"tony\"\n        },//object\n        [1,2,3,4],//array\n        function(){\n            console.log(\"Hello JS!\")\n        }//function\n    ];\n\n    //印出陣列\n    console.log(i);\n\n    //遍歷陣列資訊\n    i.map((item)=>{\n        console.log(item);\n    });\n```\n\n### arguments \n* 在 `function` 裡，自帶的參數\n* 在 `function` 範圍內輸入 **arguments**，就可以讀取呼叫此函數所帶入的參數\n* Arguments object\n    * 屬於`偽陣列`\n    * 以 object 模仿 array\n    * 有自帶的 length\n    * 可以用 `array.prototype.slice.call(argument)`轉成 array\n    * 帶入多少參數 `arguments.length` 就有多長\n```js\nfunction testArgFnc(a,b,c){\n    console.log(arguments);\n    var argList = Array.prototype.slice.call(arguments);\n    console.log(argList);    \n}\n\n//arguments.length = 2\ntestArgFnc(1,2);\n//arguments.length = 5\ntestArgFnc(1,2,4,5,3);\n```\n\n### spread `...`\n* 展開語法\n* 能使 `array , object , string`，展開為單個數值\n    * 能把展開的數值分配給 array or object\n    * array 是一個`array[index]`為單位\n    * object 是以 `key:value`為單位\n    * string 是`一個字`為單位\n* 在建立 `function`時，設定參數時可用 `...Arags` 接住參數\n    * 會以**陣列**方式呈現\n* 在呼叫`function`時可用 `...args`，展開分配給 `function`\n    >`p.s object 不行，會報錯`\n```js\n\nvar a = [1,2,3,4,5];\nconsole.log(\"this is a\");\nconsole.log(a);\nvar clone_a = [...a];\nconsole.log(\"clone_a\");\nconsole.log(clone_a);\n\n\nvar b= {a:1,b:\"test\"};\nconsole.log(\"this is b\");\nconsole.log(b);\nvar clone_b = {...b};\nconsole.log(\"clone_b\");\nconsole.log(clone_b);\n\n\nvar c = \"testString\";\nconsole.log(\"this is c\");\nconsole.log(c);\nvar cloneArray_c = [...c];\nconsole.log(\"cloneArray_c\");\nconsole.log(cloneArray_c);\nvar cloneObject_c = {...c};\nconsole.log(\"cloneObject_c\");\nconsole.log(cloneObject_c);\n\n\nfunction funcSpread(...args){\n    console.log(args);\n}\nfunction funcCallSpread(args){\n    console.log(args);\n    console.log(arguments);\n}\n/*\n    [Array(5)]\n        0: (5) [1, 2, 3, 4, 5]\n        length: 1\n        __proto__: Array(0)\n*/\nfunSpread(a);\n//1\nfuncCallSpread(...a);\n```\n### syntax parsers\n* 語法分析\n* js 的編譯是`直譯式(Interpreted)`，解析語法是逐字讀取\n* 如果該字元沒有相對意義的時候會產生錯誤\n* js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號\n\n### function overloading\n* js 沒有真正意義上的 overloading\n* 因為是`直譯式`兩個相同 `function name `宣告時，後面會蓋掉前面的\n* js呼叫 `function`，給的參數數量可以不用給到全部\n* 以上述特性可以去模擬 overloading\n```js\nfunction funcOverloading(a,b,c){\n    if(arguments.length === 0)\n        return \"no arg\";\n    if(arguments.length === 1)\n        return a;\n    if(arguments.length === 2)\n        return a + \"-\"+ b;\n    if(arguments.length === 3)\n        return a + \"-\"+ b + \"-\"+ c;\n\n}\n//no arg\nfuncOverloading();\n//1\nfuncOverloading(1);\n//1-2\nfuncOverloading(1,2);\n// 1-2-3\nfuncOverloading(1,2,3);\n\n```\n### Execution Context\n* `直譯式語言`則是必須依賴`執行環境 (execution context)`\n* 單執行序\n* 以堆疊的方式保存所有的`執行環境`\n    * 後面建立的會在上面\n    * 當程式結束後`執行環境`就會被移除\n* 會有很多個`執行環境 `\n* 一開始會自動建立一個`global context (全域執行環境)`\n    * `global context`只會有一個\n    * `global context` 會一直存在\n* 每個`函式(function)`會建立一個`function context(執行環境)`\n* 生成`執行環境`時會有兩階段\n    * 建立階段\n        * 建立 `scope chain`\n        * 宣告變數\b & 函式 = **hoisting**\n        * 綁定 **this**\n        * 建立 `Outer Environment`\n    * 執行階段\n        * 賦值給變數\n![](https://i.imgur.com/pPuFspr.png)\n\n### hoisting\n* 提昇\n* 在`執行環境(Execution Context)`進入`執行階段(Execution Phase)`前，對此環境的`變數 ＆ 函數`先進行宣告\n* 相當於把`變數 ＆ 函數`往上拉到程式碼最上層一樣\n* `變數`提昇只單純做宣告動作，不會進行賦值，所以初始值會是**undefined**\n```js\n//success\ntestHoisting();\nfunction testHoisting(){\n    //undefined\n    console.log(a);\n\n    var a = 10;\n}\n\n//undefined\nconsole.log(testVarFuncHoisting);\n//error Uncaught TypeError: testVarFuncHoisting is not a function\ntestVarFuncHoisting();\nvar testVarFuncHoisting = function(){\n    //undefined\n    console.log(a);\n    var a = 10;\n};\n\n```\n### Immediatelty Invoked Function Expression `(IIFE)S` \n* 定義完馬上就執行的`JavaScript function`\n```js\n//Function Statement\nfunction testIIFES(){\n    console.log(\"test IIFEs\");\n}();\n\n//Function Expression\nvar testIIFES2 = function(){\n    console.log(\"test IIFEs2\");\n}();\n\n\n```\n### Operator ()\n* Function declaration\n    * 定義函式\n* Function Call\n    * 呼叫 Function時 \n    * `()`裡面可以帶入函式參數(arguments)\n* Grouping\n    * 在一個 **Experssion**有多個**Operator**，對`()`裡的內容會優先執行\n\n###  () + IIFES\n* 在程式執行時就可以執行`匿名函式`\n* 宣告`匿名函式`無變數承接是會出錯的\n* 在`匿名函式`外面加上 **()**，可防止出錯\n* 函式執行完後直接釋放記憶體\n* 可以想像 `()` 就是在執行一個 空 function 只會 **return**參數\n```js \nfunction testParentheses(a){\n    return a;\n}\nvar t = 1 + testParentheses(2+8) * 2 ;\nconsole.log(t);//22\n\n```\n```js\n(function(){\n    console.log(\"test IIFEs3\");\n}());\n```","source":"JSLearningNote-2019-12-24/index.md","raw":"---\ntitle: JSLearningNote_2019-12-24\ndate: 2020-03-02 23:56:45\n---\n\nhttps://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\n\n# 2019-12-24  Learning\n\n### array\n* 以 `[]` 為空陣列\n* 是一種`似列表(list-like)`的物件\n* 具有**長度(length)**\n* 每格位置可存放資訊\n    * 資訊包括 \n        * 物件 **(object)**\n        * 基礎類型 **(number 、 string 、 boolean )**\n        * 陣列 **(array)**\n        * 函式 **(function)**\n* 一個陣列裡可以存放不同的資訊\n\n``` javascript\n    var i = [\n        0,//number\n        'greeting',//string\n        false,//boolean\n        {\n            name : \"tony\"\n        },//object\n        [1,2,3,4],//array\n        function(){\n            console.log(\"Hello JS!\")\n        }//function\n    ];\n\n    //印出陣列\n    console.log(i);\n\n    //遍歷陣列資訊\n    i.map((item)=>{\n        console.log(item);\n    });\n```\n\n### arguments \n* 在 `function` 裡，自帶的參數\n* 在 `function` 範圍內輸入 **arguments**，就可以讀取呼叫此函數所帶入的參數\n* Arguments object\n    * 屬於`偽陣列`\n    * 以 object 模仿 array\n    * 有自帶的 length\n    * 可以用 `array.prototype.slice.call(argument)`轉成 array\n    * 帶入多少參數 `arguments.length` 就有多長\n```js\nfunction testArgFnc(a,b,c){\n    console.log(arguments);\n    var argList = Array.prototype.slice.call(arguments);\n    console.log(argList);    \n}\n\n//arguments.length = 2\ntestArgFnc(1,2);\n//arguments.length = 5\ntestArgFnc(1,2,4,5,3);\n```\n\n### spread `...`\n* 展開語法\n* 能使 `array , object , string`，展開為單個數值\n    * 能把展開的數值分配給 array or object\n    * array 是一個`array[index]`為單位\n    * object 是以 `key:value`為單位\n    * string 是`一個字`為單位\n* 在建立 `function`時，設定參數時可用 `...Arags` 接住參數\n    * 會以**陣列**方式呈現\n* 在呼叫`function`時可用 `...args`，展開分配給 `function`\n    >`p.s object 不行，會報錯`\n```js\n\nvar a = [1,2,3,4,5];\nconsole.log(\"this is a\");\nconsole.log(a);\nvar clone_a = [...a];\nconsole.log(\"clone_a\");\nconsole.log(clone_a);\n\n\nvar b= {a:1,b:\"test\"};\nconsole.log(\"this is b\");\nconsole.log(b);\nvar clone_b = {...b};\nconsole.log(\"clone_b\");\nconsole.log(clone_b);\n\n\nvar c = \"testString\";\nconsole.log(\"this is c\");\nconsole.log(c);\nvar cloneArray_c = [...c];\nconsole.log(\"cloneArray_c\");\nconsole.log(cloneArray_c);\nvar cloneObject_c = {...c};\nconsole.log(\"cloneObject_c\");\nconsole.log(cloneObject_c);\n\n\nfunction funcSpread(...args){\n    console.log(args);\n}\nfunction funcCallSpread(args){\n    console.log(args);\n    console.log(arguments);\n}\n/*\n    [Array(5)]\n        0: (5) [1, 2, 3, 4, 5]\n        length: 1\n        __proto__: Array(0)\n*/\nfunSpread(a);\n//1\nfuncCallSpread(...a);\n```\n### syntax parsers\n* 語法分析\n* js 的編譯是`直譯式(Interpreted)`，解析語法是逐字讀取\n* 如果該字元沒有相對意義的時候會產生錯誤\n* js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號\n\n### function overloading\n* js 沒有真正意義上的 overloading\n* 因為是`直譯式`兩個相同 `function name `宣告時，後面會蓋掉前面的\n* js呼叫 `function`，給的參數數量可以不用給到全部\n* 以上述特性可以去模擬 overloading\n```js\nfunction funcOverloading(a,b,c){\n    if(arguments.length === 0)\n        return \"no arg\";\n    if(arguments.length === 1)\n        return a;\n    if(arguments.length === 2)\n        return a + \"-\"+ b;\n    if(arguments.length === 3)\n        return a + \"-\"+ b + \"-\"+ c;\n\n}\n//no arg\nfuncOverloading();\n//1\nfuncOverloading(1);\n//1-2\nfuncOverloading(1,2);\n// 1-2-3\nfuncOverloading(1,2,3);\n\n```\n### Execution Context\n* `直譯式語言`則是必須依賴`執行環境 (execution context)`\n* 單執行序\n* 以堆疊的方式保存所有的`執行環境`\n    * 後面建立的會在上面\n    * 當程式結束後`執行環境`就會被移除\n* 會有很多個`執行環境 `\n* 一開始會自動建立一個`global context (全域執行環境)`\n    * `global context`只會有一個\n    * `global context` 會一直存在\n* 每個`函式(function)`會建立一個`function context(執行環境)`\n* 生成`執行環境`時會有兩階段\n    * 建立階段\n        * 建立 `scope chain`\n        * 宣告變數\b & 函式 = **hoisting**\n        * 綁定 **this**\n        * 建立 `Outer Environment`\n    * 執行階段\n        * 賦值給變數\n![](https://i.imgur.com/pPuFspr.png)\n\n### hoisting\n* 提昇\n* 在`執行環境(Execution Context)`進入`執行階段(Execution Phase)`前，對此環境的`變數 ＆ 函數`先進行宣告\n* 相當於把`變數 ＆ 函數`往上拉到程式碼最上層一樣\n* `變數`提昇只單純做宣告動作，不會進行賦值，所以初始值會是**undefined**\n```js\n//success\ntestHoisting();\nfunction testHoisting(){\n    //undefined\n    console.log(a);\n\n    var a = 10;\n}\n\n//undefined\nconsole.log(testVarFuncHoisting);\n//error Uncaught TypeError: testVarFuncHoisting is not a function\ntestVarFuncHoisting();\nvar testVarFuncHoisting = function(){\n    //undefined\n    console.log(a);\n    var a = 10;\n};\n\n```\n### Immediatelty Invoked Function Expression `(IIFE)S` \n* 定義完馬上就執行的`JavaScript function`\n```js\n//Function Statement\nfunction testIIFES(){\n    console.log(\"test IIFEs\");\n}();\n\n//Function Expression\nvar testIIFES2 = function(){\n    console.log(\"test IIFEs2\");\n}();\n\n\n```\n### Operator ()\n* Function declaration\n    * 定義函式\n* Function Call\n    * 呼叫 Function時 \n    * `()`裡面可以帶入函式參數(arguments)\n* Grouping\n    * 在一個 **Experssion**有多個**Operator**，對`()`裡的內容會優先執行\n\n###  () + IIFES\n* 在程式執行時就可以執行`匿名函式`\n* 宣告`匿名函式`無變數承接是會出錯的\n* 在`匿名函式`外面加上 **()**，可防止出錯\n* 函式執行完後直接釋放記憶體\n* 可以想像 `()` 就是在執行一個 空 function 只會 **return**參數\n```js \nfunction testParentheses(a){\n    return a;\n}\nvar t = 1 + testParentheses(2+8) * 2 ;\nconsole.log(t);//22\n\n```\n```js\n(function(){\n    console.log(\"test IIFEs3\");\n}());\n```","updated":"2020-03-19T15:55:29.512Z","path":"JSLearningNote-2019-12-24/index.html","comments":1,"layout":"page","_id":"ck8izquwh000un5jt7ec2090b","content":"<p><a href=\"https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both</a></p>\n<h1 id=\"2019-12-24-Learning\"><a href=\"#2019-12-24-Learning\" class=\"headerlink\" title=\"2019-12-24  Learning\"></a>2019-12-24  Learning</h1><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><ul>\n<li>以 <code>[]</code> 為空陣列</li>\n<li>是一種<code>似列表(list-like)</code>的物件</li>\n<li>具有<strong>長度(length)</strong></li>\n<li>每格位置可存放資訊<ul>\n<li>資訊包括 <ul>\n<li>物件 <strong>(object)</strong></li>\n<li>基礎類型 <strong>(number 、 string 、 boolean )</strong></li>\n<li>陣列 <strong>(array)</strong></li>\n<li>函式 <strong>(function)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個陣列裡可以存放不同的資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = [</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">    <span class=\"string\">'greeting'</span>,<span class=\"comment\">//string</span></span><br><span class=\"line\">    <span class=\"literal\">false</span>,<span class=\"comment\">//boolean</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name : <span class=\"string\">\"tony\"</span></span><br><span class=\"line\">    &#125;,<span class=\"comment\">//object</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"comment\">//array</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello JS!\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"comment\">//function</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//印出陣列</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍歷陣列資訊</span></span><br><span class=\"line\">i.map(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><ul>\n<li>在 <code>function</code> 裡，自帶的參數</li>\n<li>在 <code>function</code> 範圍內輸入 <strong>arguments</strong>，就可以讀取呼叫此函數所帶入的參數</li>\n<li>Arguments object<ul>\n<li>屬於<code>偽陣列</code></li>\n<li>以 object 模仿 array</li>\n<li>有自帶的 length</li>\n<li>可以用 <code>array.prototype.slice.call(argument)</code>轉成 array</li>\n<li>帶入多少參數 <code>arguments.length</code> 就有多長<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArgFnc</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argList = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argList);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 2</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 5</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spread\"><a href=\"#spread\" class=\"headerlink\" title=\"spread ...\"></a>spread <code>...</code></h3><ul>\n<li>展開語法</li>\n<li>能使 <code>array , object , string</code>，展開為單個數值<ul>\n<li>能把展開的數值分配給 array or object</li>\n<li>array 是一個<code>array[index]</code>為單位</li>\n<li>object 是以 <code>key:value</code>為單位</li>\n<li>string 是<code>一個字</code>為單位</li>\n</ul>\n</li>\n<li>在建立 <code>function</code>時，設定參數時可用 <code>...Arags</code> 接住參數<ul>\n<li>會以<strong>陣列</strong>方式呈現</li>\n</ul>\n</li>\n<li>在呼叫<code>function</code>時可用 <code>...args</code>，展開分配給 <code>function</code><blockquote>\n<p><code>p.s object 不行，會報錯</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_a = [...a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b= &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_b = &#123;...b&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">\"testString\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneArray_c = [...c];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneArray_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneArray_c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObject_c = &#123;...c&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneObject_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneObject_c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcSpread</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcCallSpread</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    [Array(5)]</span></span><br><span class=\"line\"><span class=\"comment\">        0: (5) [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">        length: 1</span></span><br><span class=\"line\"><span class=\"comment\">        __proto__: Array(0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">funSpread(a);</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcCallSpread(...a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"syntax-parsers\"><a href=\"#syntax-parsers\" class=\"headerlink\" title=\"syntax parsers\"></a>syntax parsers</h3></li>\n<li>語法分析</li>\n<li>js 的編譯是<code>直譯式(Interpreted)</code>，解析語法是逐字讀取</li>\n<li>如果該字元沒有相對意義的時候會產生錯誤</li>\n<li>js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號</li>\n</ul>\n<h3 id=\"function-overloading\"><a href=\"#function-overloading\" class=\"headerlink\" title=\"function overloading\"></a>function overloading</h3><ul>\n<li>js 沒有真正意義上的 overloading</li>\n<li>因為是<code>直譯式</code>兩個相同 <code>function name</code>宣告時，後面會蓋掉前面的</li>\n<li>js呼叫 <code>function</code>，給的參數數量可以不用給到全部</li>\n<li>以上述特性可以去模擬 overloading<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOverloading</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"no arg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b + <span class=\"string\">\"-\"</span>+ c;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//no arg</span></span><br><span class=\"line\">funcOverloading();</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//1-2</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Execution-Context\"><a href=\"#Execution-Context\" class=\"headerlink\" title=\"Execution Context\"></a>Execution Context</h3></li>\n<li><code>直譯式語言</code>則是必須依賴<code>執行環境 (execution context)</code></li>\n<li>單執行序</li>\n<li>以堆疊的方式保存所有的<code>執行環境</code><ul>\n<li>後面建立的會在上面</li>\n<li>當程式結束後<code>執行環境</code>就會被移除</li>\n</ul>\n</li>\n<li>會有很多個<code>執行環境</code></li>\n<li>一開始會自動建立一個<code>global context (全域執行環境)</code><ul>\n<li><code>global context</code>只會有一個</li>\n<li><code>global context</code> 會一直存在</li>\n</ul>\n</li>\n<li>每個<code>函式(function)</code>會建立一個<code>function context(執行環境)</code></li>\n<li>生成<code>執行環境</code>時會有兩階段<ul>\n<li>建立階段<ul>\n<li>建立 <code>scope chain</code></li>\n<li>宣告變數\b &amp; 函式 = <strong>hoisting</strong></li>\n<li>綁定 <strong>this</strong></li>\n<li>建立 <code>Outer Environment</code></li>\n</ul>\n</li>\n<li>執行階段<ul>\n<li>賦值給變數<br><img src=\"https://i.imgur.com/pPuFspr.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hoisting\"><a href=\"#hoisting\" class=\"headerlink\" title=\"hoisting\"></a>hoisting</h3><ul>\n<li>提昇</li>\n<li>在<code>執行環境(Execution Context)</code>進入<code>執行階段(Execution Phase)</code>前，對此環境的<code>變數 ＆ 函數</code>先進行宣告</li>\n<li>相當於把<code>變數 ＆ 函數</code>往上拉到程式碼最上層一樣</li>\n<li><code>變數</code>提昇只單純做宣告動作，不會進行賦值，所以初始值會是<strong>undefined</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//success</span></span><br><span class=\"line\">testHoisting();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testHoisting</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testVarFuncHoisting);</span><br><span class=\"line\"><span class=\"comment\">//error Uncaught TypeError: testVarFuncHoisting is not a function</span></span><br><span class=\"line\">testVarFuncHoisting();</span><br><span class=\"line\"><span class=\"keyword\">var</span> testVarFuncHoisting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Immediatelty-Invoked-Function-Expression-IIFE-S\"><a href=\"#Immediatelty-Invoked-Function-Expression-IIFE-S\" class=\"headerlink\" title=\"Immediatelty Invoked Function Expression (IIFE)S\"></a>Immediatelty Invoked Function Expression <code>(IIFE)S</code></h3></li>\n<li>定義完馬上就執行的<code>JavaScript function</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function Statement</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testIIFES</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs\"</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testIIFES2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs2\"</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator ()\"></a>Operator ()</h3></li>\n<li>Function declaration<ul>\n<li>定義函式</li>\n</ul>\n</li>\n<li>Function Call<ul>\n<li>呼叫 Function時 </li>\n<li><code>()</code>裡面可以帶入函式參數(arguments)</li>\n</ul>\n</li>\n<li>Grouping<ul>\n<li>在一個 <strong>Experssion</strong>有多個<strong>Operator</strong>，對<code>()</code>裡的內容會優先執行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IIFES\"><a href=\"#IIFES\" class=\"headerlink\" title=\"() + IIFES\"></a>() + IIFES</h3><ul>\n<li>在程式執行時就可以執行<code>匿名函式</code></li>\n<li>宣告<code>匿名函式</code>無變數承接是會出錯的</li>\n<li>在<code>匿名函式</code>外面加上 <strong>()</strong>，可防止出錯</li>\n<li>函式執行完後直接釋放記憶體</li>\n<li>可以想像 <code>()</code> 就是在執行一個 空 function 只會 <strong>return</strong>參數<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testParentheses</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"number\">1</span> + testParentheses(<span class=\"number\">2</span>+<span class=\"number\">8</span>) * <span class=\"number\">2</span> ;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t);<span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs3\"</span>);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both\" target=\"_blank\" rel=\"noopener\">https://hackmd.io/oQy-dejbQn2Ene5ebQJanQ?both</a></p>\n<h1 id=\"2019-12-24-Learning\"><a href=\"#2019-12-24-Learning\" class=\"headerlink\" title=\"2019-12-24  Learning\"></a>2019-12-24  Learning</h1><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><ul>\n<li>以 <code>[]</code> 為空陣列</li>\n<li>是一種<code>似列表(list-like)</code>的物件</li>\n<li>具有<strong>長度(length)</strong></li>\n<li>每格位置可存放資訊<ul>\n<li>資訊包括 <ul>\n<li>物件 <strong>(object)</strong></li>\n<li>基礎類型 <strong>(number 、 string 、 boolean )</strong></li>\n<li>陣列 <strong>(array)</strong></li>\n<li>函式 <strong>(function)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個陣列裡可以存放不同的資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = [</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"comment\">//number</span></span><br><span class=\"line\">    <span class=\"string\">'greeting'</span>,<span class=\"comment\">//string</span></span><br><span class=\"line\">    <span class=\"literal\">false</span>,<span class=\"comment\">//boolean</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name : <span class=\"string\">\"tony\"</span></span><br><span class=\"line\">    &#125;,<span class=\"comment\">//object</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],<span class=\"comment\">//array</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello JS!\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"comment\">//function</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//印出陣列</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍歷陣列資訊</span></span><br><span class=\"line\">i.map(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><ul>\n<li>在 <code>function</code> 裡，自帶的參數</li>\n<li>在 <code>function</code> 範圍內輸入 <strong>arguments</strong>，就可以讀取呼叫此函數所帶入的參數</li>\n<li>Arguments object<ul>\n<li>屬於<code>偽陣列</code></li>\n<li>以 object 模仿 array</li>\n<li>有自帶的 length</li>\n<li>可以用 <code>array.prototype.slice.call(argument)</code>轉成 array</li>\n<li>帶入多少參數 <code>arguments.length</code> 就有多長<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArgFnc</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argList = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argList);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 2</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//arguments.length = 5</span></span><br><span class=\"line\">testArgFnc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spread\"><a href=\"#spread\" class=\"headerlink\" title=\"spread ...\"></a>spread <code>...</code></h3><ul>\n<li>展開語法</li>\n<li>能使 <code>array , object , string</code>，展開為單個數值<ul>\n<li>能把展開的數值分配給 array or object</li>\n<li>array 是一個<code>array[index]</code>為單位</li>\n<li>object 是以 <code>key:value</code>為單位</li>\n<li>string 是<code>一個字</code>為單位</li>\n</ul>\n</li>\n<li>在建立 <code>function</code>時，設定參數時可用 <code>...Arags</code> 接住參數<ul>\n<li>會以<strong>陣列</strong>方式呈現</li>\n</ul>\n</li>\n<li>在呼叫<code>function</code>時可用 <code>...args</code>，展開分配給 <code>function</code><blockquote>\n<p><code>p.s object 不行，會報錯</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_a = [...a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b= &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone_b = &#123;...b&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"clone_b\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone_b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">\"testString\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"this is c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneArray_c = [...c];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneArray_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneArray_c);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObject_c = &#123;...c&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"cloneObject_c\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cloneObject_c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcSpread</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcCallSpread</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    [Array(5)]</span></span><br><span class=\"line\"><span class=\"comment\">        0: (5) [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">        length: 1</span></span><br><span class=\"line\"><span class=\"comment\">        __proto__: Array(0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">funSpread(a);</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcCallSpread(...a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"syntax-parsers\"><a href=\"#syntax-parsers\" class=\"headerlink\" title=\"syntax parsers\"></a>syntax parsers</h3></li>\n<li>語法分析</li>\n<li>js 的編譯是<code>直譯式(Interpreted)</code>，解析語法是逐字讀取</li>\n<li>如果該字元沒有相對意義的時候會產生錯誤</li>\n<li>js 核心編譯引擎會自動幫你在它認為的句尾上自動加上分號</li>\n</ul>\n<h3 id=\"function-overloading\"><a href=\"#function-overloading\" class=\"headerlink\" title=\"function overloading\"></a>function overloading</h3><ul>\n<li>js 沒有真正意義上的 overloading</li>\n<li>因為是<code>直譯式</code>兩個相同 <code>function name</code>宣告時，後面會蓋掉前面的</li>\n<li>js呼叫 <code>function</code>，給的參數數量可以不用給到全部</li>\n<li>以上述特性可以去模擬 overloading<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOverloading</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"no arg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length === <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"string\">\"-\"</span>+ b + <span class=\"string\">\"-\"</span>+ c;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//no arg</span></span><br><span class=\"line\">funcOverloading();</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//1-2</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\">funcOverloading(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Execution-Context\"><a href=\"#Execution-Context\" class=\"headerlink\" title=\"Execution Context\"></a>Execution Context</h3></li>\n<li><code>直譯式語言</code>則是必須依賴<code>執行環境 (execution context)</code></li>\n<li>單執行序</li>\n<li>以堆疊的方式保存所有的<code>執行環境</code><ul>\n<li>後面建立的會在上面</li>\n<li>當程式結束後<code>執行環境</code>就會被移除</li>\n</ul>\n</li>\n<li>會有很多個<code>執行環境</code></li>\n<li>一開始會自動建立一個<code>global context (全域執行環境)</code><ul>\n<li><code>global context</code>只會有一個</li>\n<li><code>global context</code> 會一直存在</li>\n</ul>\n</li>\n<li>每個<code>函式(function)</code>會建立一個<code>function context(執行環境)</code></li>\n<li>生成<code>執行環境</code>時會有兩階段<ul>\n<li>建立階段<ul>\n<li>建立 <code>scope chain</code></li>\n<li>宣告變數\b &amp; 函式 = <strong>hoisting</strong></li>\n<li>綁定 <strong>this</strong></li>\n<li>建立 <code>Outer Environment</code></li>\n</ul>\n</li>\n<li>執行階段<ul>\n<li>賦值給變數<br><img src=\"https://i.imgur.com/pPuFspr.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hoisting\"><a href=\"#hoisting\" class=\"headerlink\" title=\"hoisting\"></a>hoisting</h3><ul>\n<li>提昇</li>\n<li>在<code>執行環境(Execution Context)</code>進入<code>執行階段(Execution Phase)</code>前，對此環境的<code>變數 ＆ 函數</code>先進行宣告</li>\n<li>相當於把<code>變數 ＆ 函數</code>往上拉到程式碼最上層一樣</li>\n<li><code>變數</code>提昇只單純做宣告動作，不會進行賦值，所以初始值會是<strong>undefined</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//success</span></span><br><span class=\"line\">testHoisting();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testHoisting</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testVarFuncHoisting);</span><br><span class=\"line\"><span class=\"comment\">//error Uncaught TypeError: testVarFuncHoisting is not a function</span></span><br><span class=\"line\">testVarFuncHoisting();</span><br><span class=\"line\"><span class=\"keyword\">var</span> testVarFuncHoisting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Immediatelty-Invoked-Function-Expression-IIFE-S\"><a href=\"#Immediatelty-Invoked-Function-Expression-IIFE-S\" class=\"headerlink\" title=\"Immediatelty Invoked Function Expression (IIFE)S\"></a>Immediatelty Invoked Function Expression <code>(IIFE)S</code></h3></li>\n<li>定義完馬上就執行的<code>JavaScript function</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function Statement</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testIIFES</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs\"</span>);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function Expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testIIFES2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs2\"</span>);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator ()\"></a>Operator ()</h3></li>\n<li>Function declaration<ul>\n<li>定義函式</li>\n</ul>\n</li>\n<li>Function Call<ul>\n<li>呼叫 Function時 </li>\n<li><code>()</code>裡面可以帶入函式參數(arguments)</li>\n</ul>\n</li>\n<li>Grouping<ul>\n<li>在一個 <strong>Experssion</strong>有多個<strong>Operator</strong>，對<code>()</code>裡的內容會優先執行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IIFES\"><a href=\"#IIFES\" class=\"headerlink\" title=\"() + IIFES\"></a>() + IIFES</h3><ul>\n<li>在程式執行時就可以執行<code>匿名函式</code></li>\n<li>宣告<code>匿名函式</code>無變數承接是會出錯的</li>\n<li>在<code>匿名函式</code>外面加上 <strong>()</strong>，可防止出錯</li>\n<li>函式執行完後直接釋放記憶體</li>\n<li>可以想像 <code>()</code> 就是在執行一個 空 function 只會 <strong>return</strong>參數<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testParentheses</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"number\">1</span> + testParentheses(<span class=\"number\">2</span>+<span class=\"number\">8</span>) * <span class=\"number\">2</span> ;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t);<span class=\"comment\">//22</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test IIFEs3\"</span>);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Spring 介紹","date":"2020-01-25T16:43:52.000Z","_content":"## 介紹\n* 一個以 JAVA為基礎的**開源框架(Open Source Framework)**\n* 使用分層架構，可選擇需要用到的 **Model**\n* 不只有 **Ｗeb開發而已**\n\n## 特色\n* 依賴注入 **DI**(Dependency Injection)\n* 反轉控制 **IOC**(Inverion Of Control)\n* 剖面導向程式設計 **AOP**(Aspect-Oriented Programming)\n* 低侵入/低耦合\n\n## Spring Runtime\n![Spring Runtime](https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png)\n* Core Container\n* Data Access/ Integration\n* Web\n* AOP\n* Instrumentation\n* Test","source":"SpringIntro/index.md","raw":"---\ntitle: Spring 介紹\ndate: 2020-01-26 00:43:52\n---\n## 介紹\n* 一個以 JAVA為基礎的**開源框架(Open Source Framework)**\n* 使用分層架構，可選擇需要用到的 **Model**\n* 不只有 **Ｗeb開發而已**\n\n## 特色\n* 依賴注入 **DI**(Dependency Injection)\n* 反轉控制 **IOC**(Inverion Of Control)\n* 剖面導向程式設計 **AOP**(Aspect-Oriented Programming)\n* 低侵入/低耦合\n\n## Spring Runtime\n![Spring Runtime](https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png)\n* Core Container\n* Data Access/ Integration\n* Web\n* AOP\n* Instrumentation\n* Test","updated":"2020-01-25T18:22:45.664Z","path":"SpringIntro/index.html","comments":1,"layout":"page","_id":"ck8izquwj000xn5jtc8e41otz","content":"<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>一個以 JAVA為基礎的<strong>開源框架(Open Source Framework)</strong></li>\n<li>使用分層架構，可選擇需要用到的 <strong>Model</strong></li>\n<li>不只有 <strong>Ｗeb開發而已</strong></li>\n</ul>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>依賴注入 <strong>DI</strong>(Dependency Injection)</li>\n<li>反轉控制 <strong>IOC</strong>(Inverion Of Control)</li>\n<li>剖面導向程式設計 <strong>AOP</strong>(Aspect-Oriented Programming)</li>\n<li>低侵入/低耦合</li>\n</ul>\n<h2 id=\"Spring-Runtime\"><a href=\"#Spring-Runtime\" class=\"headerlink\" title=\"Spring Runtime\"></a>Spring Runtime</h2><p><img src=\"https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png\" alt=\"Spring Runtime\"></p>\n<ul>\n<li>Core Container</li>\n<li>Data Access/ Integration</li>\n<li>Web</li>\n<li>AOP</li>\n<li>Instrumentation</li>\n<li>Test</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>一個以 JAVA為基礎的<strong>開源框架(Open Source Framework)</strong></li>\n<li>使用分層架構，可選擇需要用到的 <strong>Model</strong></li>\n<li>不只有 <strong>Ｗeb開發而已</strong></li>\n</ul>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><ul>\n<li>依賴注入 <strong>DI</strong>(Dependency Injection)</li>\n<li>反轉控制 <strong>IOC</strong>(Inverion Of Control)</li>\n<li>剖面導向程式設計 <strong>AOP</strong>(Aspect-Oriented Programming)</li>\n<li>低侵入/低耦合</li>\n</ul>\n<h2 id=\"Spring-Runtime\"><a href=\"#Spring-Runtime\" class=\"headerlink\" title=\"Spring Runtime\"></a>Spring Runtime</h2><p><img src=\"https://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/images/spring-overview.png\" alt=\"Spring Runtime\"></p>\n<ul>\n<li>Core Container</li>\n<li>Data Access/ Integration</li>\n<li>Web</li>\n<li>AOP</li>\n<li>Instrumentation</li>\n<li>Test</li>\n</ul>\n"},{"title":"React Intro","date":"2020-02-27T19:57:21.000Z","_content":"\n# React\n## 介紹\n* 基於 javaScript 建立的函式庫\n* 模擬 DOM 元素的運作模式\n* 以 **Virtual DOM** 模式處理 DOM 元素的變化\n    * 在記憶體裡模擬 DOM 結構\n    * 最後顯示到真實的 DOM 只有結果\n    * 在進行真實的 **DOM render** 時\n        * 會先判斷改變的部位，針對那部分做 **render**\n    * render 時，預設會把此 DOM 裡包含的 全部 **re-render**\n* 封裝成 **React Component** \n    * 可獨立執行， 以 Component 做最小單位 \n        * Component 內的元素獨立執行，不會影響到外部\n    * 可結合(Composable)\n        * Component 可互相交流、做組合，產生新的 Component\n    * 可重用（Reusable）\n        * 因為是獨立執行，所以可以在任何的場合做使用\n    * 可維護（Maintainable）\n        * 以最小功能為基準做的 **Component** ，去掉複雜性可供維護\n* 事先把 **Component** 全都組成 **Virtual DOM** ， 調整好變化再去做 render 的動作\n* 建立 **jsx** 語法糖， 簡化開發\n\n## 語法\n* 建立 Component for **ES6**\n    1. 繼承 **React.Component** or **React.PureComponent**\n    2. 實做 render \n        ```js\n        class App extends React.Component {\n            render() { \n                return (\n                    //...\n                ); \n            } \n        }\n        ```\n  \n* render 到 html 頁面\n    ```js\n    ReactDOM.render(< ReactDom />, document.getElementById(\"XXX\"));\n    ```\n    \n    \n* `state` 、 `props` 、 `ref`\n    * state\n        * 針對會改變 **React DOM** 狀態 的設定參數，\n        * 先在 constructor 設定 this.state\n           ```js\n           this.state.key = value\n           ```\n               \n        * 當要重新設定狀態時，呼叫 `this.setState({key:value})`，會觸發 **re-render** ， 重新設定 **React DOM** \n        * state 只會在 Class 內部運轉\n        > PS. 沒在 constructor做宣告的話，會出錯\n    * props\n        * 因為 **React DOM** 的封閉、可重複使用特性 ， 外部需要跟 **React DOM**  溝通時，透過 `props` 設定參數\n        * `props` 可傳遞的參數由建立  **React DOM** 的建立者，做 設定、開放\n        * `props` 是**唯讀屬性**，只能讀不能複寫，也不能建立新值\n        * 當參數傳入時，會觸發 **re-render**\n        * 可在內部class任意使用\n            ```js\n            // js\n            React.createElement(\n                DEMO,\n                {\n                    value:\"123456\",\n                    value2:1111\n                },\t\t\t\t\t\t\n            );\n            // jsx\n            <DEMO value=\"123456\" value2=1111 />\n            ```\n                    \n        * JSX的部分會直接轉成\n            ```javascript\n            props={\n                value:\"123456\",\n                value2:1111\n            }\n            ```\n            \n    * ref\n        * 以原生的 dom  ，ref 就是 JS  document.getElementById()\n        * 以 React DOM ，就是會獲得被 new 出來的  實例\n        * 會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作\n            * 官方說法是 `input.foucs()` 、 `input.value` 、 `video.play()`\n        * 在 constructor 宣告參數 this.XXX\n        * 在指定 tag 上加入 `ref ={this.XXX}`\t\t\n        * 使用方式:\n            * callback\n                ```jsx                \n                <Component  ref={(ref)=>{ this.ref = ref}} />\n                ```\n                \n            * 呼叫 React.createRef() -> **react 16.3**\n                ```js\n                class App extends React.Component {\n                    constructor(props){\n                        super(props);\n                        //在 constructor\n                        this.ref = React.createRef();\n                    }\n                    //在 render\n                    render() { \n                        return (\n                            <Component  ref={this.ref}/>\n                        ); \n                    } \n                }             \n\n                ```                \n                 \n## life cycle\t\n* ver 16.x\n* 分四階段 `Mounting (載入中)`、 `Updating (更新中)` 、 `Unmounting(卸載中)` 、 `error(錯誤)`\n* 針對要被廢除的前面要帶有`UNSAFE_`\n    * Mounting\n        * 元件建立的流程，還未再入到實體網頁時\n        * 流程\n            1. constructor\n                * 物件建立時會啟用的地方\n                * 只會執行一次\n            2. `UNSAFE_`componentWillMount -> `17 will remove`\n                * 觸發時機\n                    * 建立 Component 時\n                * 只會執行一次\n                * 物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)\n            3. static getDerivedStateFromProps(nextProps, prevState)  -> `16 new`\n                * 觸發時機 \n                    * 在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前\n                    * 用 `this.setState()` 觸發 re-render ， 會先更新完 state 再觸發 `getDerivedStateFromProps`\n                * 事件說明\n                    * 判斷是否要用 props 更新 state\n                    * 回傳 obj 更新 state ， return null 維持原樣\n                * 參數\n                    * nextProps\n                        * 最新的 props\n                    * prevState\n                        * 更新前的 state\n            4. render\n                * 觸發時機\n                    * 建立 物件時\n                    * 呼叫 this.setState()\n                    * 從上面傳 props 時\n                * 事件說明\n                    * 設定 react element 的地方\n                    * return boolean | null 則代表無元件顯示\n                    * return react element (jsx)\n                    * 呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 **實體 DOM**\n            5. componentDidMount\n                * 觸發時機\n                    * 元件掛載到實體網頁時\n    * Updating\n        * 元件畫面更新的流程，再觸發 re-render 會啟用\n        * 流程\n            1. `UNSAFE_`componentWillReceiveProps(nextProps) -> `17 will remove`\n                * 觸發時機\n                    * 從上面傳下來的 props 發生變動時\n            2. getDerivedStateFromProps\n                * 同 mounting\n            3. shouldComponentUpdate(nextProps, nextState)\n                * 觸發時機\n                    * 在 `componentWillReceiveProps` &  `getDerivedStateFromProps` 之後\n                * 事件說明\n                    * 判斷 React Component 是否該更新畫面\n                    * return true updating 持續進行 \n                    * return false  updating 中斷，將不觸發 re-render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            4. `UNSAFE_`componentWillUpdate（nextProps, nextState)  -> `17 will remove`\n                * 觸發時機\n                    * render 之前\n                * 事件說明\n                    * 將要 render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            5. render\n                * 同 mounting\n            6. getSnapshotBeforeUpdate(prevProps, prevState) -> `16 new`\n                * 觸發時機\n                    * render 之後 ， 尚未更新到實體網頁\n                * 事件說明\n                    * 取得更新前的數據\n                    * 回傳直將會變成`componentDidUpdate`第三個參數\n                    * 沒有回傳值，`return null`\n                        * 沒有回傳 會有 **Warning**\n                            > `Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.`\n                    * 有使用到此事件，需要再加入`componentDidUpdate`，否則會報錯\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n            7. componentDidUpdate(prevProps, prevState, snapshot)\n                * 觸發時機\n                    * 更新實體畫面之後\n                * 事件說明\n                    * 已經完成實體畫面更新\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n                    * snapshot\n                        * 由前面`getSnapshotBeforeUpdate`的回傳值\n    * Unmounting\n        * 流程\n            1. componentWillUnmount\n                * 觸發時機\n                    * 元件要被移除之前\n    * error\n        * 流程\n            * getDerivedStateFromError\n            * componentDidCatch\n* 當加入 `getDerivedStateFromProps` | `getSnapshotBeforeUpdate`，以下事件將不會被觸發\n    * componentWillMount\n    * componentWillReceiveProps\n    * componentWillUpdate\n> [模擬LifeCycle的程式碼](https://github.com/RobYang203/React-LifeCycleTest.git)\n\n## 關於 Render\nReact 是以 **Virtual DOM**在做處理，**render**就是真實跟虛擬的分界線\n\n**render**是會把當前**Virtual DOM**里資料渲染到真實畫面\n\n所以在**render**前會把 這個**Component**包括`子Component`都準備到**Virtual DOM**，再一起**render**到頁面上\n\n    \n\t\t\t\n\n\t\t","source":"ReactIntro/index.md","raw":"---\ntitle: React Intro\ndate: 2020-02-28 03:57:21\n---\n\n# React\n## 介紹\n* 基於 javaScript 建立的函式庫\n* 模擬 DOM 元素的運作模式\n* 以 **Virtual DOM** 模式處理 DOM 元素的變化\n    * 在記憶體裡模擬 DOM 結構\n    * 最後顯示到真實的 DOM 只有結果\n    * 在進行真實的 **DOM render** 時\n        * 會先判斷改變的部位，針對那部分做 **render**\n    * render 時，預設會把此 DOM 裡包含的 全部 **re-render**\n* 封裝成 **React Component** \n    * 可獨立執行， 以 Component 做最小單位 \n        * Component 內的元素獨立執行，不會影響到外部\n    * 可結合(Composable)\n        * Component 可互相交流、做組合，產生新的 Component\n    * 可重用（Reusable）\n        * 因為是獨立執行，所以可以在任何的場合做使用\n    * 可維護（Maintainable）\n        * 以最小功能為基準做的 **Component** ，去掉複雜性可供維護\n* 事先把 **Component** 全都組成 **Virtual DOM** ， 調整好變化再去做 render 的動作\n* 建立 **jsx** 語法糖， 簡化開發\n\n## 語法\n* 建立 Component for **ES6**\n    1. 繼承 **React.Component** or **React.PureComponent**\n    2. 實做 render \n        ```js\n        class App extends React.Component {\n            render() { \n                return (\n                    //...\n                ); \n            } \n        }\n        ```\n  \n* render 到 html 頁面\n    ```js\n    ReactDOM.render(< ReactDom />, document.getElementById(\"XXX\"));\n    ```\n    \n    \n* `state` 、 `props` 、 `ref`\n    * state\n        * 針對會改變 **React DOM** 狀態 的設定參數，\n        * 先在 constructor 設定 this.state\n           ```js\n           this.state.key = value\n           ```\n               \n        * 當要重新設定狀態時，呼叫 `this.setState({key:value})`，會觸發 **re-render** ， 重新設定 **React DOM** \n        * state 只會在 Class 內部運轉\n        > PS. 沒在 constructor做宣告的話，會出錯\n    * props\n        * 因為 **React DOM** 的封閉、可重複使用特性 ， 外部需要跟 **React DOM**  溝通時，透過 `props` 設定參數\n        * `props` 可傳遞的參數由建立  **React DOM** 的建立者，做 設定、開放\n        * `props` 是**唯讀屬性**，只能讀不能複寫，也不能建立新值\n        * 當參數傳入時，會觸發 **re-render**\n        * 可在內部class任意使用\n            ```js\n            // js\n            React.createElement(\n                DEMO,\n                {\n                    value:\"123456\",\n                    value2:1111\n                },\t\t\t\t\t\t\n            );\n            // jsx\n            <DEMO value=\"123456\" value2=1111 />\n            ```\n                    \n        * JSX的部分會直接轉成\n            ```javascript\n            props={\n                value:\"123456\",\n                value2:1111\n            }\n            ```\n            \n    * ref\n        * 以原生的 dom  ，ref 就是 JS  document.getElementById()\n        * 以 React DOM ，就是會獲得被 new 出來的  實例\n        * 會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作\n            * 官方說法是 `input.foucs()` 、 `input.value` 、 `video.play()`\n        * 在 constructor 宣告參數 this.XXX\n        * 在指定 tag 上加入 `ref ={this.XXX}`\t\t\n        * 使用方式:\n            * callback\n                ```jsx                \n                <Component  ref={(ref)=>{ this.ref = ref}} />\n                ```\n                \n            * 呼叫 React.createRef() -> **react 16.3**\n                ```js\n                class App extends React.Component {\n                    constructor(props){\n                        super(props);\n                        //在 constructor\n                        this.ref = React.createRef();\n                    }\n                    //在 render\n                    render() { \n                        return (\n                            <Component  ref={this.ref}/>\n                        ); \n                    } \n                }             \n\n                ```                \n                 \n## life cycle\t\n* ver 16.x\n* 分四階段 `Mounting (載入中)`、 `Updating (更新中)` 、 `Unmounting(卸載中)` 、 `error(錯誤)`\n* 針對要被廢除的前面要帶有`UNSAFE_`\n    * Mounting\n        * 元件建立的流程，還未再入到實體網頁時\n        * 流程\n            1. constructor\n                * 物件建立時會啟用的地方\n                * 只會執行一次\n            2. `UNSAFE_`componentWillMount -> `17 will remove`\n                * 觸發時機\n                    * 建立 Component 時\n                * 只會執行一次\n                * 物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)\n            3. static getDerivedStateFromProps(nextProps, prevState)  -> `16 new`\n                * 觸發時機 \n                    * 在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前\n                    * 用 `this.setState()` 觸發 re-render ， 會先更新完 state 再觸發 `getDerivedStateFromProps`\n                * 事件說明\n                    * 判斷是否要用 props 更新 state\n                    * 回傳 obj 更新 state ， return null 維持原樣\n                * 參數\n                    * nextProps\n                        * 最新的 props\n                    * prevState\n                        * 更新前的 state\n            4. render\n                * 觸發時機\n                    * 建立 物件時\n                    * 呼叫 this.setState()\n                    * 從上面傳 props 時\n                * 事件說明\n                    * 設定 react element 的地方\n                    * return boolean | null 則代表無元件顯示\n                    * return react element (jsx)\n                    * 呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 **實體 DOM**\n            5. componentDidMount\n                * 觸發時機\n                    * 元件掛載到實體網頁時\n    * Updating\n        * 元件畫面更新的流程，再觸發 re-render 會啟用\n        * 流程\n            1. `UNSAFE_`componentWillReceiveProps(nextProps) -> `17 will remove`\n                * 觸發時機\n                    * 從上面傳下來的 props 發生變動時\n            2. getDerivedStateFromProps\n                * 同 mounting\n            3. shouldComponentUpdate(nextProps, nextState)\n                * 觸發時機\n                    * 在 `componentWillReceiveProps` &  `getDerivedStateFromProps` 之後\n                * 事件說明\n                    * 判斷 React Component 是否該更新畫面\n                    * return true updating 持續進行 \n                    * return false  updating 中斷，將不觸發 re-render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            4. `UNSAFE_`componentWillUpdate（nextProps, nextState)  -> `17 will remove`\n                * 觸發時機\n                    * render 之前\n                * 事件說明\n                    * 將要 render\n                * 參數\n                    * nextProps\n                        * 新的 props\n                    * nextState\n                        * 新的 state\n            5. render\n                * 同 mounting\n            6. getSnapshotBeforeUpdate(prevProps, prevState) -> `16 new`\n                * 觸發時機\n                    * render 之後 ， 尚未更新到實體網頁\n                * 事件說明\n                    * 取得更新前的數據\n                    * 回傳直將會變成`componentDidUpdate`第三個參數\n                    * 沒有回傳值，`return null`\n                        * 沒有回傳 會有 **Warning**\n                            > `Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.`\n                    * 有使用到此事件，需要再加入`componentDidUpdate`，否則會報錯\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n            7. componentDidUpdate(prevProps, prevState, snapshot)\n                * 觸發時機\n                    * 更新實體畫面之後\n                * 事件說明\n                    * 已經完成實體畫面更新\n                * 參數\n                    * prevProps\n                        * 舊的 props \n                    * prevState\n                        * 舊的 state\n                    * snapshot\n                        * 由前面`getSnapshotBeforeUpdate`的回傳值\n    * Unmounting\n        * 流程\n            1. componentWillUnmount\n                * 觸發時機\n                    * 元件要被移除之前\n    * error\n        * 流程\n            * getDerivedStateFromError\n            * componentDidCatch\n* 當加入 `getDerivedStateFromProps` | `getSnapshotBeforeUpdate`，以下事件將不會被觸發\n    * componentWillMount\n    * componentWillReceiveProps\n    * componentWillUpdate\n> [模擬LifeCycle的程式碼](https://github.com/RobYang203/React-LifeCycleTest.git)\n\n## 關於 Render\nReact 是以 **Virtual DOM**在做處理，**render**就是真實跟虛擬的分界線\n\n**render**是會把當前**Virtual DOM**里資料渲染到真實畫面\n\n所以在**render**前會把 這個**Component**包括`子Component`都準備到**Virtual DOM**，再一起**render**到頁面上\n\n    \n\t\t\t\n\n\t\t","updated":"2020-04-02T13:49:14.470Z","path":"ReactIntro/index.html","comments":1,"layout":"page","_id":"ck8izquwj000zn5jthtqg7zf6","content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>基於 javaScript 建立的函式庫</li>\n<li>模擬 DOM 元素的運作模式</li>\n<li>以 <strong>Virtual DOM</strong> 模式處理 DOM 元素的變化<ul>\n<li>在記憶體裡模擬 DOM 結構</li>\n<li>最後顯示到真實的 DOM 只有結果</li>\n<li>在進行真實的 <strong>DOM render</strong> 時<ul>\n<li>會先判斷改變的部位，針對那部分做 <strong>render</strong></li>\n</ul>\n</li>\n<li>render 時，預設會把此 DOM 裡包含的 全部 <strong>re-render</strong></li>\n</ul>\n</li>\n<li>封裝成 <strong>React Component</strong> <ul>\n<li>可獨立執行， 以 Component 做最小單位 <ul>\n<li>Component 內的元素獨立執行，不會影響到外部</li>\n</ul>\n</li>\n<li>可結合(Composable)<ul>\n<li>Component 可互相交流、做組合，產生新的 Component</li>\n</ul>\n</li>\n<li>可重用（Reusable）<ul>\n<li>因為是獨立執行，所以可以在任何的場合做使用</li>\n</ul>\n</li>\n<li>可維護（Maintainable）<ul>\n<li>以最小功能為基準做的 <strong>Component</strong> ，去掉複雜性可供維護</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事先把 <strong>Component</strong> 全都組成 <strong>Virtual DOM</strong> ， 調整好變化再去做 render 的動作</li>\n<li>建立 <strong>jsx</strong> 語法糖， 簡化開發</li>\n</ul>\n<h2 id=\"語法\"><a href=\"#語法\" class=\"headerlink\" title=\"語法\"></a>語法</h2><ul>\n<li><p>建立 Component for <strong>ES6</strong></p>\n<ol>\n<li>繼承 <strong>React.Component</strong> or <strong>React.PureComponent</strong></li>\n<li>實做 render  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>render 到 html 頁面</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">ReactDom</span> /&gt;</span>, document.getElementById(\"XXX\"));</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p><code>state</code> 、 <code>props</code> 、 <code>ref</code></p>\n<ul>\n<li><p>state</p>\n<ul>\n<li><p>針對會改變 <strong>React DOM</strong> 狀態 的設定參數，</p>\n</li>\n<li><p>先在 constructor 設定 this.state</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.key = value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>當要重新設定狀態時，呼叫 <code>this.setState({key:value})</code>，會觸發 <strong>re-render</strong> ， 重新設定 <strong>React DOM</strong> </p>\n</li>\n<li><p>state 只會在 Class 內部運轉</p>\n<blockquote>\n<p>PS. 沒在 constructor做宣告的話，會出錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>因為 <strong>React DOM</strong> 的封閉、可重複使用特性 ， 外部需要跟 <strong>React DOM</strong>  溝通時，透過 <code>props</code> 設定參數</p>\n</li>\n<li><p><code>props</code> 可傳遞的參數由建立  <strong>React DOM</strong> 的建立者，做 設定、開放</p>\n</li>\n<li><p><code>props</code> 是<strong>唯讀屬性</strong>，只能讀不能複寫，也不能建立新值</p>\n</li>\n<li><p>當參數傳入時，會觸發 <strong>re-render</strong></p>\n</li>\n<li><p>可在內部class任意使用</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">React.createElement(</span><br><span class=\"line\">    DEMO,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">        value2:<span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;,\t\t\t\t\t\t</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\">&lt;DEMO value=<span class=\"string\">\"123456\"</span> value2=<span class=\"number\">1111</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSX的部分會直接轉成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props=&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">    value2:<span class=\"number\">1111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ref</p>\n<ul>\n<li><p>以原生的 dom  ，ref 就是 JS  document.getElementById()</p>\n</li>\n<li><p>以 React DOM ，就是會獲得被 new 出來的  實例</p>\n</li>\n<li><p>會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作</p>\n<ul>\n<li>官方說法是 <code>input.foucs()</code> 、 <code>input.value</code> 、 <code>video.play()</code></li>\n</ul>\n</li>\n<li><p>在 constructor 宣告參數 this.XXX</p>\n</li>\n<li><p>在指定 tag 上加入 <code>ref ={this.XXX}</code>        </p>\n</li>\n<li><p>使用方式:</p>\n<ul>\n<li><p>callback</p>\n  <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Component  ref=&#123;(ref)=&gt;&#123; <span class=\"keyword\">this</span>.ref = ref&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>呼叫 React.createRef() -&gt; <strong>react 16.3</strong></p>\n<pre><code class=\"js\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>{\n    <span class=\"keyword\">constructor</span>(props){\n        <span class=\"keyword\">super</span>(props);\n        <span class=\"comment\">//在 constructor</span>\n        <span class=\"keyword\">this</span>.ref = React.createRef();\n    }\n    <span class=\"comment\">//在 render</span>\n    render() { \n        <span class=\"keyword\">return</span> (\n            &lt;Component  ref={<span class=\"keyword\">this</span>.ref}/&gt;\n        ); \n    } \n}             \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life cycle\"></a>life cycle</h2><ul>\n<li>ver 16.x</li>\n<li>分四階段 <code>Mounting (載入中)</code>、 <code>Updating (更新中)</code> 、 <code>Unmounting(卸載中)</code> 、 <code>error(錯誤)</code></li>\n<li>針對要被廢除的前面要帶有<code>UNSAFE_</code><ul>\n<li>Mounting<ul>\n<li>元件建立的流程，還未再入到實體網頁時</li>\n<li>流程<ol>\n<li>constructor<ul>\n<li>物件建立時會啟用的地方</li>\n<li>只會執行一次</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillMount -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>建立 Component 時</li>\n</ul>\n</li>\n<li>只會執行一次</li>\n<li>物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)</li>\n</ul>\n</li>\n<li>static getDerivedStateFromProps(nextProps, prevState)  -&gt; <code>16 new</code><ul>\n<li>觸發時機 <ul>\n<li>在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前</li>\n<li>用 <code>this.setState()</code> 觸發 re-render ， 會先更新完 state 再觸發 <code>getDerivedStateFromProps</code></li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷是否要用 props 更新 state</li>\n<li>回傳 obj 更新 state ， return null 維持原樣</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>最新的 props</li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>更新前的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>觸發時機<ul>\n<li>建立 物件時</li>\n<li>呼叫 this.setState()</li>\n<li>從上面傳 props 時</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>設定 react element 的地方</li>\n<li>return boolean | null 則代表無元件顯示</li>\n<li>return react element (jsx)</li>\n<li>呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 <strong>實體 DOM</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>觸發時機<ul>\n<li>元件掛載到實體網頁時</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Updating<ul>\n<li>元件畫面更新的流程，再觸發 re-render 會啟用</li>\n<li>流程<ol>\n<li><code>UNSAFE_</code>componentWillReceiveProps(nextProps) -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>從上面傳下來的 props 發生變動時</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>getDerivedStateFromProps<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>shouldComponentUpdate(nextProps, nextState)<ul>\n<li>觸發時機<ul>\n<li>在 <code>componentWillReceiveProps</code> &amp;  <code>getDerivedStateFromProps</code> 之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷 React Component 是否該更新畫面</li>\n<li>return true updating 持續進行 </li>\n<li>return false  updating 中斷，將不觸發 re-render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillUpdate（nextProps, nextState)  -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>render 之前</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>將要 render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState) -&gt; <code>16 new</code><ul>\n<li>觸發時機<ul>\n<li>render 之後 ， 尚未更新到實體網頁</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>取得更新前的數據</li>\n<li>回傳直將會變成<code>componentDidUpdate</code>第三個參數</li>\n<li>沒有回傳值，<code>return null</code><ul>\n<li>沒有回傳 會有 <strong>Warning</strong><blockquote>\n<p><code>Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>有使用到此事件，需要再加入<code>componentDidUpdate</code>，否則會報錯</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)<ul>\n<li>觸發時機<ul>\n<li>更新實體畫面之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>已經完成實體畫面更新</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n<li>snapshot<ul>\n<li>由前面<code>getSnapshotBeforeUpdate</code>的回傳值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Unmounting<ul>\n<li>流程<ol>\n<li>componentWillUnmount<ul>\n<li>觸發時機<ul>\n<li>元件要被移除之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>error<ul>\n<li>流程<ul>\n<li>getDerivedStateFromError</li>\n<li>componentDidCatch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當加入 <code>getDerivedStateFromProps</code> | <code>getSnapshotBeforeUpdate</code>，以下事件將不會被觸發<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate<blockquote>\n<p><a href=\"https://github.com/RobYang203/React-LifeCycleTest.git\" target=\"_blank\" rel=\"noopener\">模擬LifeCycle的程式碼</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"關於-Render\"><a href=\"#關於-Render\" class=\"headerlink\" title=\"關於 Render\"></a>關於 Render</h2><p>React 是以 <strong>Virtual DOM</strong>在做處理，<strong>render</strong>就是真實跟虛擬的分界線</p>\n<p><strong>render</strong>是會把當前<strong>Virtual DOM</strong>里資料渲染到真實畫面</p>\n<p>所以在<strong>render</strong>前會把 這個<strong>Component</strong>包括<code>子Component</code>都準備到<strong>Virtual DOM</strong>，再一起<strong>render</strong>到頁面上</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><ul>\n<li>基於 javaScript 建立的函式庫</li>\n<li>模擬 DOM 元素的運作模式</li>\n<li>以 <strong>Virtual DOM</strong> 模式處理 DOM 元素的變化<ul>\n<li>在記憶體裡模擬 DOM 結構</li>\n<li>最後顯示到真實的 DOM 只有結果</li>\n<li>在進行真實的 <strong>DOM render</strong> 時<ul>\n<li>會先判斷改變的部位，針對那部分做 <strong>render</strong></li>\n</ul>\n</li>\n<li>render 時，預設會把此 DOM 裡包含的 全部 <strong>re-render</strong></li>\n</ul>\n</li>\n<li>封裝成 <strong>React Component</strong> <ul>\n<li>可獨立執行， 以 Component 做最小單位 <ul>\n<li>Component 內的元素獨立執行，不會影響到外部</li>\n</ul>\n</li>\n<li>可結合(Composable)<ul>\n<li>Component 可互相交流、做組合，產生新的 Component</li>\n</ul>\n</li>\n<li>可重用（Reusable）<ul>\n<li>因為是獨立執行，所以可以在任何的場合做使用</li>\n</ul>\n</li>\n<li>可維護（Maintainable）<ul>\n<li>以最小功能為基準做的 <strong>Component</strong> ，去掉複雜性可供維護</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事先把 <strong>Component</strong> 全都組成 <strong>Virtual DOM</strong> ， 調整好變化再去做 render 的動作</li>\n<li>建立 <strong>jsx</strong> 語法糖， 簡化開發</li>\n</ul>\n<h2 id=\"語法\"><a href=\"#語法\" class=\"headerlink\" title=\"語法\"></a>語法</h2><ul>\n<li><p>建立 Component for <strong>ES6</strong></p>\n<ol>\n<li>繼承 <strong>React.Component</strong> or <strong>React.PureComponent</strong></li>\n<li>實做 render  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>render 到 html 頁面</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">ReactDom</span> /&gt;</span>, document.getElementById(\"XXX\"));</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p><code>state</code> 、 <code>props</code> 、 <code>ref</code></p>\n<ul>\n<li><p>state</p>\n<ul>\n<li><p>針對會改變 <strong>React DOM</strong> 狀態 的設定參數，</p>\n</li>\n<li><p>先在 constructor 設定 this.state</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state.key = value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>當要重新設定狀態時，呼叫 <code>this.setState({key:value})</code>，會觸發 <strong>re-render</strong> ， 重新設定 <strong>React DOM</strong> </p>\n</li>\n<li><p>state 只會在 Class 內部運轉</p>\n<blockquote>\n<p>PS. 沒在 constructor做宣告的話，會出錯</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>因為 <strong>React DOM</strong> 的封閉、可重複使用特性 ， 外部需要跟 <strong>React DOM</strong>  溝通時，透過 <code>props</code> 設定參數</p>\n</li>\n<li><p><code>props</code> 可傳遞的參數由建立  <strong>React DOM</strong> 的建立者，做 設定、開放</p>\n</li>\n<li><p><code>props</code> 是<strong>唯讀屬性</strong>，只能讀不能複寫，也不能建立新值</p>\n</li>\n<li><p>當參數傳入時，會觸發 <strong>re-render</strong></p>\n</li>\n<li><p>可在內部class任意使用</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">React.createElement(</span><br><span class=\"line\">    DEMO,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">        value2:<span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;,\t\t\t\t\t\t</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// jsx</span></span><br><span class=\"line\">&lt;DEMO value=<span class=\"string\">\"123456\"</span> value2=<span class=\"number\">1111</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSX的部分會直接轉成</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props=&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">    value2:<span class=\"number\">1111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ref</p>\n<ul>\n<li><p>以原生的 dom  ，ref 就是 JS  document.getElementById()</p>\n</li>\n<li><p>以 React DOM ，就是會獲得被 new 出來的  實例</p>\n</li>\n<li><p>會使用通常是 在 render 時無法做的動作 或是 針對 DOM 做特定操作</p>\n<ul>\n<li>官方說法是 <code>input.foucs()</code> 、 <code>input.value</code> 、 <code>video.play()</code></li>\n</ul>\n</li>\n<li><p>在 constructor 宣告參數 this.XXX</p>\n</li>\n<li><p>在指定 tag 上加入 <code>ref ={this.XXX}</code>        </p>\n</li>\n<li><p>使用方式:</p>\n<ul>\n<li><p>callback</p>\n  <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Component  ref=&#123;(ref)=&gt;&#123; <span class=\"keyword\">this</span>.ref = ref&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>呼叫 React.createRef() -&gt; <strong>react 16.3</strong></p>\n<pre><code class=\"js\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>{\n    <span class=\"keyword\">constructor</span>(props){\n        <span class=\"keyword\">super</span>(props);\n        <span class=\"comment\">//在 constructor</span>\n        <span class=\"keyword\">this</span>.ref = React.createRef();\n    }\n    <span class=\"comment\">//在 render</span>\n    render() { \n        <span class=\"keyword\">return</span> (\n            &lt;Component  ref={<span class=\"keyword\">this</span>.ref}/&gt;\n        ); \n    } \n}             \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life cycle\"></a>life cycle</h2><ul>\n<li>ver 16.x</li>\n<li>分四階段 <code>Mounting (載入中)</code>、 <code>Updating (更新中)</code> 、 <code>Unmounting(卸載中)</code> 、 <code>error(錯誤)</code></li>\n<li>針對要被廢除的前面要帶有<code>UNSAFE_</code><ul>\n<li>Mounting<ul>\n<li>元件建立的流程，還未再入到實體網頁時</li>\n<li>流程<ol>\n<li>constructor<ul>\n<li>物件建立時會啟用的地方</li>\n<li>只會執行一次</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillMount -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>建立 Component 時</li>\n</ul>\n</li>\n<li>只會執行一次</li>\n<li>物件移除再建立也不會執行(指的是從 react DOM 上移除，不是 new 一個新的)</li>\n</ul>\n</li>\n<li>static getDerivedStateFromProps(nextProps, prevState)  -&gt; <code>16 new</code><ul>\n<li>觸發時機 <ul>\n<li>在傳入 new props 尚未更新 props ， 已更新 state 以及將要 render之前</li>\n<li>用 <code>this.setState()</code> 觸發 re-render ， 會先更新完 state 再觸發 <code>getDerivedStateFromProps</code></li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷是否要用 props 更新 state</li>\n<li>回傳 obj 更新 state ， return null 維持原樣</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>最新的 props</li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>更新前的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>觸發時機<ul>\n<li>建立 物件時</li>\n<li>呼叫 this.setState()</li>\n<li>從上面傳 props 時</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>設定 react element 的地方</li>\n<li>return boolean | null 則代表無元件顯示</li>\n<li>return react element (jsx)</li>\n<li>呼叫後 ，尚未顯示在網頁上，要把 react virtual DOM 轉成 <strong>實體 DOM</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>觸發時機<ul>\n<li>元件掛載到實體網頁時</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Updating<ul>\n<li>元件畫面更新的流程，再觸發 re-render 會啟用</li>\n<li>流程<ol>\n<li><code>UNSAFE_</code>componentWillReceiveProps(nextProps) -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>從上面傳下來的 props 發生變動時</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>getDerivedStateFromProps<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>shouldComponentUpdate(nextProps, nextState)<ul>\n<li>觸發時機<ul>\n<li>在 <code>componentWillReceiveProps</code> &amp;  <code>getDerivedStateFromProps</code> 之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>判斷 React Component 是否該更新畫面</li>\n<li>return true updating 持續進行 </li>\n<li>return false  updating 中斷，將不觸發 re-render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>UNSAFE_</code>componentWillUpdate（nextProps, nextState)  -&gt; <code>17 will remove</code><ul>\n<li>觸發時機<ul>\n<li>render 之前</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>將要 render</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>nextProps<ul>\n<li>新的 props</li>\n</ul>\n</li>\n<li>nextState<ul>\n<li>新的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>render<ul>\n<li>同 mounting</li>\n</ul>\n</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState) -&gt; <code>16 new</code><ul>\n<li>觸發時機<ul>\n<li>render 之後 ， 尚未更新到實體網頁</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>取得更新前的數據</li>\n<li>回傳直將會變成<code>componentDidUpdate</code>第三個參數</li>\n<li>沒有回傳值，<code>return null</code><ul>\n<li>沒有回傳 會有 <strong>Warning</strong><blockquote>\n<p><code>Warning: App.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>有使用到此事件，需要再加入<code>componentDidUpdate</code>，否則會報錯</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)<ul>\n<li>觸發時機<ul>\n<li>更新實體畫面之後</li>\n</ul>\n</li>\n<li>事件說明<ul>\n<li>已經完成實體畫面更新</li>\n</ul>\n</li>\n<li>參數<ul>\n<li>prevProps<ul>\n<li>舊的 props </li>\n</ul>\n</li>\n<li>prevState<ul>\n<li>舊的 state</li>\n</ul>\n</li>\n<li>snapshot<ul>\n<li>由前面<code>getSnapshotBeforeUpdate</code>的回傳值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Unmounting<ul>\n<li>流程<ol>\n<li>componentWillUnmount<ul>\n<li>觸發時機<ul>\n<li>元件要被移除之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>error<ul>\n<li>流程<ul>\n<li>getDerivedStateFromError</li>\n<li>componentDidCatch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當加入 <code>getDerivedStateFromProps</code> | <code>getSnapshotBeforeUpdate</code>，以下事件將不會被觸發<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate<blockquote>\n<p><a href=\"https://github.com/RobYang203/React-LifeCycleTest.git\" target=\"_blank\" rel=\"noopener\">模擬LifeCycle的程式碼</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"關於-Render\"><a href=\"#關於-Render\" class=\"headerlink\" title=\"關於 Render\"></a>關於 Render</h2><p>React 是以 <strong>Virtual DOM</strong>在做處理，<strong>render</strong>就是真實跟虛擬的分界線</p>\n<p><strong>render</strong>是會把當前<strong>Virtual DOM</strong>里資料渲染到真實畫面</p>\n<p>所以在<strong>render</strong>前會把 這個<strong>Component</strong>包括<code>子Component</code>都準備到<strong>Virtual DOM</strong>，再一起<strong>render</strong>到頁面上</p>\n"},{"title":"分類","date":"2020-01-24T14:09:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2020-01-24 22:09:31\ntype: \"categories\"\n---\n","updated":"2020-01-24T16:06:43.268Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8izquwk0012n5jt864dfwfk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"eclipse-setting","date":"2020-01-26T08:31:11.000Z","_content":"\n## 下載 Eclipse\n* 官網下載, [**eclipse-install**](https://www.eclipse.org/downloads/)\n* 執行 **eclipse-install**\n> 要執行之前，需要安裝**JDK**\n\n## 安裝套件\n* 打開 eclipse ，選擇 **Help** -> Install New Software\n* `Work With`選擇 **http://download.eclipse.org/releases/lasest-version**\n* 找到 **`Web, XML, Java EE and OSGi Enterprise Development`** 展開\n    * Web\n        * 選擇 \n            * Eclipse Java EE Developer Tools\n            * Eclipse Java Web Developer Tools\n            * Eclipse Web Developer Tools\n            * Eclipse XML Editors and Tools\n        * 安裝\n    > **P.S.** 沒安裝的話，再新增專案會找不到 **Web** 選項\n    * Server\n        * 選擇 \n            * JST Server Adapters\n            * JST Server Adapters Extensions\n        * 安裝\n    > **P.S.** 沒安裝的話，新增專案會找不到 **Tomcat** 選項\n\n\n## 安裝 Tomcat\n* 在[Tomcat官網](https://tomcat.apache.org/)下載\n    * 選擇 **Binary Distributions** > Core\n    * 解壓縮\n* 打開 Eclipse ，在新增專案裡找到 **Server**資料夾，選擇 **Server**\n* 進入後選擇 **Apache** > **Tomcat version Server** \n* 在 **`Tomcat installation directory`** 選擇下載的 Tomcat Server\n* **JRE 版本**選擇現有的版本\n\n\n## 手動下載 & 掛載  Spring Framework\n* 下載網址: https://repo.spring.io/release/org/springframework/spring/\n* 選擇版本\n* 選擇 **spring-version.RELEASE-dist.zip**\n* 在 **Project Explorer** 選擇設定的 `project name` ， 右鍵 `Bulid Path` > `Configure Build Path`\n* 選擇 **Libraries** > **Add External JARS**，選擇下載好的 `Spring Framework` > `libs` 底下所有的 jar檔 \n","source":"eclipse-setting/index.md","raw":"---\ntitle: eclipse-setting\ndate: 2020-01-26 16:31:11\n---\n\n## 下載 Eclipse\n* 官網下載, [**eclipse-install**](https://www.eclipse.org/downloads/)\n* 執行 **eclipse-install**\n> 要執行之前，需要安裝**JDK**\n\n## 安裝套件\n* 打開 eclipse ，選擇 **Help** -> Install New Software\n* `Work With`選擇 **http://download.eclipse.org/releases/lasest-version**\n* 找到 **`Web, XML, Java EE and OSGi Enterprise Development`** 展開\n    * Web\n        * 選擇 \n            * Eclipse Java EE Developer Tools\n            * Eclipse Java Web Developer Tools\n            * Eclipse Web Developer Tools\n            * Eclipse XML Editors and Tools\n        * 安裝\n    > **P.S.** 沒安裝的話，再新增專案會找不到 **Web** 選項\n    * Server\n        * 選擇 \n            * JST Server Adapters\n            * JST Server Adapters Extensions\n        * 安裝\n    > **P.S.** 沒安裝的話，新增專案會找不到 **Tomcat** 選項\n\n\n## 安裝 Tomcat\n* 在[Tomcat官網](https://tomcat.apache.org/)下載\n    * 選擇 **Binary Distributions** > Core\n    * 解壓縮\n* 打開 Eclipse ，在新增專案裡找到 **Server**資料夾，選擇 **Server**\n* 進入後選擇 **Apache** > **Tomcat version Server** \n* 在 **`Tomcat installation directory`** 選擇下載的 Tomcat Server\n* **JRE 版本**選擇現有的版本\n\n\n## 手動下載 & 掛載  Spring Framework\n* 下載網址: https://repo.spring.io/release/org/springframework/spring/\n* 選擇版本\n* 選擇 **spring-version.RELEASE-dist.zip**\n* 在 **Project Explorer** 選擇設定的 `project name` ， 右鍵 `Bulid Path` > `Configure Build Path`\n* 選擇 **Libraries** > **Add External JARS**，選擇下載好的 `Spring Framework` > `libs` 底下所有的 jar檔 \n","updated":"2020-01-26T09:12:31.254Z","path":"eclipse-setting/index.html","comments":1,"layout":"page","_id":"ck8izquwl0014n5jt939f54cw","content":"<h2 id=\"下載-Eclipse\"><a href=\"#下載-Eclipse\" class=\"headerlink\" title=\"下載 Eclipse\"></a>下載 Eclipse</h2><ul>\n<li>官網下載, <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\"><strong>eclipse-install</strong></a></li>\n<li>執行 <strong>eclipse-install</strong><blockquote>\n<p>要執行之前，需要安裝<strong>JDK</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><ul>\n<li>打開 eclipse ，選擇 <strong>Help</strong> -&gt; Install New Software</li>\n<li><code>Work With</code>選擇 <strong><a href=\"http://download.eclipse.org/releases/lasest-version\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/releases/lasest-version</a></strong></li>\n<li>找到 <strong><code>Web, XML, Java EE and OSGi Enterprise Development</code></strong> 展開<ul>\n<li>Web<ul>\n<li>選擇 <ul>\n<li>Eclipse Java EE Developer Tools</li>\n<li>Eclipse Java Web Developer Tools</li>\n<li>Eclipse Web Developer Tools</li>\n<li>Eclipse XML Editors and Tools</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，再新增專案會找不到 <strong>Web</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>Server<ul>\n<li>選擇 <ul>\n<li>JST Server Adapters</li>\n<li>JST Server Adapters Extensions</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，新增專案會找不到 <strong>Tomcat</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安裝-Tomcat\"><a href=\"#安裝-Tomcat\" class=\"headerlink\" title=\"安裝 Tomcat\"></a>安裝 Tomcat</h2><ul>\n<li>在<a href=\"https://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">Tomcat官網</a>下載<ul>\n<li>選擇 <strong>Binary Distributions</strong> &gt; Core</li>\n<li>解壓縮</li>\n</ul>\n</li>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Server</strong>資料夾，選擇 <strong>Server</strong></li>\n<li>進入後選擇 <strong>Apache</strong> &gt; <strong>Tomcat version Server</strong> </li>\n<li>在 <strong><code>Tomcat installation directory</code></strong> 選擇下載的 Tomcat Server</li>\n<li><strong>JRE 版本</strong>選擇現有的版本</li>\n</ul>\n<h2 id=\"手動下載-amp-掛載-Spring-Framework\"><a href=\"#手動下載-amp-掛載-Spring-Framework\" class=\"headerlink\" title=\"手動下載 &amp; 掛載  Spring Framework\"></a>手動下載 &amp; 掛載  Spring Framework</h2><ul>\n<li>下載網址: <a href=\"https://repo.spring.io/release/org/springframework/spring/\" target=\"_blank\" rel=\"noopener\">https://repo.spring.io/release/org/springframework/spring/</a></li>\n<li>選擇版本</li>\n<li>選擇 <strong>spring-version.RELEASE-dist.zip</strong></li>\n<li>在 <strong>Project Explorer</strong> 選擇設定的 <code>project name</code> ， 右鍵 <code>Bulid Path</code> &gt; <code>Configure Build Path</code></li>\n<li>選擇 <strong>Libraries</strong> &gt; <strong>Add External JARS</strong>，選擇下載好的 <code>Spring Framework</code> &gt; <code>libs</code> 底下所有的 jar檔 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下載-Eclipse\"><a href=\"#下載-Eclipse\" class=\"headerlink\" title=\"下載 Eclipse\"></a>下載 Eclipse</h2><ul>\n<li>官網下載, <a href=\"https://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"noopener\"><strong>eclipse-install</strong></a></li>\n<li>執行 <strong>eclipse-install</strong><blockquote>\n<p>要執行之前，需要安裝<strong>JDK</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><ul>\n<li>打開 eclipse ，選擇 <strong>Help</strong> -&gt; Install New Software</li>\n<li><code>Work With</code>選擇 <strong><a href=\"http://download.eclipse.org/releases/lasest-version\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/releases/lasest-version</a></strong></li>\n<li>找到 <strong><code>Web, XML, Java EE and OSGi Enterprise Development</code></strong> 展開<ul>\n<li>Web<ul>\n<li>選擇 <ul>\n<li>Eclipse Java EE Developer Tools</li>\n<li>Eclipse Java Web Developer Tools</li>\n<li>Eclipse Web Developer Tools</li>\n<li>Eclipse XML Editors and Tools</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，再新增專案會找不到 <strong>Web</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>Server<ul>\n<li>選擇 <ul>\n<li>JST Server Adapters</li>\n<li>JST Server Adapters Extensions</li>\n</ul>\n</li>\n<li>安裝<blockquote>\n<p><strong>P.S.</strong> 沒安裝的話，新增專案會找不到 <strong>Tomcat</strong> 選項</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安裝-Tomcat\"><a href=\"#安裝-Tomcat\" class=\"headerlink\" title=\"安裝 Tomcat\"></a>安裝 Tomcat</h2><ul>\n<li>在<a href=\"https://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">Tomcat官網</a>下載<ul>\n<li>選擇 <strong>Binary Distributions</strong> &gt; Core</li>\n<li>解壓縮</li>\n</ul>\n</li>\n<li>打開 Eclipse ，在新增專案裡找到 <strong>Server</strong>資料夾，選擇 <strong>Server</strong></li>\n<li>進入後選擇 <strong>Apache</strong> &gt; <strong>Tomcat version Server</strong> </li>\n<li>在 <strong><code>Tomcat installation directory</code></strong> 選擇下載的 Tomcat Server</li>\n<li><strong>JRE 版本</strong>選擇現有的版本</li>\n</ul>\n<h2 id=\"手動下載-amp-掛載-Spring-Framework\"><a href=\"#手動下載-amp-掛載-Spring-Framework\" class=\"headerlink\" title=\"手動下載 &amp; 掛載  Spring Framework\"></a>手動下載 &amp; 掛載  Spring Framework</h2><ul>\n<li>下載網址: <a href=\"https://repo.spring.io/release/org/springframework/spring/\" target=\"_blank\" rel=\"noopener\">https://repo.spring.io/release/org/springframework/spring/</a></li>\n<li>選擇版本</li>\n<li>選擇 <strong>spring-version.RELEASE-dist.zip</strong></li>\n<li>在 <strong>Project Explorer</strong> 選擇設定的 <code>project name</code> ， 右鍵 <code>Bulid Path</code> &gt; <code>Configure Build Path</code></li>\n<li>選擇 <strong>Libraries</strong> &gt; <strong>Add External JARS</strong>，選擇下載好的 <code>Spring Framework</code> &gt; <code>libs</code> 底下所有的 jar檔 </li>\n</ul>\n"},{"title":"otherLearning","date":"2020-01-29T12:48:28.000Z","_content":"\n* 什麼是 `meta`?  \n    * 中文翻譯 **`後設資料`**\n    * 對資料內容的描述檔\n    > [wiki](https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE)\n\n      ","source":"otherLearning/index.md","raw":"---\ntitle: otherLearning\ndate: 2020-01-29 20:48:28\n---\n\n* 什麼是 `meta`?  \n    * 中文翻譯 **`後設資料`**\n    * 對資料內容的描述檔\n    > [wiki](https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE)\n\n      ","updated":"2020-01-29T14:31:22.293Z","path":"otherLearning/index.html","comments":1,"layout":"page","_id":"ck8izquwl0015n5jtenm4al6u","content":"<ul>\n<li>什麼是 <code>meta</code>?  <ul>\n<li>中文翻譯 <strong><code>後設資料</code></strong></li>\n<li>對資料內容的描述檔<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>什麼是 <code>meta</code>?  <ul>\n<li>中文翻譯 <strong><code>後設資料</code></strong></li>\n<li>對資料內容的描述檔<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"reac-todolist","date":"2020-04-02T13:46:10.000Z","_content":"# React ToDoList\n### 程式碼\nhttps://github.com/RobYang203/ReactToDoList.git\n\n#### 資料結構\n* id - number\n* position - number\n    * 所處陣列位置\n* type - string\n    * w = 待辦\n    * d = 刪除\n    * f = 結束\n* date - date string\n* description - string\n```js\n{\n    id:0,\n    position:0,\n    type: 'w',\n    date:'2020-03-27T00:00:00',\n    description:'do what'\n}\n```\n#### 畫面\n* 外框\n    * 輸入區\n        * 輸入框\n        * 確認按鈕\n    * 列表區\n        * 單筆事項\n            * 顯示資料\n            * 刪除按鈕\n            * 結束按鈕\n\n#### 元件\n* App\n    * 功能\n        * 維護資料\n        * 建立 InputArea \n        * 根據資料建立 DoThingItem\n        * 接收 DoThingItem 動作來改變資料\n    * 流程\n        * 在 `constructor` 建立參數\n            * **DoThingList**  - 待辦資料陣列\n            * **DoThingCompList**- DoThingItem 元件陣列\n            * **state.modifyType** 判斷目前執行動作\n        * 針對資料建立三種function\n            * `insertItem(text)` \n                * 新增代辦事項到**DoThingList**\n                * 參數\n                    * text - 需要代辦的事項\n            * `finishItem(pos , type)`\n                * 待辦事項完成\n                * 參數\n                    * pos - 在**DoThingList**的位置\n                    * type - 切換類型 w | f\n            * `deletItem(pos)`\n                * 刪除代辦事項\n                * 參數\n                    * pos - 在**DoThingList**的位置\n        * 建立 Component\n            * `createItemCompList`\n                * 根據 **DoThingList** 去建立 DoThingItem\n        * 在`getDerivedStateFromProps` 初始化 state 資訊 \n        * 在`shouldComponentUpdate` 驗證是否需要 **re-render**\n* InputArea\n    * 功能\n        * 在`輸入區`輸入待辦事項\n        * 按下`確認按鈕`，建立一筆資料格式，保存在`外框`並在`列表區`顯示\n    * 流程\n        * 從 App 傳入 `insertItem function`，供資料回傳\n        * 建立 `sendDate function`\n            * 當`Add按鈕`按下去時啟動\n            * 沒有輸入會跳出警告視窗\n            * 有輸入透過`this.props.insertItem`回傳資料\n            \n\n* DoThingItem\n    * 功能    \n        * `列表區` 根據資料建立`單筆事項`\n        * 按下`結束按鈕`，判斷目前資料**type**，訊號送至`外框`改變狀態\n            * `type = w` 轉 **f**\n            * `type = f` 轉 **w**\n        * 按下`刪除按鈕`，訊號送至`外框`，回傳**position**刪除指定資料\n    * 流程\n        * 從 App 傳入 `finishItem function ＆ deletItem function`，供資料回傳\n        * 從 App 傳入 data ，為代辦事項資料，供給元件設定\n        * * 在 `constructor` 建立參數\n            * itemClass - 顯示是否完成的**css class**\n                * `\"\"` - 尚未完成\n                * `checked` - 以完成\n        * 設定 `itemClick function`\n            * 當按下代辦事項啟動\n        * 設定 `itemDeletClick function`\n            * 當按下刪除按鈕時啟動\n        * 在`getDerivedStateFromProps` 根據`props.data `初始化 state 資訊     \n            * 根據 **data.type** 判斷 **itemClass** 的值 \n\n\n","source":"reac-todolist/index.md","raw":"---\ntitle: reac-todolist\ndate: 2020-04-02 21:46:10\n---\n# React ToDoList\n### 程式碼\nhttps://github.com/RobYang203/ReactToDoList.git\n\n#### 資料結構\n* id - number\n* position - number\n    * 所處陣列位置\n* type - string\n    * w = 待辦\n    * d = 刪除\n    * f = 結束\n* date - date string\n* description - string\n```js\n{\n    id:0,\n    position:0,\n    type: 'w',\n    date:'2020-03-27T00:00:00',\n    description:'do what'\n}\n```\n#### 畫面\n* 外框\n    * 輸入區\n        * 輸入框\n        * 確認按鈕\n    * 列表區\n        * 單筆事項\n            * 顯示資料\n            * 刪除按鈕\n            * 結束按鈕\n\n#### 元件\n* App\n    * 功能\n        * 維護資料\n        * 建立 InputArea \n        * 根據資料建立 DoThingItem\n        * 接收 DoThingItem 動作來改變資料\n    * 流程\n        * 在 `constructor` 建立參數\n            * **DoThingList**  - 待辦資料陣列\n            * **DoThingCompList**- DoThingItem 元件陣列\n            * **state.modifyType** 判斷目前執行動作\n        * 針對資料建立三種function\n            * `insertItem(text)` \n                * 新增代辦事項到**DoThingList**\n                * 參數\n                    * text - 需要代辦的事項\n            * `finishItem(pos , type)`\n                * 待辦事項完成\n                * 參數\n                    * pos - 在**DoThingList**的位置\n                    * type - 切換類型 w | f\n            * `deletItem(pos)`\n                * 刪除代辦事項\n                * 參數\n                    * pos - 在**DoThingList**的位置\n        * 建立 Component\n            * `createItemCompList`\n                * 根據 **DoThingList** 去建立 DoThingItem\n        * 在`getDerivedStateFromProps` 初始化 state 資訊 \n        * 在`shouldComponentUpdate` 驗證是否需要 **re-render**\n* InputArea\n    * 功能\n        * 在`輸入區`輸入待辦事項\n        * 按下`確認按鈕`，建立一筆資料格式，保存在`外框`並在`列表區`顯示\n    * 流程\n        * 從 App 傳入 `insertItem function`，供資料回傳\n        * 建立 `sendDate function`\n            * 當`Add按鈕`按下去時啟動\n            * 沒有輸入會跳出警告視窗\n            * 有輸入透過`this.props.insertItem`回傳資料\n            \n\n* DoThingItem\n    * 功能    \n        * `列表區` 根據資料建立`單筆事項`\n        * 按下`結束按鈕`，判斷目前資料**type**，訊號送至`外框`改變狀態\n            * `type = w` 轉 **f**\n            * `type = f` 轉 **w**\n        * 按下`刪除按鈕`，訊號送至`外框`，回傳**position**刪除指定資料\n    * 流程\n        * 從 App 傳入 `finishItem function ＆ deletItem function`，供資料回傳\n        * 從 App 傳入 data ，為代辦事項資料，供給元件設定\n        * * 在 `constructor` 建立參數\n            * itemClass - 顯示是否完成的**css class**\n                * `\"\"` - 尚未完成\n                * `checked` - 以完成\n        * 設定 `itemClick function`\n            * 當按下代辦事項啟動\n        * 設定 `itemDeletClick function`\n            * 當按下刪除按鈕時啟動\n        * 在`getDerivedStateFromProps` 根據`props.data `初始化 state 資訊     \n            * 根據 **data.type** 判斷 **itemClass** 的值 \n\n\n","updated":"2020-04-02T16:44:06.299Z","path":"reac-todolist/index.html","comments":1,"layout":"page","_id":"ck8izquwm0017n5jtf83sefnz","content":"<h1 id=\"React-ToDoList\"><a href=\"#React-ToDoList\" class=\"headerlink\" title=\"React ToDoList\"></a>React ToDoList</h1><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p><a href=\"https://github.com/RobYang203/ReactToDoList.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/ReactToDoList.git</a></p>\n<h4 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h4><ul>\n<li>id - number</li>\n<li>position - number<ul>\n<li>所處陣列位置</li>\n</ul>\n</li>\n<li>type - string<ul>\n<li>w = 待辦</li>\n<li>d = 刪除</li>\n<li>f = 結束</li>\n</ul>\n</li>\n<li>date - date string</li>\n<li>description - string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    id:<span class=\"number\">0</span>,</span><br><span class=\"line\">    position:<span class=\"number\">0</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'w'</span>,</span><br><span class=\"line\">    date:<span class=\"string\">'2020-03-27T00:00:00'</span>,</span><br><span class=\"line\">    description:<span class=\"string\">'do what'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"畫面\"><a href=\"#畫面\" class=\"headerlink\" title=\"畫面\"></a>畫面</h4></li>\n<li>外框<ul>\n<li>輸入區<ul>\n<li>輸入框</li>\n<li>確認按鈕</li>\n</ul>\n</li>\n<li>列表區<ul>\n<li>單筆事項<ul>\n<li>顯示資料</li>\n<li>刪除按鈕</li>\n<li>結束按鈕</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h4><ul>\n<li>App<ul>\n<li>功能<ul>\n<li>維護資料</li>\n<li>建立 InputArea </li>\n<li>根據資料建立 DoThingItem</li>\n<li>接收 DoThingItem 動作來改變資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li><strong>DoThingList</strong>  - 待辦資料陣列</li>\n<li><strong>DoThingCompList</strong>- DoThingItem 元件陣列</li>\n<li><strong>state.modifyType</strong> 判斷目前執行動作</li>\n</ul>\n</li>\n<li>針對資料建立三種function<ul>\n<li><code>insertItem(text)</code> <ul>\n<li>新增代辦事項到<strong>DoThingList</strong></li>\n<li>參數<ul>\n<li>text - 需要代辦的事項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>finishItem(pos , type)</code><ul>\n<li>待辦事項完成</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n<li>type - 切換類型 w | f</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>deletItem(pos)</code><ul>\n<li>刪除代辦事項</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>建立 Component<ul>\n<li><code>createItemCompList</code><ul>\n<li>根據 <strong>DoThingList</strong> 去建立 DoThingItem</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 初始化 state 資訊 </li>\n<li>在<code>shouldComponentUpdate</code> 驗證是否需要 <strong>re-render</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>InputArea<ul>\n<li>功能<ul>\n<li>在<code>輸入區</code>輸入待辦事項</li>\n<li>按下<code>確認按鈕</code>，建立一筆資料格式，保存在<code>外框</code>並在<code>列表區</code>顯示</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>insertItem function</code>，供資料回傳</li>\n<li>建立 <code>sendDate function</code><ul>\n<li>當<code>Add按鈕</code>按下去時啟動</li>\n<li>沒有輸入會跳出警告視窗</li>\n<li>有輸入透過<code>this.props.insertItem</code>回傳資料</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>DoThingItem<ul>\n<li>功能    <ul>\n<li><code>列表區</code> 根據資料建立<code>單筆事項</code></li>\n<li>按下<code>結束按鈕</code>，判斷目前資料<strong>type</strong>，訊號送至<code>外框</code>改變狀態<ul>\n<li><code>type = w</code> 轉 <strong>f</strong></li>\n<li><code>type = f</code> 轉 <strong>w</strong></li>\n</ul>\n</li>\n<li>按下<code>刪除按鈕</code>，訊號送至<code>外框</code>，回傳<strong>position</strong>刪除指定資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>finishItem function ＆ deletItem function</code>，供資料回傳</li>\n<li>從 App 傳入 data ，為代辦事項資料，供給元件設定</li>\n<li><ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li>itemClass - 顯示是否完成的<strong>css class</strong><ul>\n<li><code>&quot;&quot;</code> - 尚未完成</li>\n<li><code>checked</code> - 以完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>設定 <code>itemClick function</code><ul>\n<li>當按下代辦事項啟動</li>\n</ul>\n</li>\n<li>設定 <code>itemDeletClick function</code><ul>\n<li>當按下刪除按鈕時啟動</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 根據<code>props.data</code>初始化 state 資訊     <ul>\n<li>根據 <strong>data.type</strong> 判斷 <strong>itemClass</strong> 的值 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-ToDoList\"><a href=\"#React-ToDoList\" class=\"headerlink\" title=\"React ToDoList\"></a>React ToDoList</h1><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p><a href=\"https://github.com/RobYang203/ReactToDoList.git\" target=\"_blank\" rel=\"noopener\">https://github.com/RobYang203/ReactToDoList.git</a></p>\n<h4 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h4><ul>\n<li>id - number</li>\n<li>position - number<ul>\n<li>所處陣列位置</li>\n</ul>\n</li>\n<li>type - string<ul>\n<li>w = 待辦</li>\n<li>d = 刪除</li>\n<li>f = 結束</li>\n</ul>\n</li>\n<li>date - date string</li>\n<li>description - string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    id:<span class=\"number\">0</span>,</span><br><span class=\"line\">    position:<span class=\"number\">0</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'w'</span>,</span><br><span class=\"line\">    date:<span class=\"string\">'2020-03-27T00:00:00'</span>,</span><br><span class=\"line\">    description:<span class=\"string\">'do what'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"畫面\"><a href=\"#畫面\" class=\"headerlink\" title=\"畫面\"></a>畫面</h4></li>\n<li>外框<ul>\n<li>輸入區<ul>\n<li>輸入框</li>\n<li>確認按鈕</li>\n</ul>\n</li>\n<li>列表區<ul>\n<li>單筆事項<ul>\n<li>顯示資料</li>\n<li>刪除按鈕</li>\n<li>結束按鈕</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h4><ul>\n<li>App<ul>\n<li>功能<ul>\n<li>維護資料</li>\n<li>建立 InputArea </li>\n<li>根據資料建立 DoThingItem</li>\n<li>接收 DoThingItem 動作來改變資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li><strong>DoThingList</strong>  - 待辦資料陣列</li>\n<li><strong>DoThingCompList</strong>- DoThingItem 元件陣列</li>\n<li><strong>state.modifyType</strong> 判斷目前執行動作</li>\n</ul>\n</li>\n<li>針對資料建立三種function<ul>\n<li><code>insertItem(text)</code> <ul>\n<li>新增代辦事項到<strong>DoThingList</strong></li>\n<li>參數<ul>\n<li>text - 需要代辦的事項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>finishItem(pos , type)</code><ul>\n<li>待辦事項完成</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n<li>type - 切換類型 w | f</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>deletItem(pos)</code><ul>\n<li>刪除代辦事項</li>\n<li>參數<ul>\n<li>pos - 在<strong>DoThingList</strong>的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>建立 Component<ul>\n<li><code>createItemCompList</code><ul>\n<li>根據 <strong>DoThingList</strong> 去建立 DoThingItem</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 初始化 state 資訊 </li>\n<li>在<code>shouldComponentUpdate</code> 驗證是否需要 <strong>re-render</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>InputArea<ul>\n<li>功能<ul>\n<li>在<code>輸入區</code>輸入待辦事項</li>\n<li>按下<code>確認按鈕</code>，建立一筆資料格式，保存在<code>外框</code>並在<code>列表區</code>顯示</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>insertItem function</code>，供資料回傳</li>\n<li>建立 <code>sendDate function</code><ul>\n<li>當<code>Add按鈕</code>按下去時啟動</li>\n<li>沒有輸入會跳出警告視窗</li>\n<li>有輸入透過<code>this.props.insertItem</code>回傳資料</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>DoThingItem<ul>\n<li>功能    <ul>\n<li><code>列表區</code> 根據資料建立<code>單筆事項</code></li>\n<li>按下<code>結束按鈕</code>，判斷目前資料<strong>type</strong>，訊號送至<code>外框</code>改變狀態<ul>\n<li><code>type = w</code> 轉 <strong>f</strong></li>\n<li><code>type = f</code> 轉 <strong>w</strong></li>\n</ul>\n</li>\n<li>按下<code>刪除按鈕</code>，訊號送至<code>外框</code>，回傳<strong>position</strong>刪除指定資料</li>\n</ul>\n</li>\n<li>流程<ul>\n<li>從 App 傳入 <code>finishItem function ＆ deletItem function</code>，供資料回傳</li>\n<li>從 App 傳入 data ，為代辦事項資料，供給元件設定</li>\n<li><ul>\n<li>在 <code>constructor</code> 建立參數<ul>\n<li>itemClass - 顯示是否完成的<strong>css class</strong><ul>\n<li><code>&quot;&quot;</code> - 尚未完成</li>\n<li><code>checked</code> - 以完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>設定 <code>itemClick function</code><ul>\n<li>當按下代辦事項啟動</li>\n</ul>\n</li>\n<li>設定 <code>itemDeletClick function</code><ul>\n<li>當按下刪除按鈕時啟動</li>\n</ul>\n</li>\n<li>在<code>getDerivedStateFromProps</code> 根據<code>props.data</code>初始化 state 資訊     <ul>\n<li>根據 <strong>data.type</strong> 判斷 <strong>itemClass</strong> 的值 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"react_setting","date":"2020-03-25T14:48:37.000Z","_content":"\n## React 設定\n### 下載套件\n* dev 環境\n\t* @babel/core\n\t\t* babel 核心 \bapi\n\t* @babel/preset-env\n\t\t* 轉譯 es2015\n\t* @babel/preset-react\n\t\t* 轉譯 jsx\n\t* babel-loader\n\t\t* babel 轉譯工具\n\t* @babel/plugin-proposal-class-properties\n\t\t* 可以在 class 內宣告 Arrow function\n\t\t* 在 `.babelrc`要加上屬性\n\t* style-loader \n\t* css-loader\n\n* react\n* react-dom \n\n### webpack 設定\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後資源儲存的位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest:/\\.css$/,//判斷是否為\".css\"\n\t\t\t\tloader:[\"css-loader\",\"style-loader\"],//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n```\n### .babelrc 設定\n* 語法轉譯器\n* 對 jsx 進行轉譯\n* 參數 \n    * presets \n        * 預設轉譯器\n    *  env \n        * 針對環境設置\n```json\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            // 設定需要翻譯 es2015 的瀏覽器最低版本\n            \"edge\": 17,\n            \"firefox\": 60,\n            \"chrome\": 67,\n            \"safari\": 11.1\n          },\n          // 設定針對 es6 有用到的套件在導入\n          \"useBuiltIns\": \"usage\"\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n\n","source":"react-setting/index.md","raw":"---\ntitle: react_setting\ndate: 2020-03-25 22:48:37\n---\n\n## React 設定\n### 下載套件\n* dev 環境\n\t* @babel/core\n\t\t* babel 核心 \bapi\n\t* @babel/preset-env\n\t\t* 轉譯 es2015\n\t* @babel/preset-react\n\t\t* 轉譯 jsx\n\t* babel-loader\n\t\t* babel 轉譯工具\n\t* @babel/plugin-proposal-class-properties\n\t\t* 可以在 class 內宣告 Arrow function\n\t\t* 在 `.babelrc`要加上屬性\n\t* style-loader \n\t* css-loader\n\n* react\n* react-dom \n\n### webpack 設定\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後資源儲存的位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest:/\\.css$/,//判斷是否為\".css\"\n\t\t\t\tloader:[\"css-loader\",\"style-loader\"],//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n```\n### .babelrc 設定\n* 語法轉譯器\n* 對 jsx 進行轉譯\n* 參數 \n    * presets \n        * 預設轉譯器\n    *  env \n        * 針對環境設置\n```json\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            // 設定需要翻譯 es2015 的瀏覽器最低版本\n            \"edge\": 17,\n            \"firefox\": 60,\n            \"chrome\": 67,\n            \"safari\": 11.1\n          },\n          // 設定針對 es6 有用到的套件在導入\n          \"useBuiltIns\": \"usage\"\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n\n","updated":"2020-03-30T17:53:23.836Z","path":"react-setting/index.html","comments":1,"layout":"page","_id":"ck8izquwn0018n5jt0yh5e4uw","content":"<h2 id=\"React-設定\"><a href=\"#React-設定\" class=\"headerlink\" title=\"React 設定\"></a>React 設定</h2><h3 id=\"下載套件\"><a href=\"#下載套件\" class=\"headerlink\" title=\"下載套件\"></a>下載套件</h3><ul>\n<li><p>dev 環境</p>\n<ul>\n<li>@babel/core<ul>\n<li>babel 核心 \bapi</li>\n</ul>\n</li>\n<li>@babel/preset-env<ul>\n<li>轉譯 es2015</li>\n</ul>\n</li>\n<li>@babel/preset-react<ul>\n<li>轉譯 jsx</li>\n</ul>\n</li>\n<li>babel-loader<ul>\n<li>babel 轉譯工具</li>\n</ul>\n</li>\n<li>@babel/plugin-proposal-class-properties<ul>\n<li>可以在 class 內宣告 Arrow function</li>\n<li>在 <code>.babelrc</code>要加上屬性</li>\n</ul>\n</li>\n<li>style-loader </li>\n<li>css-loader</li>\n</ul>\n</li>\n<li><p>react</p>\n</li>\n<li><p>react-dom </p>\n</li>\n</ul>\n<h3 id=\"webpack-設定\"><a href=\"#webpack-設定\" class=\"headerlink\" title=\"webpack 設定\"></a>webpack 設定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry:[<span class=\"comment\">//執行點</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"./main.jsx\"</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput:&#123;<span class=\"comment\">//編譯輸出點</span></span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span></span><br><span class=\"line\">\t\tfilename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後資源儲存的位置</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve:&#123;<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span></span><br><span class=\"line\">\t\tmodules:[</span><br><span class=\"line\">\t\t\tpath.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span></span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\textensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span></span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span></span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">//判斷是否為\".css\"</span></span><br><span class=\"line\">\t\t\t\tloader:[<span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"style-loader\"</span>],<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">\t\t\tReact:<span class=\"string\">'react'</span>,</span><br><span class=\"line\">\t\t\tRectDOM:<span class=\"string\">'react-dom'</span></span><br><span class=\"line\">        &#125;),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc-設定\"><a href=\"#babelrc-設定\" class=\"headerlink\" title=\".babelrc 設定\"></a>.babelrc 設定</h3><ul>\n<li>語法轉譯器</li>\n<li>對 jsx 進行轉譯</li>\n<li>參數 <ul>\n<li>presets <ul>\n<li>預設轉譯器</li>\n</ul>\n</li>\n<li>env <ul>\n<li>針對環境設置<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"targets\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 設定需要翻譯 es2015 的瀏覽器最低版本</span></span><br><span class=\"line\">            <span class=\"attr\">\"edge\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"firefox\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"chrome\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"safari\"</span>: <span class=\"number\">11.1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 設定針對 es6 有用到的套件在導入</span></span><br><span class=\"line\">          <span class=\"attr\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React-設定\"><a href=\"#React-設定\" class=\"headerlink\" title=\"React 設定\"></a>React 設定</h2><h3 id=\"下載套件\"><a href=\"#下載套件\" class=\"headerlink\" title=\"下載套件\"></a>下載套件</h3><ul>\n<li><p>dev 環境</p>\n<ul>\n<li>@babel/core<ul>\n<li>babel 核心 \bapi</li>\n</ul>\n</li>\n<li>@babel/preset-env<ul>\n<li>轉譯 es2015</li>\n</ul>\n</li>\n<li>@babel/preset-react<ul>\n<li>轉譯 jsx</li>\n</ul>\n</li>\n<li>babel-loader<ul>\n<li>babel 轉譯工具</li>\n</ul>\n</li>\n<li>@babel/plugin-proposal-class-properties<ul>\n<li>可以在 class 內宣告 Arrow function</li>\n<li>在 <code>.babelrc</code>要加上屬性</li>\n</ul>\n</li>\n<li>style-loader </li>\n<li>css-loader</li>\n</ul>\n</li>\n<li><p>react</p>\n</li>\n<li><p>react-dom </p>\n</li>\n</ul>\n<h3 id=\"webpack-設定\"><a href=\"#webpack-設定\" class=\"headerlink\" title=\"webpack 設定\"></a>webpack 設定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry:[<span class=\"comment\">//執行點</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"./main.jsx\"</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput:&#123;<span class=\"comment\">//編譯輸出點</span></span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">\"dist\"</span>),<span class=\"comment\">//輸出路徑</span></span><br><span class=\"line\">\t\tfilename:<span class=\"string\">\"compiled.js\"</span>,<span class=\"comment\">//編譯後的檔名</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">\"/\"</span><span class=\"comment\">//編譯後資源儲存的位置</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tresolve:&#123;<span class=\"comment\">//當 import | require 時，會去指定目錄尋找 &amp; 解析</span></span><br><span class=\"line\">\t\tmodules:[</span><br><span class=\"line\">\t\t\tpath.resolve(__dirname,<span class=\"string\">'src'</span>), <span class=\"string\">'node_modules'</span><span class=\"comment\">//尋找指定資料夾</span></span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\textensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">'jsx'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'scss'</span>]<span class=\"comment\">//尋找指定副檔名</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;<span class=\"comment\">//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js</span></span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,<span class=\"comment\">//判斷是否為\".js or jsx\"</span></span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">\"babel-loader\"</span>,<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">//判斷是否為\".css\"</span></span><br><span class=\"line\">\t\t\t\tloader:[<span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"style-loader\"</span>],<span class=\"comment\">//編譯器，把符合條件的檔案，編譯成指定樣式</span></span><br><span class=\"line\">\t\t\t\texclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),<span class=\"comment\">//在不更新頁面的情況下更新Module</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">\t\t\tReact:<span class=\"string\">'react'</span>,</span><br><span class=\"line\">\t\t\tRectDOM:<span class=\"string\">'react-dom'</span></span><br><span class=\"line\">        &#125;),<span class=\"comment\">//建置時，碰到輸入的 key 直接 import，指定 value</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin()<span class=\"comment\">//會根據config設定在，路徑 output.path 建立html文件</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc-設定\"><a href=\"#babelrc-設定\" class=\"headerlink\" title=\".babelrc 設定\"></a>.babelrc 設定</h3><ul>\n<li>語法轉譯器</li>\n<li>對 jsx 進行轉譯</li>\n<li>參數 <ul>\n<li>presets <ul>\n<li>預設轉譯器</li>\n</ul>\n</li>\n<li>env <ul>\n<li>針對環境設置<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"targets\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 設定需要翻譯 es2015 的瀏覽器最低版本</span></span><br><span class=\"line\">            <span class=\"attr\">\"edge\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"firefox\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"chrome\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"safari\"</span>: <span class=\"number\">11.1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 設定針對 es6 有用到的套件在導入</span></span><br><span class=\"line\">          <span class=\"attr\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"標籤","date":"2020-01-24T14:09:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2020-01-24 22:09:19\ntype: \"tags\"\n---\n","updated":"2020-01-24T16:06:43.268Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck8izquwn001an5jt2qjw3pf0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"webpackNote","date":"2020-03-25T15:59:32.000Z","_content":"\n## Webpack \n\n#### 為什麼要用 Webpack\n> 首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣\n\n>那...其他語言 like sass 、 markdown 、 jsx ....etc 瀏覽器要怎麼看呢?\n答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻\n\n>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的\n\t\n#### Webpack 的打包\n>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂\n通常會有進入點 **entry.js** ，\n\n>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案\n\n#### 初始化\n1. Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 \n    * npm init\n2. 下載 Webpack 套件\n    * npm install webpack webpack-cli --save\n3. 設定運行指定在 **package.json 的 scripts tag** \n    * \"[command name]\": \"webpack  --mode [mode name]\"\n        * command name\n            * 設定想用甚麼指令呼叫 webpack\n            * 執行時呼叫 npm run [command name]\n            * test、start 只需要前面加上 npm\n        * mode name\n            * development\n                * 開發模式，編譯出來的檔案會有清楚的斷點提供debug\n            * production\n                * 正式模式，編譯出來的檔案不會有斷點\n    ```json\n    \"scripts\": { \n            \"webpack\": \"webpack  --mode development \"\n     },\n    ```\n4. 新增 **webpack.config.js**\n    * 此專案 webpack 的設定檔\n    * 在裡面宣告 config物件，export 成模組\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後url位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n``` \n\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 & 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                > ex: '.js','.jsx','.css','.scss'\n* \tmodule\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        > babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        > 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        > .babelrc  參數設錯\n* Error: Cannot find module '@babel/core'\n    * 原因:\n        > 缺少指定套件\n    * 解決方式:\n        > 安裝上面找不到的套件\n        \n* Module not found: Error: Can't resolve 'react-dom'\n    * 原因:\n        > 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        > 在 webpack.config.js 裡要宣告 var webpack = require('webpack');\n\n                                \n\n","source":"webpackNote/index.md","raw":"---\ntitle: webpackNote\ndate: 2020-03-25 23:59:32\n---\n\n## Webpack \n\n#### 為什麼要用 Webpack\n> 首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣\n\n>那...其他語言 like sass 、 markdown 、 jsx ....etc 瀏覽器要怎麼看呢?\n答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻\n\n>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的\n\t\n#### Webpack 的打包\n>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂\n通常會有進入點 **entry.js** ，\n\n>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案\n\n#### 初始化\n1. Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 \n    * npm init\n2. 下載 Webpack 套件\n    * npm install webpack webpack-cli --save\n3. 設定運行指定在 **package.json 的 scripts tag** \n    * \"[command name]\": \"webpack  --mode [mode name]\"\n        * command name\n            * 設定想用甚麼指令呼叫 webpack\n            * 執行時呼叫 npm run [command name]\n            * test、start 只需要前面加上 npm\n        * mode name\n            * development\n                * 開發模式，編譯出來的檔案會有清楚的斷點提供debug\n            * production\n                * 正式模式，編譯出來的檔案不會有斷點\n    ```json\n    \"scripts\": { \n            \"webpack\": \"webpack  --mode development \"\n     },\n    ```\n4. 新增 **webpack.config.js**\n    * 此專案 webpack 的設定檔\n    * 在裡面宣告 config物件，export 成模組\n```js\nvar path = require('path'); //取得路徑\nvar webpack = require('webpack');\n\nmodule.exports={\n\tentry:[//執行點\n\t\t\"./main.jsx\"\n\t],\n\toutput:{//編譯輸出點\n\t\tpath:path.join(__dirname,\"dist\"),//輸出路徑\n\t\tfilename:\"compiled.js\",//編譯後的檔名\n\t\tpublicPath:\"/\"//編譯後url位置\n\t},\n\tresolve:{//當 import | require 時，會去指定目錄尋找 & 解析\n\t\tmodules:[\n\t\t\tpath.resolve(__dirname,'src'), 'node_modules'//尋找指定資料夾\n\t\t],\n\t\textensions:['.js','jsx','css','scss']//尋找指定副檔名\n\t},\n\tmodule:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,//判斷是否為\".js or jsx\"\n\t\t\t\tloader:\"babel-loader\",//編譯器，把符合條件的檔案，編譯成指定樣式\n\t\t\t\texclude:/node_modules/\n\t\t\t}\n\t\t]\n\t},\n\tdevtool:'cheap-module-eval-source-map',\n\tplugins:[\n\t\tnew webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module\n\t\tnew webpack.ProvidePlugin({\n\t\t\tReact:'react',\n\t\t\tRectDOM:'react-dom'\n        }),//建置時，碰到輸入的 key 直接 import，指定 value\n        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件\n\t]\n};\n``` \n\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 & 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                > ex: '.js','.jsx','.css','.scss'\n* \tmodule\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        > babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        > 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        > .babelrc  參數設錯\n* Error: Cannot find module '@babel/core'\n    * 原因:\n        > 缺少指定套件\n    * 解決方式:\n        > 安裝上面找不到的套件\n        \n* Module not found: Error: Can't resolve 'react-dom'\n    * 原因:\n        > 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        > 在 webpack.config.js 裡要宣告 var webpack = require('webpack');\n\n                                \n\n","updated":"2020-03-26T09:15:57.760Z","path":"webpackNote/index.html","comments":1,"layout":"page","_id":"ck8izquwp001cn5jthtio36qv","content":"<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><h4 id=\"為什麼要用-Webpack\"><a href=\"#為什麼要用-Webpack\" class=\"headerlink\" title=\"為什麼要用 Webpack\"></a>為什麼要用 Webpack</h4><blockquote>\n<p>首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣</p>\n</blockquote>\n<blockquote>\n<p>那…其他語言 like sass 、 markdown 、 jsx ….etc 瀏覽器要怎麼看呢?<br>答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻</p>\n</blockquote>\n<blockquote>\n<p>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的</p>\n</blockquote>\n<h4 id=\"Webpack-的打包\"><a href=\"#Webpack-的打包\" class=\"headerlink\" title=\"Webpack 的打包\"></a>Webpack 的打包</h4><blockquote>\n<p>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂<br>通常會有進入點 <strong>entry.js</strong> ，</p>\n</blockquote>\n<blockquote>\n<p>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 <ul>\n<li>npm init</li>\n</ul>\n</li>\n<li>下載 Webpack 套件<ul>\n<li>npm install webpack webpack-cli –save</li>\n</ul>\n</li>\n<li>設定運行指定在 <strong>package.json 的 scripts tag</strong> <ul>\n<li>“[command name]”: “webpack  –mode [mode name]”<ul>\n<li>command name<ul>\n<li>設定想用甚麼指令呼叫 webpack</li>\n<li>執行時呼叫 npm run [command name]</li>\n<li>test、start 只需要前面加上 npm</li>\n</ul>\n</li>\n<li>mode name<ul>\n<li>development<ul>\n<li>開發模式，編譯出來的檔案會有清楚的斷點提供debug</li>\n</ul>\n</li>\n<li>production<ul>\n<li>正式模式，編譯出來的檔案不會有斷點<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123; </span><br><span class=\"line\">        \"webpack\": \"webpack  --mode development \"</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新增 <strong>webpack.config.js</strong><ul>\n<li>此專案 webpack 的設定檔</li>\n<li>在裡面宣告 config物件，export 成模組<pre><code class=\"js\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span>\n<span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<p>module.exports={<br>    entry:[//執行點<br>        “./main.jsx”<br>    ],<br>    output:{//編譯輸出點<br>        path:path.join(<strong>dirname,”dist”),//輸出路徑<br>        filename:”compiled.js”,//編譯後的檔名<br>        publicPath:”/“//編譯後url位置<br>    },<br>    resolve:{//當 import | require 時，會去指定目錄尋找 &amp; 解析<br>        modules:[<br>            path.resolve(</strong>dirname,’src’), ‘node_modules’//尋找指定資料夾<br>        ],<br>        extensions:[‘.js’,’jsx’,’css’,’scss’]//尋找指定副檔名<br>    },<br>    module:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js<br>        rules:[<br>            {<br>                test:/.(js|jsx)$/,//判斷是否為”.js or jsx”<br>                loader:”babel-loader”,//編譯器，把符合條件的檔案，編譯成指定樣式<br>                exclude:/node_modules/<br>            }<br>        ]<br>    },<br>    devtool:’cheap-module-eval-source-map’,<br>    plugins:[<br>        new webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module<br>        new webpack.ProvidePlugin({<br>            React:’react’,<br>            RectDOM:’react-dom’<br>        }),//建置時，碰到輸入的 key 直接 import，指定 value<br>        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件<br>    ]<br>};</p>\n<pre><code>\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 &amp; 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                &gt; ex: &apos;.js&apos;,&apos;.jsx&apos;,&apos;.css&apos;,&apos;.scss&apos;\n*     module\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        &gt; babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        &gt; 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        &gt; .babelrc  參數設錯\n* Error: Cannot find module &apos;@babel/core&apos;\n    * 原因:\n        &gt; 缺少指定套件\n    * 解決方式:\n        &gt; 安裝上面找不到的套件\n\n* Module not found: Error: Can&apos;t resolve &apos;react-dom&apos;\n    * 原因:\n        &gt; 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        &gt; 在 webpack.config.js 裡要宣告 var webpack = require(&apos;webpack&apos;);\n\n\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><h4 id=\"為什麼要用-Webpack\"><a href=\"#為什麼要用-Webpack\" class=\"headerlink\" title=\"為什麼要用 Webpack\"></a>為什麼要用 Webpack</h4><blockquote>\n<p>首先，我們要先了解一點，目前網頁組成就是 html、script、css，就這3樣，沒有別的，瀏覽器也只看得懂這三樣</p>\n</blockquote>\n<blockquote>\n<p>那…其他語言 like sass 、 markdown 、 jsx ….etc 瀏覽器要怎麼看呢?<br>答案就是翻譯阿，就像你聽不懂英文，可以找翻譯幫你翻</p>\n</blockquote>\n<blockquote>\n<p>Webpack所做的，就是幫你把這些瀏覽器看不懂的，打包成它看得懂的</p>\n</blockquote>\n<h4 id=\"Webpack-的打包\"><a href=\"#Webpack-的打包\" class=\"headerlink\" title=\"Webpack 的打包\"></a>Webpack 的打包</h4><blockquote>\n<p>Webpack 的作用是打包，打包還是要經過翻譯的，這些翻譯的部分會由使用者來自訂<br>通常會有進入點 <strong>entry.js</strong> ，</p>\n</blockquote>\n<blockquote>\n<p>經過它可以把需要打包的檔案給處理好，轉成一個 or 多個檔案</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ol>\n<li>Webpack 是建立在 nodejs 基礎之上的，所以必須要裝 nodejs，並建立 nodejs 專案 <ul>\n<li>npm init</li>\n</ul>\n</li>\n<li>下載 Webpack 套件<ul>\n<li>npm install webpack webpack-cli –save</li>\n</ul>\n</li>\n<li>設定運行指定在 <strong>package.json 的 scripts tag</strong> <ul>\n<li>“[command name]”: “webpack  –mode [mode name]”<ul>\n<li>command name<ul>\n<li>設定想用甚麼指令呼叫 webpack</li>\n<li>執行時呼叫 npm run [command name]</li>\n<li>test、start 只需要前面加上 npm</li>\n</ul>\n</li>\n<li>mode name<ul>\n<li>development<ul>\n<li>開發模式，編譯出來的檔案會有清楚的斷點提供debug</li>\n</ul>\n</li>\n<li>production<ul>\n<li>正式模式，編譯出來的檔案不會有斷點<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123; </span><br><span class=\"line\">        \"webpack\": \"webpack  --mode development \"</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新增 <strong>webpack.config.js</strong><ul>\n<li>此專案 webpack 的設定檔</li>\n<li>在裡面宣告 config物件，export 成模組<pre><code class=\"js\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//取得路徑</span>\n<span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<p>module.exports={<br>    entry:[//執行點<br>        “./main.jsx”<br>    ],<br>    output:{//編譯輸出點<br>        path:path.join(<strong>dirname,”dist”),//輸出路徑<br>        filename:”compiled.js”,//編譯後的檔名<br>        publicPath:”/“//編譯後url位置<br>    },<br>    resolve:{//當 import | require 時，會去指定目錄尋找 &amp; 解析<br>        modules:[<br>            path.resolve(</strong>dirname,’src’), ‘node_modules’//尋找指定資料夾<br>        ],<br>        extensions:[‘.js’,’jsx’,’css’,’scss’]//尋找指定副檔名<br>    },<br>    module:{//針對不同的語言載入不同的模組 ex:babel、TypeScript，讓其可編譯後輸出成為直譯器所讀的檔案 .js<br>        rules:[<br>            {<br>                test:/.(js|jsx)$/,//判斷是否為”.js or jsx”<br>                loader:”babel-loader”,//編譯器，把符合條件的檔案，編譯成指定樣式<br>                exclude:/node_modules/<br>            }<br>        ]<br>    },<br>    devtool:’cheap-module-eval-source-map’,<br>    plugins:[<br>        new webpack.HotModuleReplacementPlugin(),//在不更新頁面的情況下更新Module<br>        new webpack.ProvidePlugin({<br>            React:’react’,<br>            RectDOM:’react-dom’<br>        }),//建置時，碰到輸入的 key 直接 import，指定 value<br>        new HtmlWebpackPlugin()//會根據config設定在，路徑 output.path 建立html文件<br>    ]<br>};</p>\n<pre><code>\n#### 參數\n* entry - `str array`\n    * 進入點，去設定 webpack 解析地進入路徑\n* output - `obj`\n    * 編譯輸出點\n    * 參數\n        * path\n            * 輸出路徑\n        * filename\n            * 編譯後的檔名\n        * publicPath\n            * 編譯後url的位置\n* resolve - `obj`\n    * 當 import | require 時，會去指定目錄尋找 &amp; 解析\n    * 參數\n        * modules - `str array`\n            * 尋找指定模組位置資料夾\n        * extensions\n            * 尋找指定副檔名\n                &gt; ex: &apos;.js&apos;,&apos;.jsx&apos;,&apos;.css&apos;,&apos;.scss&apos;\n*     module\n    * 針對不同的語言載入不同的模組 `ex:babel、TypeScript`，讓其可編譯後輸出成為直譯器所讀的檔案 \n    * 參數 - `obj`\n        * rules - obj array\n            * 指定規則群\n            * 參數\n                * test\n                    * 檢查條件，條件符合執行 loader\n                * loader\n                    * 編譯器，把符合條件的檔案，編譯成指定樣式\n                * exclude\n                    * 排除目標資料夾\n* devtool - `str`\n    * debug 的工具\n    * 有七種模式\n* plugins -  `obj array`\n    * 插件\n    * HtmlWebpackPlugin\n        * `npm install html-webpack-plugin --save-dev`\n        * 根據 webpack.config 設定，導出html文件\n\n\n\n## Question \n* Plugin/Preset files are not allowed to export objects, only functions. In K:\\Work\\TestReact\\node_modules\\babel-preset-es2015\\lib\\index.js\n    * 原因:\n        &gt; babel-loader 版本 在 .babelrc presets 解析的 目標版本錯誤\n    * 解決方式:\n        &gt; 更換正確目標版本\n* ReferenceError: Unknown option: .preset. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\n    * 原因:\n        &gt; .babelrc  參數設錯\n* Error: Cannot find module &apos;@babel/core&apos;\n    * 原因:\n        &gt; 缺少指定套件\n    * 解決方式:\n        &gt; 安裝上面找不到的套件\n\n* Module not found: Error: Can&apos;t resolve &apos;react-dom&apos;\n    * 原因:\n        &gt; 在 webpack.config.js 的 resolve 少了 node_modules資料夾\n* 當安裝完  webpack-cli 後出現\n`K:\\Work\\TestReact2\\node_modules\\webpack-cli\\bin\\cli.js:93throw err;ReferenceError: webpack is not defined`\n    * 原因:\n        &gt; 在 webpack.config.js 裡要宣告 var webpack = require(&apos;webpack&apos;);\n\n\n</code></pre>"}],"Post":[{"title":"Hexo教學","date":"2020-01-24T14:02:37.000Z","_content":"# Hexo\n\n[連結](https://robyang203.github.io/HexoTech)\n\n\n","source":"_posts/Hexo教學.md","raw":"---\ntitle: Hexo教學\ndate: 2020-01-24 22:02:37\ncategories:\n- Hexo\ntags: \n- Hexo\n- 教學\n\n---\n# Hexo\n\n[連結](https://robyang203.github.io/HexoTech)\n\n\n","slug":"Hexo教學","published":1,"updated":"2020-01-24T16:06:43.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8izquvx0001n5jt1fe77qxy","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://robyang203.github.io/HexoTech\">連結</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://robyang203.github.io/HexoTech\">連結</a></p>\n"},{"title":"JAVA-Spring for Eclipse 設定","date":"2020-01-24T14:55:42.000Z","_content":"\n* [Eclipse 設定](/eclipse-setting)\n* [Spring 介紹](/SpringIntro)\n* [Eclipse Spring Project Setting](/Eclipse_Spring_Project_Setting)\n* [Spring Simple Test](/JAVA-Spring-Tech)\n* [JAVA-Spring WebSite for Eclipse for XML](/JAVA-Spring-WebSite-for-Eclipse)\n* [JAVA-Spring WebSite for Eclipse for JavaConfig](/JAVA-Spring-WebSite-for-Eclipse2)\n* [JPA 設定](/JAVA-JPA-Setting)\n* [Spring Q-List](/JAVA-Spring-QList)\n\n\n","source":"_posts/JAVA-Spring-WebSite-for-Eclipse.md","raw":"---\ntitle: JAVA-Spring for Eclipse 設定\ndate: 2020-01-24 22:55:42\ncategories:\n- JAVA-Spring\ntags: \n- JAVA\n- Spring\n- 教學\n\n---\n\n* [Eclipse 設定](/eclipse-setting)\n* [Spring 介紹](/SpringIntro)\n* [Eclipse Spring Project Setting](/Eclipse_Spring_Project_Setting)\n* [Spring Simple Test](/JAVA-Spring-Tech)\n* [JAVA-Spring WebSite for Eclipse for XML](/JAVA-Spring-WebSite-for-Eclipse)\n* [JAVA-Spring WebSite for Eclipse for JavaConfig](/JAVA-Spring-WebSite-for-Eclipse2)\n* [JPA 設定](/JAVA-JPA-Setting)\n* [Spring Q-List](/JAVA-Spring-QList)\n\n\n","slug":"JAVA-Spring-WebSite-for-Eclipse","published":1,"updated":"2020-02-25T17:40:36.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8izquw10003n5jt6ias0uzg","content":"<ul>\n<li><a href=\"/eclipse-setting\">Eclipse 設定</a></li>\n<li><a href=\"/SpringIntro\">Spring 介紹</a></li>\n<li><a href=\"/Eclipse_Spring_Project_Setting\">Eclipse Spring Project Setting</a></li>\n<li><a href=\"/JAVA-Spring-Tech\">Spring Simple Test</a></li>\n<li><a href=\"/JAVA-Spring-WebSite-for-Eclipse\">JAVA-Spring WebSite for Eclipse for XML</a></li>\n<li><a href=\"/JAVA-Spring-WebSite-for-Eclipse2\">JAVA-Spring WebSite for Eclipse for JavaConfig</a></li>\n<li><a href=\"/JAVA-JPA-Setting\">JPA 設定</a></li>\n<li><a href=\"/JAVA-Spring-QList\">Spring Q-List</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/eclipse-setting\">Eclipse 設定</a></li>\n<li><a href=\"/SpringIntro\">Spring 介紹</a></li>\n<li><a href=\"/Eclipse_Spring_Project_Setting\">Eclipse Spring Project Setting</a></li>\n<li><a href=\"/JAVA-Spring-Tech\">Spring Simple Test</a></li>\n<li><a href=\"/JAVA-Spring-WebSite-for-Eclipse\">JAVA-Spring WebSite for Eclipse for XML</a></li>\n<li><a href=\"/JAVA-Spring-WebSite-for-Eclipse2\">JAVA-Spring WebSite for Eclipse for JavaConfig</a></li>\n<li><a href=\"/JAVA-JPA-Setting\">JPA 設定</a></li>\n<li><a href=\"/JAVA-Spring-QList\">Spring Q-List</a></li>\n</ul>\n"},{"title":"JSLearningNote","date":"2020-03-02T16:04:57.000Z","_content":"\n* [2019-12-10](/JSLearningNote-2019-12-10)\n* [2019-12-17](/JSLearningNote-2019-12-17)\n* [2019-12-24](/JSLearningNote-2019-12-24)\n* [2020-01-02](/JSLearningNote-2020-01-02)\n","source":"_posts/JSLearningNote.md","raw":"---\ntitle: JSLearningNote\ndate: 2020-03-03 00:04:57\ncategories:\n- jsNote\ntags:\n- 教學\n- JavaScript\n- 前端\n---\n\n* [2019-12-10](/JSLearningNote-2019-12-10)\n* [2019-12-17](/JSLearningNote-2019-12-17)\n* [2019-12-24](/JSLearningNote-2019-12-24)\n* [2020-01-02](/JSLearningNote-2020-01-02)\n","slug":"JSLearningNote","published":1,"updated":"2020-03-23T11:37:38.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8izquw50007n5jtedkib779","content":"<ul>\n<li><a href=\"/JSLearningNote-2019-12-10\">2019-12-10</a></li>\n<li><a href=\"/JSLearningNote-2019-12-17\">2019-12-17</a></li>\n<li><a href=\"/JSLearningNote-2019-12-24\">2019-12-24</a></li>\n<li><a href=\"/JSLearningNote-2020-01-02\">2020-01-02</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/JSLearningNote-2019-12-10\">2019-12-10</a></li>\n<li><a href=\"/JSLearningNote-2019-12-17\">2019-12-17</a></li>\n<li><a href=\"/JSLearningNote-2019-12-24\">2019-12-24</a></li>\n<li><a href=\"/JSLearningNote-2020-01-02\">2020-01-02</a></li>\n</ul>\n"},{"title":"React_Tutorial","date":"2020-02-27T19:55:20.000Z","_content":"\n* [React 介紹](/ReactIntro)\n* [React 設定](/react-setting)\n* [React ToDoList](/react-todolist)\n","source":"_posts/React-Tutorial.md","raw":"---\ntitle: React_Tutorial\ndate: 2020-02-28 03:55:20\ncategories:\n- ReactJs\ntags:\n- ReactJs\n- 教學\n- JavaScript\n- 前端\n---\n\n* [React 介紹](/ReactIntro)\n* [React 設定](/react-setting)\n* [React ToDoList](/react-todolist)\n","slug":"React-Tutorial","published":1,"updated":"2020-04-02T16:45:33.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8izquw70009n5jtbmnmhj53","content":"<ul>\n<li><a href=\"/ReactIntro\">React 介紹</a></li>\n<li><a href=\"/react-setting\">React 設定</a></li>\n<li><a href=\"/react-todolist\">React ToDoList</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/ReactIntro\">React 介紹</a></li>\n<li><a href=\"/react-setting\">React 設定</a></li>\n<li><a href=\"/react-todolist\">React ToDoList</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8izquvx0001n5jt1fe77qxy","category_id":"ck8izquw20004n5jt42rahamh","_id":"ck8izquwc000fn5jt15su0je6"},{"post_id":"ck8izquw10003n5jt6ias0uzg","category_id":"ck8izquw8000bn5jt6f657vlh","_id":"ck8izquwe000mn5jt93vsba33"},{"post_id":"ck8izquw50007n5jtedkib779","category_id":"ck8izquwc000gn5jt3iff594n","_id":"ck8izquwg000rn5jt46lja3pf"},{"post_id":"ck8izquw70009n5jtbmnmhj53","category_id":"ck8izquwe000nn5jt8zutdvi0","_id":"ck8izquwi000vn5jt514x80xb"}],"PostTag":[{"post_id":"ck8izquvx0001n5jt1fe77qxy","tag_id":"ck8izquw40005n5jtbcbx6vtv","_id":"ck8izquwd000jn5jtgawudria"},{"post_id":"ck8izquvx0001n5jt1fe77qxy","tag_id":"ck8izquw9000cn5jt1mttbrng","_id":"ck8izquwe000ln5jtedfv29fm"},{"post_id":"ck8izquw10003n5jt6ias0uzg","tag_id":"ck8izquwc000hn5jt5cvx8fct","_id":"ck8izquwj000yn5jt1cke3zgx"},{"post_id":"ck8izquw10003n5jt6ias0uzg","tag_id":"ck8izquwe000on5jtbrq74r5e","_id":"ck8izquwk0010n5jtbwyz3j9b"},{"post_id":"ck8izquw10003n5jt6ias0uzg","tag_id":"ck8izquw9000cn5jt1mttbrng","_id":"ck8izquwl0013n5jt9wx602jj"},{"post_id":"ck8izquw50007n5jtedkib779","tag_id":"ck8izquw9000cn5jt1mttbrng","_id":"ck8izquwo001bn5jtf4875wvd"},{"post_id":"ck8izquw50007n5jtedkib779","tag_id":"ck8izquwk0011n5jtch690vem","_id":"ck8izquwp001dn5jt48054c04"},{"post_id":"ck8izquw50007n5jtedkib779","tag_id":"ck8izquwm0016n5jt3lssgycf","_id":"ck8izquwq001fn5jt4bvphaam"},{"post_id":"ck8izquw70009n5jtbmnmhj53","tag_id":"ck8izquwn0019n5jt9igj1s53","_id":"ck8izquwr001in5jt20ro5xba"},{"post_id":"ck8izquw70009n5jtbmnmhj53","tag_id":"ck8izquw9000cn5jt1mttbrng","_id":"ck8izquwr001jn5jtdqij7kyw"},{"post_id":"ck8izquw70009n5jtbmnmhj53","tag_id":"ck8izquwk0011n5jtch690vem","_id":"ck8izquwr001kn5jthhxp420a"},{"post_id":"ck8izquw70009n5jtbmnmhj53","tag_id":"ck8izquwm0016n5jt3lssgycf","_id":"ck8izquwr001ln5jte2ikfyy4"}],"Tag":[{"name":"Hexo","_id":"ck8izquw40005n5jtbcbx6vtv"},{"name":"教學","_id":"ck8izquw9000cn5jt1mttbrng"},{"name":"JAVA","_id":"ck8izquwc000hn5jt5cvx8fct"},{"name":"Spring","_id":"ck8izquwe000on5jtbrq74r5e"},{"name":"JavaScript","_id":"ck8izquwk0011n5jtch690vem"},{"name":"前端","_id":"ck8izquwm0016n5jt3lssgycf"},{"name":"ReactJs","_id":"ck8izquwn0019n5jt9igj1s53"}]}}